import type { SimpleSubexpressionValueType } from '../enums/SimpleSubexpressionValueType';
import type { LogicalTupleOperator } from '../enums/LogicalTupleOperator';
import type { ExpressionErrorKey } from '../enums/ExpressionErrorKey';
import type { RelationalOperator } from './RelationalOperator';
import type { InstanceContext } from '../enums/InstanceContext';

export type ExpressionTexts = {
  addSubexpression: string;
  and: string;
  andOr: string;
  cannotSaveSinceInvalid: string;
  cannotSimplify: string;
  changeToSimplifiedWarning: string;
  componentId: string;
  confirmDeleteSubexpression: string;
  datamodelPath: string;
  delete: string;
  disabledLogicalOperator: string;
  edit: string;
  errorListFooter: string;
  errorListHeader: string;
  errorMessages: Record<ExpressionErrorKey, string>;
  expression: string;
  false: string;
  firstOperand: string;
  instanceContext: Record<InstanceContext, string>;
  instanceContextKey: string;
  invalidExpression: string;
  logicalOperation: string;
  logicalOperator: string;
  logicalTupleOperators: Record<LogicalTupleOperator, string>;
  manual: string;
  numberValidationError: string;
  or: string;
  readonlyComponentId: string;
  readonlyDatamodelPath: string;
  readonlyInstanceContext: string;
  relationalOperator: string;
  relationalOperators: Record<RelationalOperator, string>;
  save: string;
  saveAndClose: string;
  secondOperand: string;
  simplified: string;
  subexpression: (index: number) => string;
  transformToLogical: string;
  true: string;
  value: string;
  valueType: string;
  valueTypes: Record<SimpleSubexpressionValueType, string>;
};
