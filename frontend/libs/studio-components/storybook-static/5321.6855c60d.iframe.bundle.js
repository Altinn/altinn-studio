'use strict';
(self.webpackChunk_studio_components = self.webpackChunk_studio_components || []).push([
  [5321],
  {
    './src/components/StudioBooleanToggleGroup/StudioBooleanToggleGroup.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { y: () => StudioBooleanToggleGroup });
      var _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/ToggleGroup/index.js',
        ),
        react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          '../../../node_modules/react/index.js',
        );
      const StudioBooleanToggleGroup = (0, react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(
        ({ falseLabel, onChange, trueLabel, value: givenValue, ...rest }, ref) => {
          const [value, setValue] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(
            givenValue ?? !1,
          );
          (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
            setValue(givenValue ?? !1);
          }, [givenValue]);
          return react__WEBPACK_IMPORTED_MODULE_0__.createElement(
            _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_1__.O,
            {
              ...rest,
              onChange: (stringValue) => {
                const newValue = 'true' === stringValue;
                setValue(newValue), onChange?.(newValue);
              },
              value: value ? 'true' : 'false',
              ref,
            },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(
              _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_1__.O.Item,
              { value: 'true' },
              trueLabel,
            ),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(
              _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_1__.O.Item,
              { value: 'false' },
              falseLabel,
            ),
          );
        },
      );
      (StudioBooleanToggleGroup.displayName = 'StudioBooleanToggleGroup'),
        (StudioBooleanToggleGroup.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioBooleanToggleGroup',
        });
    },
    './src/components/StudioBooleanToggleGroup/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, {
        y: () => _StudioBooleanToggleGroup__WEBPACK_IMPORTED_MODULE_0__.y,
      });
      var _StudioBooleanToggleGroup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        './src/components/StudioBooleanToggleGroup/StudioBooleanToggleGroup.tsx',
      );
    },
    './src/components/StudioCenter/StudioCenter.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { i: () => StudioCenter });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioCenter_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioCenter/StudioCenter.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioCenter_module.A, options);
      const StudioCenter_StudioCenter_module =
        StudioCenter_module.A && StudioCenter_module.A.locals
          ? StudioCenter_module.A.locals
          : void 0;
      var classnames = __webpack_require__('../../../node_modules/classnames/index.js'),
        classnames_default = __webpack_require__.n(classnames);
      const StudioCenter = (0, react.forwardRef)(({ className, ...rest }, ref) =>
        react.createElement('div', {
          ref,
          className: classnames_default()(className, StudioCenter_StudioCenter_module.root),
          ...rest,
        }),
      );
      (StudioCenter.displayName = 'StudioCenter'),
        (StudioCenter.__docgenInfo = {
          description:
            '@component\n   Component that centers its content both vertically and horizontally.',
          methods: [],
          displayName: 'StudioCenter',
        });
    },
    './src/components/StudioCodeFragment/StudioCodeFragment.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { o: () => StudioCodeFragment });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        classnames = __webpack_require__('../../../node_modules/classnames/index.js'),
        classnames_default = __webpack_require__.n(classnames),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioCodeFragment_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioCodeFragment/StudioCodeFragment.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioCodeFragment_module.A, options);
      const StudioCodeFragment_StudioCodeFragment_module =
          StudioCodeFragment_module.A && StudioCodeFragment_module.A.locals
            ? StudioCodeFragment_module.A.locals
            : void 0,
        StudioCodeFragment = (0, react.forwardRef)(
          ({ children, className: givenClass, ...rest }, ref) => {
            const className = classnames_default()(
              StudioCodeFragment_StudioCodeFragment_module.code,
              givenClass,
            );
            return react.createElement('code', { className, ...rest, ref }, children);
          },
        );
      (StudioCodeFragment.displayName = 'StudioCodeFragment'),
        (StudioCodeFragment.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioCodeFragment',
        });
    },
    './src/components/StudioCodeFragment/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, {
        o: () => _StudioCodeFragment__WEBPACK_IMPORTED_MODULE_0__.o,
      });
      var _StudioCodeFragment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        './src/components/StudioCodeFragment/StudioCodeFragment.tsx',
      );
    },
    './src/components/StudioDecimalInput/StudioDecimalInput.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { M: () => StudioDecimalInput });
      var react = __webpack_require__('../../../node_modules/react/index.js');
      const isStringValidDecimalNumber = (value) => {
        if (!value) return !0;
        return /^[0-9]+([.,][0-9]*)?$/.test(value);
      };
      var StudioTextfield = __webpack_require__('./src/components/StudioTextfield/index.ts');
      const StudioDecimalInput = (0, react.forwardRef)(
        ({ description, onChange, value, validationErrorMessage, ...rest }, ref) => {
          const [inputValue, setInputValue] = (0, react.useState)('');
          (0, react.useEffect)(() => {
            const newInputValue = ((value) => value?.toString().replace('.', ',') || '')(value);
            setInputValue(newInputValue);
          }, [value]);
          const handleInputChange = (0, react.useCallback)(
              (e) => {
                const input = e.target.value;
                setInputValue(input),
                  isStringValidDecimalNumber(input) &&
                    onChange(
                      ((value) => (value ? Number(value.replace(',', '.')) : void 0))(input),
                    );
              },
              [setInputValue, onChange],
            ),
            errorMessage = (0, react.useMemo)(
              () => (isStringValidDecimalNumber(inputValue) ? void 0 : validationErrorMessage),
              [inputValue, validationErrorMessage],
            );
          return react.createElement(StudioTextfield.e, {
            description,
            value: inputValue,
            onChange: handleInputChange,
            errorAfterBlur: errorMessage,
            inputMode: 'decimal',
            ref,
            ...rest,
          });
        },
      );
      (StudioDecimalInput.displayName = 'StudioDecimalInput'),
        (StudioDecimalInput.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioDecimalInput',
          props: {
            description: { required: !1, tsType: { name: 'string' }, description: '' },
            onChange: {
              required: !0,
              tsType: {
                name: 'signature',
                type: 'function',
                raw: '(value: number) => void',
                signature: {
                  arguments: [{ type: { name: 'number' }, name: 'value' }],
                  return: { name: 'void' },
                },
              },
              description: '',
            },
            value: { required: !1, tsType: { name: 'number' }, description: '' },
            validationErrorMessage: { required: !0, tsType: { name: 'string' }, description: '' },
          },
          composes: ['Omit'],
        });
    },
    './src/components/StudioDecimalInput/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, {
        M: () => _StudioDecimalInput__WEBPACK_IMPORTED_MODULE_0__.M,
      });
      var _StudioDecimalInput__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        './src/components/StudioDecimalInput/StudioDecimalInput.tsx',
      );
    },
    './src/components/StudioDeleteButton/StudioDeleteButton.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { W: () => StudioDeleteButton });
      var _StudioButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          './src/components/StudioButton/index.ts',
        ),
        react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          '../../../node_modules/react/index.js',
        ),
        _studio_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          '../studio-icons/src/index.ts',
        );
      const StudioDeleteButton = (0, react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(
        ({ confirmMessage, onClick, onDelete, ...rest }, ref) =>
          react__WEBPACK_IMPORTED_MODULE_1__.createElement(
            _StudioButton__WEBPACK_IMPORTED_MODULE_0__.r,
            {
              color: 'danger',
              icon: react__WEBPACK_IMPORTED_MODULE_1__.createElement(
                _studio_icons__WEBPACK_IMPORTED_MODULE_2__.TrashIcon,
                null,
              ),
              onClick: (event) => {
                onClick?.(event), (confirmMessage && !confirm(confirmMessage)) || onDelete();
              },
              variant: 'secondary',
              ...rest,
              ref,
            },
          ),
      );
      (StudioDeleteButton.displayName = 'StudioDeleteButton'),
        (StudioDeleteButton.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioDeleteButton',
        });
    },
    './src/components/StudioDeleteButton/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, {
        W: () => _StudioDeleteButton__WEBPACK_IMPORTED_MODULE_0__.W,
      });
      var _StudioDeleteButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        './src/components/StudioDeleteButton/StudioDeleteButton.tsx',
      );
    },
    './src/components/StudioDisplayTile/StudioDisplayTile.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { R: () => StudioDisplayTile });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        src = __webpack_require__('../studio-icons/src/index.ts'),
        classnames = __webpack_require__('../../../node_modules/classnames/index.js'),
        classnames_default = __webpack_require__.n(classnames),
        Paragraph = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Typography/Paragraph/Paragraph.js',
        ),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioDisplayTile_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioDisplayTile/StudioDisplayTile.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioDisplayTile_module.A, options);
      const StudioDisplayTile_StudioDisplayTile_module =
          StudioDisplayTile_module.A && StudioDisplayTile_module.A.locals
            ? StudioDisplayTile_module.A.locals
            : void 0,
        StudioDisplayTile = (0, react.forwardRef)(
          ({ icon, label, value, className: givenClassName, showPadlock = !0, ...rest }, ref) => {
            const className = classnames_default()(
              givenClassName,
              StudioDisplayTile_StudioDisplayTile_module.container,
            );
            return react.createElement(
              'div',
              { ...rest, className, ref },
              react.createElement(
                'div',
                { className: StudioDisplayTile_StudioDisplayTile_module.innerContainer },
                react.createElement(
                  'div',
                  { className: StudioDisplayTile_StudioDisplayTile_module.iconLabelContainer },
                  icon ?? null,
                  react.createElement(
                    Paragraph.f,
                    { size: 'small', className: StudioDisplayTile_StudioDisplayTile_module.label },
                    label,
                  ),
                ),
                react.createElement(Paragraph.f, { size: 'small' }, value),
              ),
              showPadlock &&
                react.createElement(src.PadlockLockedFillIcon, {
                  'data-testid': 'padlockIconTestId',
                }),
            );
          },
        );
      (StudioDisplayTile.displayName = 'StudioDisplayTile'),
        (StudioDisplayTile.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioDisplayTile',
          props: {
            icon: {
              required: !1,
              tsType: { name: 'ReactReactNode', raw: 'React.ReactNode' },
              description: '',
            },
            label: { required: !0, tsType: { name: 'string' }, description: '' },
            value: { required: !0, tsType: { name: 'string' }, description: '' },
            showPadlock: {
              required: !1,
              tsType: { name: 'boolean' },
              description: '',
              defaultValue: { value: 'true', computed: !1 },
            },
          },
        });
    },
    './src/components/StudioDropdownMenu/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, {
        X: () => StudioDropdownMenu_StudioDropdownMenu,
      });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        DropdownMenu = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/DropdownMenu/index.js',
        ),
        StudioButton = __webpack_require__('./src/components/StudioButton/index.ts');
      const StudioDropdownMenuContext = (0, react.createContext)(null),
        StudioDropdownMenu = ({ anchorButtonProps, children, ...rest }) => {
          const [open, setOpen] = (0, react.useState)(!1);
          return react.createElement(
            DropdownMenu.rI,
            { portal: !0, ...rest, onClose: () => setOpen(!1), open },
            react.createElement(
              DropdownMenu.rI.Trigger,
              { asChild: !0 },
              react.createElement(StudioButton.r, {
                'aria-expanded': open,
                'aria-haspopup': 'menu',
                size: rest.size,
                onClick: () => setOpen(!open),
                ...anchorButtonProps,
              }),
            ),
            react.createElement(
              DropdownMenu.rI.Content,
              null,
              react.createElement(
                StudioDropdownMenuContext.Provider,
                { value: { setOpen } },
                children,
              ),
            ),
          );
        };
      StudioDropdownMenu.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'StudioDropdownMenu',
        props: {
          anchorButtonProps: {
            required: !1,
            tsType: {
              name: 'intersection',
              raw: "Omit<ButtonProps, 'icon' | 'color'> & {\n  icon?: ReactNode;\n  iconPlacement?: IconPlacement;\n  color?: ButtonProps['color'] | 'inverted';\n}",
              elements: [
                {
                  name: 'Omit',
                  elements: [
                    { name: 'ButtonProps' },
                    {
                      name: 'union',
                      raw: "'icon' | 'color'",
                      elements: [
                        { name: 'literal', value: "'icon'" },
                        { name: 'literal', value: "'color'" },
                      ],
                    },
                  ],
                  raw: "Omit<ButtonProps, 'icon' | 'color'>",
                },
                {
                  name: 'signature',
                  type: 'object',
                  raw: "{\n  icon?: ReactNode;\n  iconPlacement?: IconPlacement;\n  color?: ButtonProps['color'] | 'inverted';\n}",
                  signature: {
                    properties: [
                      { key: 'icon', value: { name: 'ReactNode', required: !1 } },
                      {
                        key: 'iconPlacement',
                        value: {
                          name: 'union',
                          raw: "'left' | 'right'",
                          elements: [
                            { name: 'literal', value: "'left'" },
                            { name: 'literal', value: "'right'" },
                          ],
                          required: !1,
                        },
                      },
                      {
                        key: 'color',
                        value: {
                          name: 'union',
                          raw: "ButtonProps['color'] | 'inverted'",
                          elements: [
                            { name: "ButtonProps['color']", raw: "ButtonProps['color']" },
                            { name: 'literal', value: "'inverted'" },
                          ],
                          required: !1,
                        },
                      },
                    ],
                  },
                },
              ],
            },
            description: '',
          },
        },
        composes: ['Omit'],
      };
      var DropdownMenuGroup = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/DropdownMenu/DropdownMenuGroup.js',
        ),
        classnames = __webpack_require__('../../../node_modules/classnames/index.js'),
        classnames_default = __webpack_require__.n(classnames),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioDropdownMenuItem_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioDropdownMenu/StudioDropdownMenuItem.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioDropdownMenuItem_module.A, options);
      const StudioDropdownMenu_StudioDropdownMenuItem_module =
          StudioDropdownMenuItem_module.A && StudioDropdownMenuItem_module.A.locals
            ? StudioDropdownMenuItem_module.A.locals
            : void 0,
        StudioDropdownMenuItem = (0, react.forwardRef)(
          ({ children, icon, iconPlacement = 'left', className, onClick, ...rest }, ref) => {
            const { setOpen } = (0, react.useContext)(StudioDropdownMenuContext),
              iconComponent = react.createElement(
                'span',
                {
                  'aria-hidden': !0,
                  className: StudioDropdownMenu_StudioDropdownMenuItem_module.iconWrapper,
                },
                icon,
              );
            return react.createElement(
              DropdownMenu.rI.Item,
              {
                className: classnames_default()(
                  className,
                  StudioDropdownMenu_StudioDropdownMenuItem_module.studioDropdownMenuItem,
                ),
                onClick: (event) => {
                  onClick(event), setOpen(!1);
                },
                ...rest,
                ref,
                icon: !children,
              },
              icon && 'left' === iconPlacement && iconComponent,
              children,
              icon && 'right' === iconPlacement && iconComponent,
            );
          },
        );
      (StudioDropdownMenuItem.displayName = 'StudioDropdownMenu.Item'),
        (StudioDropdownMenuItem.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioDropdownMenu.Item',
          props: {
            iconPlacement: { defaultValue: { value: "'left'", computed: !1 }, required: !1 },
          },
        });
      const StudioDropdownMenu_StudioDropdownMenu = StudioDropdownMenu;
      (StudioDropdownMenu_StudioDropdownMenu.Group = DropdownMenuGroup.I),
        (StudioDropdownMenu_StudioDropdownMenu.Item = StudioDropdownMenuItem),
        (StudioDropdownMenu_StudioDropdownMenu.Group.displayName = 'StudioDropdownMenu.Group'),
        (StudioDropdownMenu_StudioDropdownMenu.Item.displayName = 'StudioDropdownMenu.Item');
    },
    './src/components/StudioExpression/StudioExpression.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { B: () => StudioExpression });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        dist_ajv = __webpack_require__('../../../node_modules/ajv/dist/ajv.js'),
        ajv_default = __webpack_require__.n(dist_ajv);
      const expression_schema_v1_namespaceObject = JSON.parse(
          '{"$id":"https://altinncdn.no/schemas/json/layout/expression.schema.v1.json","$schema":"http://json-schema.org/draft-07/schema#","title":"Expression","description":"Multi-purpose expression mini-language used to declare dynamic behaviour in Altinn 3 apps","examples":[["equals",["dataModel","My.Model.Group.Field"],"string constant"],["greaterThanEq",["component","my-component-id"],["dataModel","My.Model.Other.Field"]],["or",["equals","foo","bar"],["equals","foo","baz"]],["if",["or",["equals",["component","my-component"],""],["equals",["component","my-component"],null]],"This will be the value if the condition above is true","else",["if",["notEquals",["component","my-other-component"],"illegal value"],"This will be the value if the first condition is false, and the second is true","else","This will be the value if all the conditions above are false"]],["concat","Are you sure you want to delete ",["dataModel","My.Model.Title"],"?"]],"$ref":"#/definitions/any","definitions":{"any":{"title":"Any expression","anyOf":[{"type":"null","title":"Null/missing value"},{"$ref":"#/definitions/strict-string"},{"$ref":"#/definitions/strict-boolean"},{"$ref":"#/definitions/strict-number"},{"$ref":"#/definitions/func-if"}]},"string":{"title":"Any expression returning string","anyOf":[{"type":"null","title":"Null/missing value"},{"$ref":"#/definitions/strict-string"},{"$ref":"#/definitions/func-if"},{"$ref":"#/definitions/strict-number","description":"Numbers can be cast to strings"},{"$ref":"#/definitions/strict-boolean","description":"Booleans can be cast to strings"}]},"strict-string":{"title":"Any expression returning string (strict)","anyOf":[{"type":"string","title":"String constant"},{"$ref":"#/definitions/func-component"},{"$ref":"#/definitions/func-dataModel"},{"$ref":"#/definitions/func-gatewayAction"},{"$ref":"#/definitions/func-displayValue"},{"$ref":"#/definitions/func-instanceContext"},{"$ref":"#/definitions/func-frontendSettings"},{"$ref":"#/definitions/func-concat"},{"$ref":"#/definitions/func-formatDate"},{"$ref":"#/definitions/func-round"},{"$ref":"#/definitions/func-text"},{"$ref":"#/definitions/func-language"},{"$ref":"#/definitions/func-lowerCase"},{"$ref":"#/definitions/func-upperCase"},{"$ref":"#/definitions/func-argv"}]},"boolean":{"title":"Any expression returning boolean","anyOf":[{"type":"null","title":"Null/missing value"},{"$ref":"#/definitions/strict-boolean"},{"$ref":"#/definitions/func-if"},{"$ref":"#/definitions/strict-string","description":"Stringy true/false/0/1 can be cast to boolean"},{"$ref":"#/definitions/strict-number","description":"Numeric 0/1 can be cast to boolean"}]},"strict-boolean":{"title":"Any expression returning boolean (strict)","anyOf":[{"type":"boolean","title":"Boolean constant"},{"$ref":"#/definitions/func-equals"},{"$ref":"#/definitions/func-notEquals"},{"$ref":"#/definitions/func-greaterThan"},{"$ref":"#/definitions/func-greaterThanEq"},{"$ref":"#/definitions/func-lessThan"},{"$ref":"#/definitions/func-lessThanEq"},{"$ref":"#/definitions/func-not"},{"$ref":"#/definitions/func-and"},{"$ref":"#/definitions/func-or"},{"$ref":"#/definitions/func-authContext"},{"$ref":"#/definitions/func-contains"},{"$ref":"#/definitions/func-notContains"},{"$ref":"#/definitions/func-endsWith"},{"$ref":"#/definitions/func-startsWith"},{"$ref":"#/definitions/func-commaContains"}]},"number":{"title":"Any expression returning a number","anyOf":[{"type":"null","title":"Null/missing value"},{"$ref":"#/definitions/strict-number"},{"$ref":"#/definitions/func-if"},{"$ref":"#/definitions/strict-string","description":"Numeric strings can be cast to numbers"}]},"strict-number":{"title":"Any expression returning a number (strict)","anyOf":[{"type":"number","title":"Numeric constant"},{"$ref":"#/definitions/func-stringLength"}]},"func-if":{"title":"If/else conditional expression","description":"This function will evaluate and return the result of either branch. If else is not given, null will be returned instead.","anyOf":[{"$ref":"#/definitions/func-if-with-else"},{"$ref":"#/definitions/func-if-without-else"}]},"func-if-without-else":{"type":"array","items":[{"const":"if"},{"$ref":"#/definitions/boolean"},{"$ref":"#/definitions/any"}],"additionalItems":false},"func-if-with-else":{"type":"array","items":[{"const":"if"},{"$ref":"#/definitions/boolean"},{"$ref":"#/definitions/any"},{"const":"else"},{"$ref":"#/definitions/any"}],"additionalItems":false},"func-component":{"title":"Component value lookup function","description":"This function will look up a nearby component and its value (only supports simpleBinding currently). Other components can be siblings, or siblings of parent groups.","type":"array","items":[{"const":"component"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-dataModel":{"title":"Data model lookup function","description":"This function will look up a value in the data model, using the JSON dot notation for referencing the data model structure. Relative positioning inside repeating groups will be resolved automatically if no positional indexes are specified.","type":"array","items":[{"const":"dataModel"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-gatewayAction":{"title":"Gateway action lookup function","description":"This function will look up a value in the gateway action","type":"array","items":[{"const":"gatewayAction"},{"enum":["confirm","pay","reject"]}]},"func-displayValue":{"title":"Component display value lookup function","description":"This function will look up a nearby component and return its display value. Other components can be siblings, or siblings of parent groups.","type":"array","items":[{"const":"displayValue"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-instanceContext":{"title":"Instance context lookup function","description":"This function can be used to lookup a value from the instance context","type":"array","items":[{"const":"instanceContext"},{"enum":["appId","instanceId","instanceOwnerPartyId"]}],"additionalItems":false},"func-authContext":{"title":"Auth context lookup function","description":"This function can be used to check the users permissions on the current process step.","type":"array","items":[{"const":"authContext"},{"enum":["read","write","instantiate","confirm","sign","reject"]}],"additionalItems":false},"func-frontendSettings":{"title":"Frontend settings lookup function","description":"This function can be used to lookup a value from frontendSettings (only supports scalar values, no objects or arrays)","type":"array","items":[{"const":"frontendSettings"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-concat":{"title":"String concatenation function","description":"This function will concatenate strings or numbers, producing a final string as a result","type":"array","items":[{"const":"concat"}],"additionalItems":{"$ref":"#/definitions/string"}},"func-equals":{"title":"Equals function","description":"This function compares two values (or expressions) for equality","type":"array","items":[{"const":"equals"},{"$ref":"#/definitions/any"},{"$ref":"#/definitions/any"}],"additionalItems":false},"func-notEquals":{"title":"Not equals function","description":"This function compares two values (or expressions) for inequality","type":"array","items":[{"const":"notEquals"},{"$ref":"#/definitions/any"},{"$ref":"#/definitions/any"}],"additionalItems":false},"func-not":{"title":"Not function","description":"This function inverts a boolean, returning true if given false, and vice versa.","type":"array","items":[{"const":"not"},{"$ref":"#/definitions/boolean"}],"additionalItems":false},"func-greaterThan":{"title":"Greater than function","description":"This function compares two values (or expressions), returning true if the first argument is greater than the second","type":"array","items":[{"const":"greaterThan"},{"$ref":"#/definitions/number"},{"$ref":"#/definitions/number"}],"additionalItems":false},"func-greaterThanEq":{"title":"Greater than or equals function","description":"This function compares two values (or expressions), returning true if the first argument is greater than or equals the second","type":"array","items":[{"const":"greaterThanEq"},{"$ref":"#/definitions/number"},{"$ref":"#/definitions/number"}],"additionalItems":false},"func-lessThan":{"title":"Less than function","description":"This function compares two values (or expressions), returning true if the first argument is less than the second","type":"array","items":[{"const":"lessThan"},{"$ref":"#/definitions/number"},{"$ref":"#/definitions/number"}],"additionalItems":false},"func-lessThanEq":{"title":"Less than or equals function","description":"This function compares two values (or expressions), returning true if the first argument is less than or equals the second","type":"array","items":[{"const":"lessThanEq"},{"$ref":"#/definitions/number"},{"$ref":"#/definitions/number"}],"additionalItems":false},"func-and":{"title":"And combinator","description":"This function returns true if all the arguments (or expressions) are true","type":"array","items":[{"const":"and"},{"$ref":"#/definitions/boolean"}],"additionalItems":{"$ref":"#/definitions/boolean"}},"func-or":{"title":"Or combinator","description":"This function returns true if any of the arguments (or expressions) are true","type":"array","items":[{"const":"or"},{"$ref":"#/definitions/boolean"}],"additionalItems":{"$ref":"#/definitions/boolean"}},"func-formatDate":{"title":"Format date function","description":"This function formats a string in ISO date format to a human readable format. Uses the language settings to determine the date format, but a custom format can also be specified","type":"array","items":[{"const":"formatDate"},{"$ref":"#/definitions/string"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-round":{"title":"Round function","description":"This function rounds a number to the nearest integer, or to the specified number of decimals","type":"array","items":[{"const":"round"},{"$ref":"#/definitions/number"},{"$ref":"#/definitions/number"}],"additionalItems":false},"func-text":{"title":"Text function","description":"This function retrieves the value of a text resource key, or returns the key if no text resource is found","type":"array","items":[{"const":"text"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-language":{"title":"Language function","description":"This function retrieves the current language (usually \'nb\', \'nn\' or \'en\')","type":"array","items":[{"const":"language"}],"additionalItems":false},"func-contains":{"title":"Contains function","description":"This function checks if the first string contains the second string","type":"array","items":[{"const":"contains"},{"$ref":"#/definitions/string"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-notContains":{"title":"Not contains function","description":"This function checks if the first string does not contain the second string","type":"array","items":[{"const":"notContains"},{"$ref":"#/definitions/string"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-startsWith":{"title":"Starts with function","description":"This function checks if the first string starts with the second string","type":"array","items":[{"const":"startsWith"},{"$ref":"#/definitions/string"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-endsWith":{"title":"Ends with function","description":"This function checks if the first string ends with the second string","type":"array","items":[{"const":"endsWith"},{"$ref":"#/definitions/string"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-stringLength":{"title":"String length function","description":"This function returns the length of a string","type":"array","items":[{"const":"stringLength"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-commaContains":{"title":"Comma contains function","description":"This function checks if the first comma-separated string contains the second string","type":"array","items":[{"const":"commaContains"},{"$ref":"#/definitions/string"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-lowerCase":{"title":"Lower case function","description":"This function converts a string to lower case","type":"array","items":[{"const":"lowerCase"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-upperCase":{"title":"Upper case function","description":"This function converts a string to upper case","type":"array","items":[{"const":"upperCase"},{"$ref":"#/definitions/string"}],"additionalItems":false},"func-argv":{"title":"Positional argument function","description":"This function returns the value of the positional argument at the specified index passed to the expression (currently only available for validation conditions)","type":"array","items":[{"const":"argv"},{"$ref":"#/definitions/number"}],"additionalItems":false}}}',
        ),
        isExpressionValid = (expression) =>
          new (ajv_default())({ strict: !1 }).compile(expression_schema_v1_namespaceObject)(
            expression,
          );
      var Alert = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Alert/Alert.js',
        ),
        Tabs = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Tabs/index.js',
        ),
        NumberRelationOperator = __webpack_require__(
          './src/components/StudioExpression/enums/NumberRelationOperator.ts',
        ),
        GeneralRelationOperator = __webpack_require__(
          './src/components/StudioExpression/enums/GeneralRelationOperator.ts',
        ),
        DataLookupFuncName = __webpack_require__(
          './src/components/StudioExpression/enums/DataLookupFuncName.ts',
        ),
        KeyLookupFuncName = __webpack_require__(
          './src/components/StudioExpression/enums/KeyLookupFuncName.ts',
        ),
        LogicalTupleOperator = __webpack_require__(
          './src/components/StudioExpression/enums/LogicalTupleOperator.ts',
        ),
        GatewayActionContext = __webpack_require__(
          './src/components/StudioExpression/enums/GatewayActionContext.ts',
        );
      const isExpressionSimple = (expression) =>
          'boolean' == typeof expression ||
          null === expression ||
          isRelationFunc(expression) ||
          isSimpleLogicalTupleFunc(expression),
        isRelationFunc = (expression) =>
          isNumberRelationFunc(expression) || isTypeIndependentRelationFunc(expression),
        isNumberRelationFunc = (expression) =>
          Array.isArray(expression) &&
          3 === expression.length &&
          Object.values(NumberRelationOperator.a).includes(expression[0]) &&
          isSimpleValueFunc(expression[1]) &&
          isSimpleValueFunc(expression[2]),
        isTypeIndependentRelationFunc = (expression) =>
          Array.isArray(expression) &&
          3 === expression.length &&
          Object.values(GeneralRelationOperator.R).includes(expression[0]) &&
          isSimpleValueFunc(expression[1]) &&
          isSimpleValueFunc(expression[2]),
        isSimpleValueFunc = (expression) =>
          null === expression ||
          'number' == typeof expression ||
          'string' == typeof expression ||
          'boolean' == typeof expression ||
          isSimpleDataLookupFunc(expression) ||
          isSimpleKeyLookupFunc(expression) ||
          isProcessDataLookupFunc(expression),
        isSimpleDataLookupFunc = (expression) =>
          Array.isArray(expression) &&
          2 === expression.length &&
          Object.values(DataLookupFuncName.A).includes(expression[0]) &&
          'string' == typeof expression[1],
        isProcessDataLookupFunc = (expression) =>
          Array.isArray(expression) && [DataLookupFuncName.A.GatewayAction].includes(expression[0]),
        isSimpleKeyLookupFunc = (expression) =>
          Array.isArray(expression) &&
          2 === expression.length &&
          Object.values(KeyLookupFuncName.J).includes(expression[0]) &&
          'string' == typeof expression[1],
        isSimpleLogicalTupleFunc = (expression) =>
          Array.isArray(expression) &&
          expression.length > 2 &&
          Object.values(LogicalTupleOperator.y).includes(expression[0]) &&
          expression.slice(1).every(isRelationFunc);
      var SimpleSubexpressionValueType = __webpack_require__(
        './src/components/StudioExpression/enums/SimpleSubexpressionValueType.ts',
      );
      const DEFAULT_LOGICAL_OPERATOR = LogicalTupleOperator.y.And,
        DEFAULT_SUBEXPRESSION = {
          firstOperand: { type: SimpleSubexpressionValueType.C.Number, value: 0 },
          secondOperand: { type: SimpleSubexpressionValueType.C.Number, value: 0 },
          relationalOperator: GeneralRelationOperator.R.Equals,
        },
        DEFAULT_LOGICAL_EXPRESSION = {
          logicalOperator: DEFAULT_LOGICAL_OPERATOR,
          subexpressions: [DEFAULT_SUBEXPRESSION],
        },
        nullExpressionInSimpleFormat = {
          logicalOperator: DEFAULT_LOGICAL_OPERATOR,
          subexpressions: [],
        },
        complexRelationFuncToSimpleExpression = (func) => ({
          logicalOperator: DEFAULT_LOGICAL_OPERATOR,
          subexpressions: [complexRelationFuncToSimpleSubexpression(func)],
        }),
        complexRelationFuncToSimpleSubexpression = ([
          relationalOperator,
          firstValue,
          secondValue,
        ]) => {
          if (!isSimpleValueFunc(firstValue) || !isSimpleValueFunc(secondValue))
            throw new Error(
              'Relation function is not convertable. This should have been picked up by the validator.',
            );
          return {
            relationalOperator,
            firstOperand: complexValueToSimple(firstValue),
            secondOperand: complexValueToSimple(secondValue),
          };
        },
        complexValueToSimple = (value) => {
          return isSimpleDataLookupFunc(value)
            ? dataLookupFuncToSimpleFormat(value)
            : isSimpleKeyLookupFunc(value)
              ? keyLookupFuncToSimpleFormat(value)
              : ((expression = value),
                Array.isArray(expression) && expression[0] === DataLookupFuncName.A.GatewayAction
                  ? processActionToSimpleFormat(value)
                  : ((expression) => {
                        const actions = Object.values(GatewayActionContext.e);
                        return 'string' == typeof expression && actions.includes(expression);
                      })(value)
                    ? processUserActionToSimpleFormat(value)
                    : primitiveValueToSimpleFormat(value));
          var expression;
        },
        dataLookupFuncToSimpleFormat = ([source, key]) => {
          if ('string' != typeof key)
            throw new Error(
              'Data lookup function is not convertable. This should have been picked up by the validator.',
            );
          switch (source) {
            case DataLookupFuncName.A.Component:
              return { type: SimpleSubexpressionValueType.C.Component, id: key };
            case DataLookupFuncName.A.DataModel:
              return { type: SimpleSubexpressionValueType.C.DataModel, path: key };
          }
        },
        processActionToSimpleFormat = ([value]) => {
          if (
            Array.isArray(value) &&
            value[0] !== SimpleSubexpressionValueType.C.GatewayActionContext
          )
            throw new Error(
              'Data lookup function is not convertable. This should have been picked up by the validator.',
            );
          return { type: SimpleSubexpressionValueType.C.GatewayAction, value: 'GatewayAction' };
        },
        processUserActionToSimpleFormat = (action) => ({
          type: SimpleSubexpressionValueType.C.GatewayActionContext,
          key: action,
        }),
        keyLookupFuncToSimpleFormat = ([, key]) => {
          if ('string' != typeof key)
            throw new Error(
              'Key lookup function is not convertable. This should have been picked up by the validator.',
            );
          return { type: SimpleSubexpressionValueType.C.InstanceContext, key };
        },
        primitiveValueToSimpleFormat = (value) => {
          switch (typeof value) {
            case 'string':
              return { type: SimpleSubexpressionValueType.C.String, value };
            case 'number':
              return { type: SimpleSubexpressionValueType.C.Number, value };
            case 'boolean':
              return { type: SimpleSubexpressionValueType.C.Boolean, value };
            default:
              return { type: SimpleSubexpressionValueType.C.Null };
          }
        },
        logicalTupleFuncToSimpleFormat = ([logicalOperator, ...values]) => ({
          logicalOperator,
          subexpressions: values.map(complexRelationFuncToSimpleSubexpression),
        }),
        simpleLogicalExpressionToComplex = ({ logicalOperator, subexpressions }) => {
          switch (subexpressions.length) {
            case 0:
              return null;
            case 1:
              return subexpressionToComplex(subexpressions[0]);
            default:
              return [logicalOperator, ...subexpressions.map(subexpressionToComplex)];
          }
        },
        subexpressionToComplex = ({ relationalOperator, firstOperand, secondOperand }) => [
          relationalOperator,
          subexpressionValueToComplex(firstOperand),
          subexpressionValueToComplex(secondOperand),
        ],
        subexpressionValueToComplex = (subexpression) => {
          switch (subexpression.type) {
            case SimpleSubexpressionValueType.C.Component:
              return [DataLookupFuncName.A.Component, subexpression.id];
            case SimpleSubexpressionValueType.C.DataModel:
              return [DataLookupFuncName.A.DataModel, subexpression.path];
            case SimpleSubexpressionValueType.C.InstanceContext:
              return [KeyLookupFuncName.J.InstanceContext, subexpression.key];
            case SimpleSubexpressionValueType.C.Null:
              return null;
            case SimpleSubexpressionValueType.C.GatewayAction:
              return [DataLookupFuncName.A.GatewayAction];
            case SimpleSubexpressionValueType.C.GatewayActionContext:
              return subexpression.key;
            default:
              return subexpression.value;
          }
        };
      class ArrayUtils {
        static removeDuplicates(array) {
          return [...new Set(array)];
        }
        static getValidIndex(array, givenIndex) {
          return givenIndex < 0 || givenIndex >= array.length ? array.length - 1 : givenIndex;
        }
        static removeItemByValue(array, value) {
          return array.filter((item) => item !== value);
        }
        static last = (array) => array[array.length - 1];
        static intersection = (arrA, arrB, include = !0) =>
          arrA.filter((x) => (include ? arrB.includes(x) : !arrB.includes(x)));
        static replaceByIndex = (array, index, newValue) => {
          if (index < 0 || index >= array.length) return array;
          const newArray = [...array];
          return (newArray[index] = newValue), newArray;
        };
        static removeItemByIndex = (array, indexToRemove) =>
          array.filter((_, index) => index !== indexToRemove);
        static getNonEmptyArrayOrUndefined = (array) => (array.length > 0 ? array : void 0);
        static prepend(array, item) {
          return [item, ...array];
        }
      }
      const addSubexpression = (expression, newSubexpression) => {
          const newExpressions = [...expression.subexpressions, newSubexpression];
          return changeSubexpressions(expression, newExpressions);
        },
        changeSubexpressions = (expression, newSubexpressions) => ({
          ...expression,
          subexpressions: newSubexpressions,
        });
      var injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        LogicalExpressionEditor_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/LogicalExpressionEditor.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(LogicalExpressionEditor_module.A, options);
      const LogicalExpressionEditor_LogicalExpressionEditor_module =
        LogicalExpressionEditor_module.A && LogicalExpressionEditor_module.A.locals
          ? LogicalExpressionEditor_module.A.locals
          : void 0;
      var StudioButton = __webpack_require__('./src/components/StudioButton/index.ts'),
        src = __webpack_require__('../studio-icons/src/index.ts');
      var Paragraph = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Typography/Paragraph/Paragraph.js',
        ),
        NativeSelect = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/form/NativeSelect/NativeSelect.js',
        );
      const StudioExpressionContext = (0, react.createContext)(null),
        useStudioExpressionContext = () => (0, react.useContext)(StudioExpressionContext),
        operatorList = [
          ...Object.values(GeneralRelationOperator.R),
          ...Object.values(NumberRelationOperator.a),
        ],
        RelationalOperatorSelector = ({ className, isInEditMode, onChange, operator }) => {
          const { texts } = useStudioExpressionContext(),
            { relationalOperators } = texts;
          if (!isInEditMode)
            return react.createElement(
              Paragraph.f,
              { size: 'small' },
              relationalOperators[operator],
            );
          return react.createElement(
            'div',
            { className },
            react.createElement(
              NativeSelect.m,
              {
                size: 'small',
                label: texts.relationalOperator,
                value: operator,
                onChange: (event) => onChange(event.target.value),
              },
              operatorList.map((o) =>
                react.createElement('option', { key: o, value: o }, relationalOperators[o]),
              ),
            ),
          );
        };
      RelationalOperatorSelector.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'RelationalOperatorSelector',
        props: {
          className: { required: !1, tsType: { name: 'string' }, description: '' },
          isInEditMode: { required: !0, tsType: { name: 'boolean' }, description: '' },
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(operator: RelationalOperator) => void',
              signature: {
                arguments: [
                  {
                    type: {
                      name: 'union',
                      raw: 'NumberRelationOperator | GeneralRelationOperator',
                      elements: [
                        { name: 'NumberRelationOperator' },
                        { name: 'GeneralRelationOperator' },
                      ],
                    },
                    name: 'operator',
                  },
                ],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          operator: {
            required: !0,
            tsType: {
              name: 'union',
              raw: 'NumberRelationOperator | GeneralRelationOperator',
              elements: [{ name: 'NumberRelationOperator' }, { name: 'GeneralRelationOperator' }],
            },
            description: '',
          },
        },
      };
      var ExpressionErrorKey = __webpack_require__(
          './src/components/StudioExpression/enums/ExpressionErrorKey.ts',
        ),
        Combobox = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/form/Combobox/index.js',
        );
      const DataModelPointerSelector = ({ value, onChange }) => {
        const { dataLookupOptions, texts } = useStudioExpressionContext(),
          [errorKey, setErrorKey] = (0, react.useState)(null),
          [pathValue, setPathValue] = (0, react.useState)(value.path),
          options = dataLookupOptions[DataLookupFuncName.A.DataModel];
        return react.createElement(
          Combobox.G3,
          {
            error: texts.errorMessages[errorKey],
            label: texts.dataModelPath,
            onValueChange: (values) => {
              values.length
                ? (setPathValue(values[0]),
                  onChange({ ...value, path: values[0] }),
                  setErrorKey(null))
                : (setPathValue(''), setErrorKey(ExpressionErrorKey.E.InvalidDataModelPath));
            },
            size: 'small',
            value: pathValue ? [pathValue] : [],
          },
          options.map((option) =>
            react.createElement(Combobox.G3.Option, { key: option, value: option }, option),
          ),
        );
      };
      DataModelPointerSelector.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'DataModelPointerSelector',
        props: {
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(value: SimpleSubexpressionValue<T>) => void',
              signature: {
                arguments: [{ type: { name: 'unknown' }, name: 'value' }],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          value: { required: !0, tsType: { name: 'unknown' }, description: '' },
        },
      };
      const ComponentIdSelector = ({ value, onChange }) => {
        const { dataLookupOptions, texts } = useStudioExpressionContext(),
          options = dataLookupOptions[DataLookupFuncName.A.Component],
          idValueExist = options.includes(value.id) || '' === value.id,
          [errorKey, setErrorKey] = (0, react.useState)(
            idValueExist ? null : ExpressionErrorKey.E.ComponentIDNoLongerExists,
          ),
          [idValue, setIdValue] = (0, react.useState)(value.id);
        return react.createElement(
          Combobox.G3,
          {
            error: texts.errorMessages[errorKey],
            label: texts.componentId,
            onValueChange: (values) => {
              values.length
                ? (setIdValue(values[0]), onChange({ ...value, id: values[0] }), setErrorKey(null))
                : (setIdValue(''), setErrorKey(ExpressionErrorKey.E.InvalidComponentId));
            },
            size: 'small',
            value: idValue && idValueExist ? [idValue] : [],
          },
          options.map((option) =>
            react.createElement(Combobox.G3.Option, { key: option, value: option }, option),
          ),
        );
      };
      ComponentIdSelector.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'ComponentIdSelector',
        props: {
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(value: SimpleSubexpressionValue<T>) => void',
              signature: {
                arguments: [{ type: { name: 'unknown' }, name: 'value' }],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          value: { required: !0, tsType: { name: 'unknown' }, description: '' },
        },
      };
      var InstanceContext = __webpack_require__(
        './src/components/StudioExpression/enums/InstanceContext.ts',
      );
      const InstanceContextKeySelector = ({ value, onChange }) => {
        const { texts } = useStudioExpressionContext(),
          options = Object.values(InstanceContext.N);
        return react.createElement(
          NativeSelect.m,
          {
            size: 'small',
            onChange: (event) => onChange({ ...value, key: event.target.value }),
            label: texts.instanceContextKey,
          },
          options.map((option) =>
            react.createElement(
              'option',
              { key: option, value: option },
              texts.instanceContext[option],
            ),
          ),
        );
      };
      InstanceContextKeySelector.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'InstanceContextKeySelector',
        props: {
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(value: SimpleSubexpressionValue<T>) => void',
              signature: {
                arguments: [{ type: { name: 'unknown' }, name: 'value' }],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          value: { required: !0, tsType: { name: 'unknown' }, description: '' },
        },
      };
      var Textfield = __webpack_require__(
        '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/form/Textfield/Textfield.js',
      );
      const StringInput = ({ value, onChange }) => {
        const { texts } = useStudioExpressionContext();
        return react.createElement(Textfield.q, {
          size: 'small',
          value: value.value,
          onChange: (event) => onChange({ ...value, value: event.target.value }),
          label: texts.value,
        });
      };
      StringInput.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'StringInput',
        props: {
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(value: SimpleSubexpressionValue<T>) => void',
              signature: {
                arguments: [{ type: { name: 'unknown' }, name: 'value' }],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          value: { required: !0, tsType: { name: 'unknown' }, description: '' },
        },
      };
      var StudioDecimalInput = __webpack_require__('./src/components/StudioDecimalInput/index.ts');
      const NumberInput = ({ value, onChange }) => {
        const { texts } = useStudioExpressionContext();
        return react.createElement(StudioDecimalInput.M, {
          label: texts.value,
          onChange: (number) => onChange({ ...value, value: number }),
          size: 'small',
          validationErrorMessage: texts.numberValidationError,
          value: value.value,
        });
      };
      NumberInput.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'NumberInput',
        props: {
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(value: SimpleSubexpressionValue<T>) => void',
              signature: {
                arguments: [{ type: { name: 'unknown' }, name: 'value' }],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          value: { required: !0, tsType: { name: 'unknown' }, description: '' },
        },
      };
      var StudioBooleanToggleGroup = __webpack_require__(
        './src/components/StudioBooleanToggleGroup/index.ts',
      );
      const BooleanInput = ({ value, onChange }) => {
        const { texts } = useStudioExpressionContext();
        return react.createElement(StudioBooleanToggleGroup.y, {
          falseLabel: texts.false,
          onChange: (booleanValue) => onChange({ ...value, value: booleanValue }),
          size: 'small',
          trueLabel: texts.true,
          value: value.value,
        });
      };
      BooleanInput.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'BooleanInput',
        props: {
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(value: SimpleSubexpressionValue<T>) => void',
              signature: {
                arguments: [{ type: { name: 'unknown' }, name: 'value' }],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          value: { required: !0, tsType: { name: 'unknown' }, description: '' },
        },
      };
      var src_0 = __webpack_require__('./src/index.ts');
      const GatewayActionSelector = ({ value, onChange }) => {
        const { texts } = useStudioExpressionContext(),
          options = Object.values(GatewayActionContext.e);
        return react.createElement(
          src_0.eg,
          {
            size: 'small',
            onChange: (event) => onChange({ ...value, key: event.target.value }),
            label: texts.gatewayActionKey,
            defaultValue: value.key,
          },
          options.map((option) =>
            react.createElement(
              'option',
              { key: option, value: option },
              texts.gatewayActionContext[option],
            ),
          ),
        );
      };
      GatewayActionSelector.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'GatewayActionSelector',
        props: {
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(value: SimpleSubexpressionValue<T>) => void',
              signature: {
                arguments: [{ type: { name: 'unknown' }, name: 'value' }],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          value: { required: !0, tsType: { name: 'unknown' }, description: '' },
        },
      };
      const SubexpressionValueContentInput = ({ onChange, value }) => {
        switch (value.type) {
          case SimpleSubexpressionValueType.C.DataModel:
            return react.createElement(DataModelPointerSelector, { onChange, value });
          case SimpleSubexpressionValueType.C.Component:
            return react.createElement(ComponentIdSelector, { onChange, value });
          case SimpleSubexpressionValueType.C.InstanceContext:
            return react.createElement(InstanceContextKeySelector, { onChange, value });
          case SimpleSubexpressionValueType.C.GatewayAction:
            return null;
          case SimpleSubexpressionValueType.C.GatewayActionContext:
            return react.createElement(GatewayActionSelector, { onChange, value });
          case SimpleSubexpressionValueType.C.String:
            return react.createElement(StringInput, { onChange, value });
          case SimpleSubexpressionValueType.C.Number:
            return react.createElement(NumberInput, { onChange, value });
          case SimpleSubexpressionValueType.C.Boolean:
            return react.createElement(BooleanInput, { onChange, value });
          default:
            return null;
        }
      };
      SubexpressionValueContentInput.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'SubexpressionValueContentInput',
        props: {
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(value: SimpleSubexpressionValue<T>) => void',
              signature: {
                arguments: [{ type: { name: 'unknown' }, name: 'value' }],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          value: { required: !0, tsType: { name: 'unknown' }, description: '' },
        },
      };
      const SubexpressionValueTypeSelector = ({ value, onChange }) => {
        const { texts, expressionOptions } = useStudioExpressionContext(),
          options = expressionOptions || Object.values(SimpleSubexpressionValueType.C);
        return react.createElement(
          NativeSelect.m,
          {
            label: texts.valueType,
            onChange: (event) => onChange(event.target.value),
            size: 'small',
            value,
          },
          options.map((valueType) =>
            react.createElement(
              'option',
              { key: valueType, value: valueType },
              texts.valueTypes[valueType],
            ),
          ),
        );
      };
      SubexpressionValueTypeSelector.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'SubexpressionValueTypeSelector',
        props: {
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(value: SimpleSubexpressionValueType) => void',
              signature: {
                arguments: [{ type: { name: 'SimpleSubexpressionValueType' }, name: 'value' }],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          value: {
            required: !0,
            tsType: { name: 'SimpleSubexpressionValueType' },
            description: '',
          },
        },
      };
      var Tag = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Tag/Tag.js',
        ),
        SubexpressionValueReadonly_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/SubExpressionValueSelector/SubExpressionValueReadonly/SubexpressionValueReadonly.module.css',
        ),
        SubexpressionValueReadonly_module_options = {};
      (SubexpressionValueReadonly_module_options.styleTagTransform = styleTagTransform_default()),
        (SubexpressionValueReadonly_module_options.setAttributes =
          setAttributesWithoutAttributes_default()),
        (SubexpressionValueReadonly_module_options.insert = insertBySelector_default().bind(
          null,
          'head',
        )),
        (SubexpressionValueReadonly_module_options.domAPI = styleDomAPI_default()),
        (SubexpressionValueReadonly_module_options.insertStyleElement =
          insertStyleElement_default());
      injectStylesIntoStyleTag_default()(
        SubexpressionValueReadonly_module.A,
        SubexpressionValueReadonly_module_options,
      );
      const SubExpressionValueReadonly_SubexpressionValueReadonly_module =
        SubexpressionValueReadonly_module.A && SubexpressionValueReadonly_module.A.locals
          ? SubexpressionValueReadonly_module.A.locals
          : void 0;
      var StudioCodeFragment = __webpack_require__('./src/components/StudioCodeFragment/index.ts');
      const SubexpressionValueReadonly = ({ value }) => {
          switch (value.type) {
            case SimpleSubexpressionValueType.C.DataModel:
              return react.createElement(DataModelLookupValue, { value });
            case SimpleSubexpressionValueType.C.Component:
              return react.createElement(ComponentLookupValue, { value });
            case SimpleSubexpressionValueType.C.GatewayAction:
              return react.createElement(GatewayAction, { value });
            case SimpleSubexpressionValueType.C.GatewayActionContext:
              return react.createElement(GatewayActionContextValue, { value });
            case SimpleSubexpressionValueType.C.InstanceContext:
              return react.createElement(InstanceContextValue, { value });
            case SimpleSubexpressionValueType.C.String:
              return react.createElement(StringValue, { value });
            case SimpleSubexpressionValueType.C.Number:
              return react.createElement(NumberValue, { value });
            case SimpleSubexpressionValueType.C.Boolean:
              return react.createElement(BooleanValue, { value });
            case SimpleSubexpressionValueType.C.Null:
              return react.createElement(NullValue, null);
          }
        },
        DataModelLookupValue = ({ value }) => {
          const { texts } = useStudioExpressionContext();
          return react.createElement(Binding, {
            name: texts.readonlyDataModelPath,
            binding: react.createElement(StudioCodeFragment.o, { title: value.path }, value.path),
          });
        },
        ComponentLookupValue = ({ value }) => {
          const { texts } = useStudioExpressionContext();
          return react.createElement(Binding, {
            name: texts.readonlyComponentId,
            binding: react.createElement(StudioCodeFragment.o, { title: value.id }, value.id),
          });
        },
        InstanceContextValue = ({ value }) => {
          const { texts } = useStudioExpressionContext(),
            name = texts.instanceContext[value.key];
          return react.createElement(Binding, {
            name: texts.readonlyInstanceContext,
            binding: react.createElement(Tag.v, { size: 'small', color: 'info' }, name),
          });
        },
        GatewayActionContextValue = ({ value }) => {
          const { texts } = useStudioExpressionContext(),
            name = texts.gatewayActionContext[value.key];
          return react.createElement(Binding, {
            name: texts.readonlyGatewayActionContext,
            binding: react.createElement(Tag.v, { size: 'small', color: 'info' }, name),
          });
        },
        GatewayAction = ({ value }) =>
          react.createElement(Paragraph.f, { size: 'small' }, value.value),
        Binding = ({ name, binding }) =>
          react.createElement(
            'div',
            { className: SubExpressionValueReadonly_SubexpressionValueReadonly_module.binding },
            react.createElement(src.LinkIcon, null),
            react.createElement(Paragraph.f, { size: 'small' }, name),
            binding,
          ),
        StringValue = ({ value }) =>
          react.createElement(StudioCodeFragment.o, null, '"', value.value, '"'),
        NumberValue = ({ value }) => react.createElement(StudioCodeFragment.o, null, value.value),
        BooleanValue = ({ value }) => {
          const { texts } = useStudioExpressionContext();
          return react.createElement(
            Tag.v,
            { size: 'small', color: value.value ? 'success' : 'danger' },
            value.value ? texts.true : texts.false,
          );
        },
        NullValue = () => react.createElement(StudioCodeFragment.o, null, 'null');
      SubexpressionValueReadonly.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'SubexpressionValueReadonly',
        props: { value: { required: !0, tsType: { name: 'unknown' }, description: '' } },
      };
      var Fieldset = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/form/Fieldset/Fieldset.js',
        ),
        SubexpressionValueSelector_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/SubExpressionValueSelector/SubexpressionValueSelector.module.css',
        ),
        SubexpressionValueSelector_module_options = {};
      (SubexpressionValueSelector_module_options.styleTagTransform = styleTagTransform_default()),
        (SubexpressionValueSelector_module_options.setAttributes =
          setAttributesWithoutAttributes_default()),
        (SubexpressionValueSelector_module_options.insert = insertBySelector_default().bind(
          null,
          'head',
        )),
        (SubexpressionValueSelector_module_options.domAPI = styleDomAPI_default()),
        (SubexpressionValueSelector_module_options.insertStyleElement =
          insertStyleElement_default());
      injectStylesIntoStyleTag_default()(
        SubexpressionValueSelector_module.A,
        SubexpressionValueSelector_module_options,
      );
      const SubExpressionValueSelector_SubexpressionValueSelector_module =
          SubexpressionValueSelector_module.A && SubexpressionValueSelector_module.A.locals
            ? SubexpressionValueSelector_module.A.locals
            : void 0,
        defaultValueByType = {
          [SimpleSubexpressionValueType.C.Component]: {
            type: SimpleSubexpressionValueType.C.Component,
            id: '',
          },
          [SimpleSubexpressionValueType.C.DataModel]: {
            type: SimpleSubexpressionValueType.C.DataModel,
            path: '',
          },
          [SimpleSubexpressionValueType.C.GatewayAction]: {
            type: SimpleSubexpressionValueType.C.GatewayAction,
            value: 'GatewayAction',
          },
          [SimpleSubexpressionValueType.C.GatewayActionContext]: {
            type: SimpleSubexpressionValueType.C.GatewayActionContext,
            key: GatewayActionContext.e.Confirm,
          },
          [SimpleSubexpressionValueType.C.InstanceContext]: {
            type: SimpleSubexpressionValueType.C.InstanceContext,
            key: InstanceContext.N.AppId,
          },
          [SimpleSubexpressionValueType.C.String]: {
            type: SimpleSubexpressionValueType.C.String,
            value: '',
          },
          [SimpleSubexpressionValueType.C.Number]: {
            type: SimpleSubexpressionValueType.C.Number,
            value: 0,
          },
          [SimpleSubexpressionValueType.C.Boolean]: {
            type: SimpleSubexpressionValueType.C.Boolean,
            value: !1,
          },
          [SimpleSubexpressionValueType.C.Null]: { type: SimpleSubexpressionValueType.C.Null },
        },
        SubexpressionValueSelector = ({ className, isInEditMode, legend, onChange, value }) =>
          react.createElement(
            'div',
            {
              className: `${className} ${SubExpressionValueSelector_SubexpressionValueSelector_module.wrapper}`,
            },
            isInEditMode
              ? react.createElement(EditMode, { value, onChange, legend })
              : react.createElement(SubexpressionValueReadonly, { value }),
          ),
        EditMode = ({ value, onChange, legend }) =>
          react.createElement(
            Fieldset.L,
            { legend, hideLegend: !0 },
            react.createElement(
              'div',
              {
                className:
                  SubExpressionValueSelector_SubexpressionValueSelector_module.fieldsetContent,
              },
              react.createElement(SubexpressionValueTypeSelector, {
                onChange: (type) => onChange(defaultValueByType[type]),
                value: value.type,
              }),
              react.createElement(SubexpressionValueContentInput, { onChange, value }),
            ),
          );
      SubexpressionValueSelector.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'SubexpressionValueSelector',
        props: {
          className: { required: !1, tsType: { name: 'string' }, description: '' },
          isInEditMode: { required: !1, tsType: { name: 'boolean' }, description: '' },
          legend: { required: !0, tsType: { name: 'string' }, description: '' },
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(value: SimpleSubexpressionValue) => void',
              signature: {
                arguments: [{ type: { name: 'unknown' }, name: 'value' }],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          value: { required: !0, tsType: { name: 'unknown' }, description: '' },
        },
      };
      var Subexpression_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/Subexpression.module.css',
        ),
        Subexpression_module_options = {};
      (Subexpression_module_options.styleTagTransform = styleTagTransform_default()),
        (Subexpression_module_options.setAttributes = setAttributesWithoutAttributes_default()),
        (Subexpression_module_options.insert = insertBySelector_default().bind(null, 'head')),
        (Subexpression_module_options.domAPI = styleDomAPI_default()),
        (Subexpression_module_options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(Subexpression_module.A, Subexpression_module_options);
      const SubExpression_Subexpression_module =
        Subexpression_module.A && Subexpression_module.A.locals
          ? Subexpression_module.A.locals
          : void 0;
      var StudioDeleteButton = __webpack_require__('./src/components/StudioDeleteButton/index.ts'),
        SubexpressionToolbar_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/SubExpressionToolbar/SubexpressionToolbar.module.css',
        ),
        SubexpressionToolbar_module_options = {};
      (SubexpressionToolbar_module_options.styleTagTransform = styleTagTransform_default()),
        (SubexpressionToolbar_module_options.setAttributes =
          setAttributesWithoutAttributes_default()),
        (SubexpressionToolbar_module_options.insert = insertBySelector_default().bind(
          null,
          'head',
        )),
        (SubexpressionToolbar_module_options.domAPI = styleDomAPI_default()),
        (SubexpressionToolbar_module_options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(
        SubexpressionToolbar_module.A,
        SubexpressionToolbar_module_options,
      );
      const SubExpressionToolbar_SubexpressionToolbar_module =
          SubexpressionToolbar_module.A && SubexpressionToolbar_module.A.locals
            ? SubexpressionToolbar_module.A.locals
            : void 0,
        SubexpressionToolbar = ({ isInEditMode, onSave, onDelete, onEnableEditMode }) => {
          const { texts } = useStudioExpressionContext();
          return react.createElement(
            'div',
            {
              className: SubExpressionToolbar_SubexpressionToolbar_module.subexpressionToolbar,
              role: 'toolbar',
            },
            isInEditMode
              ? react.createElement(
                  StudioButton.r,
                  {
                    color: 'success',
                    icon: react.createElement(src.FloppydiskIcon, null),
                    onClick: onSave,
                    variant: 'primary',
                  },
                  texts.saveAndClose,
                )
              : react.createElement(
                  StudioButton.r,
                  {
                    icon: react.createElement(src.PencilIcon, null),
                    onClick: onEnableEditMode,
                    variant: 'secondary',
                  },
                  texts.edit,
                ),
            react.createElement(
              StudioDeleteButton.W,
              { onDelete, confirmMessage: texts.confirmDeleteSubexpression, size: 'small' },
              texts.delete,
            ),
          );
        };
      SubexpressionToolbar.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'SubexpressionToolbar',
        props: {
          isInEditMode: { required: !0, tsType: { name: 'boolean' }, description: '' },
          onSave: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '() => void',
              signature: { arguments: [], return: { name: 'void' } },
            },
            description: '',
          },
          onDelete: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '() => void',
              signature: { arguments: [], return: { name: 'void' } },
            },
            description: '',
          },
          onEnableEditMode: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '() => void',
              signature: { arguments: [], return: { name: 'void' } },
            },
            description: '',
          },
        },
      };
      var classnames = __webpack_require__('../../../node_modules/classnames/index.js'),
        classnames_default = __webpack_require__.n(classnames);
      const findSubexpressionErrors = (subexpression, dataLookupOptions) => {
          const errors = [];
          return (
            hasNumberOperator(subexpression) &&
              hasBooleanValue(subexpression) &&
              errors.push(ExpressionErrorKey.E.NumericRelationOperatorWithWrongType),
            isOperandValid(subexpression.firstOperand, dataLookupOptions) ||
              errors.push(ExpressionErrorKey.E.InvalidFirstOperand),
            isOperandValid(subexpression.secondOperand, dataLookupOptions) ||
              errors.push(ExpressionErrorKey.E.InvalidSecondOperand),
            errors
          );
        },
        hasNumberOperator = (subexpression) =>
          Object.values(NumberRelationOperator.a).includes(subexpression.relationalOperator),
        hasBooleanValue = ({ firstOperand, secondOperand }) =>
          [firstOperand, secondOperand].some(
            (value) => value.type === SimpleSubexpressionValueType.C.Boolean,
          ),
        isOperandValid = (value, dataLookupOptions) => {
          switch (value.type) {
            case SimpleSubexpressionValueType.C.DataModel:
              return isDataModelValueValid(value);
            case SimpleSubexpressionValueType.C.Component:
              return isComponentValueValid(value, dataLookupOptions);
            default:
              return !0;
          }
        },
        isDataModelValueValid = (value) => !!value.path,
        isComponentValueValid = (value, dataLookupOptions) =>
          !!value.id && dataLookupOptions[DataLookupFuncName.A.Component]?.includes(value.id);
      var ErrorMessage = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Typography/ErrorMessage/ErrorMessage.js',
        ),
        List = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/List/index.js',
        ),
        SubexpressionErrors_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/SubExpressionErrors/SubexpressionErrors.module.css',
        ),
        SubexpressionErrors_module_options = {};
      (SubexpressionErrors_module_options.styleTagTransform = styleTagTransform_default()),
        (SubexpressionErrors_module_options.setAttributes =
          setAttributesWithoutAttributes_default()),
        (SubexpressionErrors_module_options.insert = insertBySelector_default().bind(null, 'head')),
        (SubexpressionErrors_module_options.domAPI = styleDomAPI_default()),
        (SubexpressionErrors_module_options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(
        SubexpressionErrors_module.A,
        SubexpressionErrors_module_options,
      );
      const SubExpressionErrors_SubexpressionErrors_module =
          SubexpressionErrors_module.A && SubexpressionErrors_module.A.locals
            ? SubexpressionErrors_module.A.locals
            : void 0,
        SubexpressionErrors = ({ errorKeys }) => {
          const { texts } = useStudioExpressionContext();
          return react.createElement(
            'div',
            { className: SubExpressionErrors_SubexpressionErrors_module.subexpressionErrors },
            react.createElement(ErrorMessage.K, { size: 'small' }, texts.errorListHeader),
            react.createElement(
              List.B8.Root,
              { size: 'small' },
              react.createElement(
                List.B8.Unordered,
                null,
                errorKeys.map((errorKey) =>
                  react.createElement(
                    List.B8.Item,
                    { key: errorKey },
                    react.createElement(
                      ErrorMessage.K,
                      { size: 'small' },
                      texts.errorMessages[errorKey],
                    ),
                  ),
                ),
              ),
            ),
            react.createElement(ErrorMessage.K, { size: 'small' }, texts.errorListFooter),
          );
        };
      SubexpressionErrors.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'SubexpressionErrors',
        props: {
          errorKeys: {
            required: !0,
            tsType: {
              name: 'Array',
              elements: [{ name: 'ExpressionErrorKey' }],
              raw: 'ExpressionErrorKey[]',
            },
            description: '',
          },
        },
      };
      const Subexpression = ({ expression, legend, onChange, onDelete }) => {
        const { texts, dataLookupOptions } = useStudioExpressionContext(),
          [isInEditMode, setIsInEditMode] = (0, react.useState)(!1),
          [expressionState, setExpressionState] = (0, react.useState)(expression),
          [errors, setErrors] = (0, react.useState)(
            findSubexpressionErrors(expression, dataLookupOptions),
          );
        (0, react.useEffect)(() => {
          setExpressionState(expression);
        }, [expression]);
        const handleChange = (subexpression) => {
            setExpressionState(subexpression);
          },
          className = classnames_default()(
            SubExpression_Subexpression_module.subexpression,
            isInEditMode && SubExpression_Subexpression_module.editMode,
            errors.length && SubExpression_Subexpression_module.hasError,
          );
        return react.createElement(
          Fieldset.L,
          { className, hideLegend: !0, legend },
          react.createElement(
            'div',
            { className: SubExpression_Subexpression_module.fieldsetContent },
            react.createElement(SubexpressionValueSelector, {
              className: SubExpression_Subexpression_module.editableItem,
              isInEditMode,
              legend: texts.firstOperand,
              onChange: (value) =>
                handleChange(
                  ((expression, value) => ({ ...expression, firstOperand: value }))(
                    expressionState,
                    value,
                  ),
                ),
              value: expressionState.firstOperand,
            }),
            react.createElement(RelationalOperatorSelector, {
              className: SubExpression_Subexpression_module.editableItem,
              isInEditMode,
              onChange: (operator) =>
                handleChange(
                  ((expression, operator) => ({ ...expression, relationalOperator: operator }))(
                    expressionState,
                    operator,
                  ),
                ),
              operator: expressionState.relationalOperator,
            }),
            react.createElement(SubexpressionValueSelector, {
              className: SubExpression_Subexpression_module.editableItem,
              isInEditMode,
              legend: texts.secondOperand,
              onChange: (value) =>
                handleChange(
                  ((expression, value) => ({ ...expression, secondOperand: value }))(
                    expressionState,
                    value,
                  ),
                ),
              value: expressionState.secondOperand,
            }),
            react.createElement(SubexpressionToolbar, {
              isInEditMode,
              onDelete,
              onSave: () => {
                const errorList = findSubexpressionErrors(expressionState, dataLookupOptions);
                setErrors(errorList),
                  errorList.length || (onChange(expressionState), setIsInEditMode(!1));
              },
              onEnableEditMode: () => {
                setIsInEditMode(!0);
              },
            }),
            !!errors.length &&
              isInEditMode &&
              react.createElement(SubexpressionErrors, { errorKeys: errors }),
          ),
        );
      };
      Subexpression.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'Subexpression',
        props: {
          expression: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'object',
              raw: '{\n  firstOperand: SimpleSubexpressionValue;\n  relationalOperator: O;\n  secondOperand: SimpleSubexpressionValue;\n}',
              signature: {
                properties: [
                  { key: 'firstOperand', value: { name: 'unknown', required: !0 } },
                  { key: 'relationalOperator', value: { name: 'O', required: !0 } },
                  { key: 'secondOperand', value: { name: 'unknown', required: !0 } },
                ],
              },
            },
            description: '',
          },
          legend: { required: !0, tsType: { name: 'string' }, description: '' },
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(subexpression: SimpleSubexpression) => void',
              signature: {
                arguments: [
                  {
                    type: {
                      name: 'signature',
                      type: 'object',
                      raw: '{\n  firstOperand: SimpleSubexpressionValue;\n  relationalOperator: O;\n  secondOperand: SimpleSubexpressionValue;\n}',
                      signature: {
                        properties: [
                          { key: 'firstOperand', value: { name: 'unknown', required: !0 } },
                          { key: 'relationalOperator', value: { name: 'O', required: !0 } },
                          { key: 'secondOperand', value: { name: 'unknown', required: !0 } },
                        ],
                      },
                    },
                    name: 'subexpression',
                  },
                ],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          onDelete: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '() => void',
              signature: { arguments: [], return: { name: 'void' } },
            },
            description: '',
          },
        },
      };
      var ToggleGroup = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/ToggleGroup/index.js',
        ),
        LogicalOperatorToggle_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/LogicalOperatorToggle/LogicalOperatorToggle.module.css',
        ),
        LogicalOperatorToggle_module_options = {};
      (LogicalOperatorToggle_module_options.styleTagTransform = styleTagTransform_default()),
        (LogicalOperatorToggle_module_options.setAttributes =
          setAttributesWithoutAttributes_default()),
        (LogicalOperatorToggle_module_options.insert = insertBySelector_default().bind(
          null,
          'head',
        )),
        (LogicalOperatorToggle_module_options.domAPI = styleDomAPI_default()),
        (LogicalOperatorToggle_module_options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(
        LogicalOperatorToggle_module.A,
        LogicalOperatorToggle_module_options,
      );
      const LogicalOperatorToggle_LogicalOperatorToggle_module =
          LogicalOperatorToggle_module.A && LogicalOperatorToggle_module.A.locals
            ? LogicalOperatorToggle_module.A.locals
            : void 0,
        LogicalOperatorToggle = ({ operator, onChange }) => {
          const { texts } = useStudioExpressionContext();
          return react.createElement(
            'div',
            { className: LogicalOperatorToggle_LogicalOperatorToggle_module.logicalOperatorToggle },
            react.createElement(Paragraph.f, { size: 'small' }, texts.logicalOperator),
            react.createElement(
              ToggleGroup.O,
              { value: operator, onChange, size: 'small' },
              Object.values(LogicalTupleOperator.y).map((o) =>
                react.createElement(
                  ToggleGroup.O.Item,
                  { key: o, value: o },
                  texts.logicalTupleOperators[o],
                ),
              ),
            ),
          );
        };
      LogicalOperatorToggle.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'LogicalOperatorToggle',
        props: {
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(operator: LogicalTupleOperator) => void',
              signature: {
                arguments: [{ type: { name: 'LogicalTupleOperator' }, name: 'operator' }],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          operator: { required: !0, tsType: { name: 'LogicalTupleOperator' }, description: '' },
        },
      };
      var OperatorBetweenSubexpressions_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/OperatorBetweenSubexpressions/OperatorBetweenSubexpressions.module.css',
        ),
        OperatorBetweenSubexpressions_module_options = {};
      (OperatorBetweenSubexpressions_module_options.styleTagTransform =
        styleTagTransform_default()),
        (OperatorBetweenSubexpressions_module_options.setAttributes =
          setAttributesWithoutAttributes_default()),
        (OperatorBetweenSubexpressions_module_options.insert = insertBySelector_default().bind(
          null,
          'head',
        )),
        (OperatorBetweenSubexpressions_module_options.domAPI = styleDomAPI_default()),
        (OperatorBetweenSubexpressions_module_options.insertStyleElement =
          insertStyleElement_default());
      injectStylesIntoStyleTag_default()(
        OperatorBetweenSubexpressions_module.A,
        OperatorBetweenSubexpressions_module_options,
      );
      const OperatorBetweenSubexpressions_OperatorBetweenSubexpressions_module =
          OperatorBetweenSubexpressions_module.A && OperatorBetweenSubexpressions_module.A.locals
            ? OperatorBetweenSubexpressions_module.A.locals
            : void 0,
        OperatorBetweenSubexpressions = ({ logicalExpression }) => {
          const { texts } = useStudioExpressionContext(),
            text =
              logicalExpression.subexpressions.length > 1
                ? logicalExpression.logicalOperator === LogicalTupleOperator.y.And
                  ? texts.and
                  : texts.or
                : texts.andOr;
          return react.createElement(
            Paragraph.f,
            {
              size: 'small',
              className:
                OperatorBetweenSubexpressions_OperatorBetweenSubexpressions_module.operator,
            },
            text,
          );
        };
      OperatorBetweenSubexpressions.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'OperatorBetweenSubexpressions',
        props: {
          logicalExpression: { required: !0, tsType: { name: 'unknown' }, description: '' },
        },
      };
      var v4 = __webpack_require__('../../../node_modules/uuid/dist/esm-browser/v4.js');
      const generateUniqueKeys = (numberOfKeys) => {
          const newlyGeneratedKeys = [];
          for (let i = 0; i < numberOfKeys; i++) newlyGeneratedKeys.push(generateUniqueKey());
          return newlyGeneratedKeys;
        },
        generateUniqueKey = () => (0, v4.A)(),
        LogicalExpressionEditor = ({ expression, showAddSubexpression = !0, onChange }) => {
          const { texts } = useStudioExpressionContext(),
            { subexpressions, logicalOperator } = expression,
            { removeUniqueKey, addUniqueKey, getUniqueKey } = (({ numberOfKeys }) => {
              const internalUniqueKeys = (0, react.useRef)([]);
              return (
                internalUniqueKeys.current.length !== numberOfKeys &&
                  (internalUniqueKeys.current = generateUniqueKeys(numberOfKeys)),
                {
                  addUniqueKey: () => {
                    internalUniqueKeys.current = [
                      ...internalUniqueKeys.current,
                      generateUniqueKey(),
                    ];
                  },
                  getUniqueKey: (index) => internalUniqueKeys.current[index],
                  removeUniqueKey: (index) => {
                    internalUniqueKeys.current = ArrayUtils.removeItemByIndex(
                      internalUniqueKeys.current,
                      index,
                    );
                  },
                }
              );
            })({ numberOfKeys: subexpressions.length });
          return react.createElement(
            Fieldset.L,
            { size: 'small', legend: texts.logicalOperation, hideLegend: !0 },
            react.createElement(
              'div',
              { className: LogicalExpressionEditor_LogicalExpressionEditor_module.fieldsetContent },
              subexpressions.length > 1 &&
                react.createElement(LogicalOperatorToggle, {
                  onChange: (operator) =>
                    onChange(
                      ((expression, newOperator) => ({
                        ...expression,
                        logicalOperator: newOperator,
                      }))(expression, operator),
                    ),
                  operator: logicalOperator,
                }),
              react.createElement(SubexpressionList, {
                componentBetween: showAddSubexpression
                  ? react.createElement(OperatorBetweenSubexpressions, {
                      logicalExpression: expression,
                    })
                  : void 0,
                expressions: subexpressions,
                getUniqueKey,
                removeUniqueKey,
                onChange: (newSubexpressions) =>
                  onChange(changeSubexpressions(expression, newSubexpressions)),
              }),
              showAddSubexpression &&
                react.createElement(
                  StudioButton.r,
                  {
                    icon: react.createElement(src.PlusIcon, null),
                    onClick: () => {
                      onChange(
                        ((expression) => addSubexpression(expression, DEFAULT_SUBEXPRESSION))(
                          expression,
                        ),
                      ),
                        addUniqueKey();
                    },
                    variant: 'secondary',
                  },
                  texts.addSubexpression,
                ),
            ),
          );
        },
        SubexpressionList = ({
          expressions,
          onChange,
          componentBetween,
          getUniqueKey,
          removeUniqueKey,
        }) => {
          const { texts } = useStudioExpressionContext(),
            handleSubexpressionChange = (index, expression) =>
              onChange(
                ((subexpressions, index, newSubexpression) =>
                  ArrayUtils.replaceByIndex(subexpressions, index, newSubexpression))(
                  expressions,
                  index,
                  expression,
                ),
              ),
            handleDeleteExpression = (index) => {
              onChange(
                ((subexpressions, index) => ArrayUtils.removeItemByIndex(subexpressions, index))(
                  expressions,
                  index,
                ),
              ),
                removeUniqueKey(index);
            };
          return react.createElement(
            react.Fragment,
            null,
            expressions.map((expression, index) =>
              react.createElement(
                react.Fragment,
                { key: getUniqueKey(index) },
                react.createElement(Subexpression, {
                  expression,
                  legend: texts.subexpression(index),
                  onChange: (exp) => handleSubexpressionChange(index, exp),
                  onDelete: () => handleDeleteExpression(index),
                }),
                componentBetween,
              ),
            ),
          );
        };
      LogicalExpressionEditor.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'LogicalExpressionEditor',
        props: {
          expression: { required: !0, tsType: { name: 'unknown' }, description: '' },
          showAddSubexpression: {
            required: !1,
            tsType: { name: 'boolean' },
            description: '',
            defaultValue: { value: 'true', computed: !1 },
          },
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(expression: SimplifiedExpression) => void',
              signature: {
                arguments: [
                  {
                    type: {
                      name: 'union',
                      raw: '| boolean\n| SimpleLogicalExpression<O>',
                      elements: [{ name: 'boolean' }, { name: 'unknown' }],
                    },
                    name: 'expression',
                  },
                ],
                return: { name: 'void' },
              },
            },
            description: '',
          },
        },
      };
      var BooleanEditor_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/BooleanEditor/BooleanEditor.module.css',
        ),
        BooleanEditor_module_options = {};
      (BooleanEditor_module_options.styleTagTransform = styleTagTransform_default()),
        (BooleanEditor_module_options.setAttributes = setAttributesWithoutAttributes_default()),
        (BooleanEditor_module_options.insert = insertBySelector_default().bind(null, 'head')),
        (BooleanEditor_module_options.domAPI = styleDomAPI_default()),
        (BooleanEditor_module_options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(BooleanEditor_module.A, BooleanEditor_module_options);
      const BooleanEditor_BooleanEditor_module =
          BooleanEditor_module.A && BooleanEditor_module.A.locals
            ? BooleanEditor_module.A.locals
            : void 0,
        BooleanEditor = ({ expression, onChange }) => {
          const { texts } = useStudioExpressionContext();
          return react.createElement(
            'div',
            { className: BooleanEditor_BooleanEditor_module.booleanEditor },
            react.createElement(StudioBooleanToggleGroup.y, {
              className: BooleanEditor_BooleanEditor_module.toggle,
              falseLabel: texts.false,
              onChange,
              size: 'small',
              trueLabel: texts.true,
              value: expression,
            }),
            react.createElement(
              StudioButton.r,
              { variant: 'secondary', onClick: () => onChange(DEFAULT_LOGICAL_EXPRESSION) },
              texts.transformToLogical,
            ),
          );
        };
      BooleanEditor.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'BooleanEditor',
        props: {
          expression: { required: !0, tsType: { name: 'boolean' }, description: '' },
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(expression: SimplifiedExpression) => void',
              signature: {
                arguments: [
                  {
                    type: {
                      name: 'union',
                      raw: '| boolean\n| SimpleLogicalExpression<O>',
                      elements: [{ name: 'boolean' }, { name: 'unknown' }],
                    },
                    name: 'expression',
                  },
                ],
                return: { name: 'void' },
              },
            },
            description: '',
          },
        },
      };
      const InternalFormatEditor = ({ simplifiedExpression, showAddSubexpression, onChange }) =>
        'boolean' == typeof simplifiedExpression
          ? react.createElement(BooleanEditor, { expression: simplifiedExpression, onChange })
          : react.createElement(LogicalExpressionEditor, {
              expression: simplifiedExpression,
              onChange,
              showAddSubexpression,
            });
      InternalFormatEditor.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'InternalFormatEditor',
        props: {
          simplifiedExpression: {
            required: !0,
            tsType: {
              name: 'union',
              raw: '| boolean\n| SimpleLogicalExpression<O>',
              elements: [{ name: 'boolean' }, { name: 'unknown' }],
            },
            description: '',
          },
          showAddSubexpression: { required: !1, tsType: { name: 'boolean' }, description: '' },
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(expression: SimplifiedExpression) => void',
              signature: {
                arguments: [
                  {
                    type: {
                      name: 'union',
                      raw: '| boolean\n| SimpleLogicalExpression<O>',
                      elements: [{ name: 'boolean' }, { name: 'unknown' }],
                    },
                    name: 'expression',
                  },
                ],
                return: { name: 'void' },
              },
            },
            description: '',
          },
        },
      };
      const SimplifiedEditor = ({ expression, showAddSubexpression, onChange }) => {
        const { texts } = useStudioExpressionContext();
        if (!isExpressionSimple(expression))
          return react.createElement(Alert.F, { severity: 'info' }, texts.cannotSimplify);
        const simplifiedExpression = ((expression) => {
          if (!isExpressionSimple(expression)) throw new Error('Expression is not simple.');
          if ('boolean' == typeof expression) return expression;
          if (null === expression) return nullExpressionInSimpleFormat;
          if (isRelationFunc(expression)) return complexRelationFuncToSimpleExpression(expression);
          if (isSimpleLogicalTupleFunc(expression))
            return logicalTupleFuncToSimpleFormat(expression);
          throw new Error(
            'Expression is not convertable. This should have been picked up by the validator.',
          );
        })(expression);
        return react.createElement(InternalFormatEditor, {
          simplifiedExpression,
          onChange: (updatedExpression) => {
            const updatedComplexExpression =
              'boolean' == typeof (simpleExpression = updatedExpression)
                ? simpleExpression
                : simpleLogicalExpressionToComplex(simpleExpression);
            var simpleExpression;
            onChange(updatedComplexExpression);
          },
          showAddSubexpression,
        });
      };
      SimplifiedEditor.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'SimplifiedEditor',
        props: {
          expression: {
            required: !0,
            tsType: {
              name: 'union',
              raw: '| null\n| StrictStringExpression\n| StrictBooleanExpression\n| StrictNumberExpression\n| FuncIf',
              elements: [
                { name: 'null' },
                {
                  name: 'union',
                  raw: '| string\n| [string]\n| FuncComponent\n| FuncDataModel\n| FuncGatewayAction\n| FuncGatewayActionContext\n| FuncDisplayValue\n| FuncInstanceContext\n| FuncFrontendSettings\n| FuncConcat\n| FuncFormatDate\n| FuncRound\n| FuncText\n| FuncLanguage\n| FuncLowerCase\n| FuncUpperCase\n| FuncArgv',
                  elements: [
                    { name: 'string' },
                    { name: 'tuple', raw: '[string]', elements: [{ name: 'string' }] },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    {
                      name: 'tuple',
                      raw: "['displayValue', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'displayValue'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    { name: 'unknown' },
                    {
                      name: 'tuple',
                      raw: "['frontendSettings', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'frontendSettings'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['concat', ...StringExpression[]]",
                      elements: [{ name: 'literal', value: "'concat'" }, { name: 'unknown' }],
                    },
                    {
                      name: 'tuple',
                      raw: "['formatDate', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'formatDate'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['formatNumber', NumberExpression, NumberExpression]",
                      elements: [
                        { name: 'literal', value: "'formatNumber'" },
                        {
                          name: 'union',
                          raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                          elements: [
                            { name: 'null' },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'FuncIf' },
                            { name: 'StrictStringExpression' },
                          ],
                        },
                        {
                          name: 'union',
                          raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                          elements: [
                            { name: 'null' },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'FuncIf' },
                            { name: 'StrictStringExpression' },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['text', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'text'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['language']",
                      elements: [{ name: 'literal', value: "'language'" }],
                    },
                    {
                      name: 'tuple',
                      raw: "['lowerCase', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'lowerCase'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['upperCase', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'upperCase'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['argv', NumberExpression]",
                      elements: [
                        { name: 'literal', value: "'argv'" },
                        {
                          name: 'union',
                          raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                          elements: [
                            { name: 'null' },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'FuncIf' },
                            { name: 'StrictStringExpression' },
                          ],
                        },
                      ],
                    },
                  ],
                },
                {
                  name: 'union',
                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                  elements: [
                    { name: 'boolean' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    {
                      name: 'tuple',
                      raw: "['not', BooleanExpression]",
                      elements: [
                        { name: 'literal', value: "'not'" },
                        { name: 'BooleanExpression' },
                      ],
                    },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    {
                      name: 'tuple',
                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                      elements: [
                        { name: 'literal', value: "'authContext'" },
                        {
                          name: 'union',
                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                          elements: [
                            { name: 'literal', value: "'read'" },
                            { name: 'literal', value: "'write'" },
                            { name: 'literal', value: "'instantiate'" },
                            { name: 'literal', value: "'confirm'" },
                            { name: 'literal', value: "'sign'" },
                            { name: 'literal', value: "'reject'" },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['contains', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'contains'" },
                        { name: 'StringExpression' },
                        { name: 'StringExpression' },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['notContains', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'notContains'" },
                        { name: 'StringExpression' },
                        { name: 'StringExpression' },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['startsWith', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'startsWith'" },
                        { name: 'StringExpression' },
                        { name: 'StringExpression' },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['endsWith', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'endsWith'" },
                        { name: 'StringExpression' },
                        { name: 'StringExpression' },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['commaContains', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'commaContains'" },
                        { name: 'StringExpression' },
                        { name: 'StringExpression' },
                      ],
                    },
                  ],
                },
                {
                  name: 'union',
                  raw: 'number | FuncStringLength',
                  elements: [
                    { name: 'number' },
                    {
                      name: 'tuple',
                      raw: "['stringLength', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'stringLength'" },
                        { name: 'StringExpression' },
                      ],
                    },
                  ],
                },
                {
                  name: 'union',
                  raw: 'FuncIfWithElse | FuncIfWithoutElse',
                  elements: [
                    {
                      name: 'tuple',
                      raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                      elements: [
                        { name: 'literal', value: "'if'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                          elements: [
                            { name: 'null' },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'FuncIf' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        { name: 'Expression' },
                        { name: 'literal', value: "'else'" },
                        { name: 'Expression' },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['if', BooleanExpression, Expression]",
                      elements: [
                        { name: 'literal', value: "'if'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                          elements: [
                            { name: 'null' },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'FuncIf' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        { name: 'Expression' },
                      ],
                    },
                  ],
                },
              ],
            },
            description: '',
          },
          showAddSubexpression: { required: !1, tsType: { name: 'boolean' }, description: '' },
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(expression: Expression) => void',
              signature: {
                arguments: [
                  {
                    type: {
                      name: 'union',
                      raw: '| null\n| StrictStringExpression\n| StrictBooleanExpression\n| StrictNumberExpression\n| FuncIf',
                      elements: [
                        { name: 'null' },
                        {
                          name: 'union',
                          raw: '| string\n| [string]\n| FuncComponent\n| FuncDataModel\n| FuncGatewayAction\n| FuncGatewayActionContext\n| FuncDisplayValue\n| FuncInstanceContext\n| FuncFrontendSettings\n| FuncConcat\n| FuncFormatDate\n| FuncRound\n| FuncText\n| FuncLanguage\n| FuncLowerCase\n| FuncUpperCase\n| FuncArgv',
                          elements: [
                            { name: 'string' },
                            { name: 'tuple', raw: '[string]', elements: [{ name: 'string' }] },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            {
                              name: 'tuple',
                              raw: "['displayValue', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'displayValue'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            { name: 'unknown' },
                            {
                              name: 'tuple',
                              raw: "['frontendSettings', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'frontendSettings'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['concat', ...StringExpression[]]",
                              elements: [
                                { name: 'literal', value: "'concat'" },
                                { name: 'unknown' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['formatDate', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'formatDate'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['formatNumber', NumberExpression, NumberExpression]",
                              elements: [
                                { name: 'literal', value: "'formatNumber'" },
                                {
                                  name: 'union',
                                  raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                                  elements: [
                                    { name: 'null' },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'FuncIf' },
                                    { name: 'StrictStringExpression' },
                                  ],
                                },
                                {
                                  name: 'union',
                                  raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                                  elements: [
                                    { name: 'null' },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'FuncIf' },
                                    { name: 'StrictStringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['text', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'text'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['language']",
                              elements: [{ name: 'literal', value: "'language'" }],
                            },
                            {
                              name: 'tuple',
                              raw: "['lowerCase', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'lowerCase'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['upperCase', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'upperCase'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['argv', NumberExpression]",
                              elements: [
                                { name: 'literal', value: "'argv'" },
                                {
                                  name: 'union',
                                  raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                                  elements: [
                                    { name: 'null' },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'FuncIf' },
                                    { name: 'StrictStringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          name: 'union',
                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                          elements: [
                            { name: 'boolean' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            {
                              name: 'tuple',
                              raw: "['not', BooleanExpression]",
                              elements: [
                                { name: 'literal', value: "'not'" },
                                { name: 'BooleanExpression' },
                              ],
                            },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            {
                              name: 'tuple',
                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                              elements: [
                                { name: 'literal', value: "'authContext'" },
                                {
                                  name: 'union',
                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                  elements: [
                                    { name: 'literal', value: "'read'" },
                                    { name: 'literal', value: "'write'" },
                                    { name: 'literal', value: "'instantiate'" },
                                    { name: 'literal', value: "'confirm'" },
                                    { name: 'literal', value: "'sign'" },
                                    { name: 'literal', value: "'reject'" },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['contains', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'contains'" },
                                { name: 'StringExpression' },
                                { name: 'StringExpression' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['notContains', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'notContains'" },
                                { name: 'StringExpression' },
                                { name: 'StringExpression' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['startsWith', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'startsWith'" },
                                { name: 'StringExpression' },
                                { name: 'StringExpression' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['endsWith', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'endsWith'" },
                                { name: 'StringExpression' },
                                { name: 'StringExpression' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['commaContains', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'commaContains'" },
                                { name: 'StringExpression' },
                                { name: 'StringExpression' },
                              ],
                            },
                          ],
                        },
                        {
                          name: 'union',
                          raw: 'number | FuncStringLength',
                          elements: [
                            { name: 'number' },
                            {
                              name: 'tuple',
                              raw: "['stringLength', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'stringLength'" },
                                { name: 'StringExpression' },
                              ],
                            },
                          ],
                        },
                        {
                          name: 'union',
                          raw: 'FuncIfWithElse | FuncIfWithoutElse',
                          elements: [
                            {
                              name: 'tuple',
                              raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                              elements: [
                                { name: 'literal', value: "'if'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                  elements: [
                                    { name: 'null' },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'FuncIf' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                                { name: 'Expression' },
                                { name: 'literal', value: "'else'" },
                                { name: 'Expression' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['if', BooleanExpression, Expression]",
                              elements: [
                                { name: 'literal', value: "'if'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                  elements: [
                                    { name: 'null' },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'FuncIf' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                                { name: 'Expression' },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    name: 'expression',
                  },
                ],
                return: { name: 'void' },
              },
            },
            description: '',
          },
        },
      };
      const isStringValidAsExpression = (str) => {
        try {
          const expression = JSON.parse(str);
          return isExpressionValid(expression);
        } catch {
          return !1;
        }
      };
      var StudioTextarea = __webpack_require__('./src/components/StudioTextarea/index.ts'),
        ManualEditor_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/ManualEditor/ManualEditor.module.css',
        ),
        ManualEditor_module_options = {};
      (ManualEditor_module_options.styleTagTransform = styleTagTransform_default()),
        (ManualEditor_module_options.setAttributes = setAttributesWithoutAttributes_default()),
        (ManualEditor_module_options.insert = insertBySelector_default().bind(null, 'head')),
        (ManualEditor_module_options.domAPI = styleDomAPI_default()),
        (ManualEditor_module_options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(ManualEditor_module.A, ManualEditor_module_options);
      const ManualEditor_ManualEditor_module =
          ManualEditor_module.A && ManualEditor_module.A.locals
            ? ManualEditor_module.A.locals
            : void 0,
        ManualEditor = ({ expression: givenExpression, onChange, isManualExpressionValidRef }) => {
          const { texts } = useStudioExpressionContext(),
            initialExpressionString =
              ((expression = givenExpression), JSON.stringify(expression, null, 2));
          var expression;
          const isInitiallyValid = isStringValidAsExpression(initialExpressionString),
            [expressionString, setExpressionString] = (0, react.useState)(initialExpressionString),
            [isValid, setIsValid] = (0, react.useState)(isInitiallyValid),
            errorMessage = isValid ? null : texts.cannotSaveSinceInvalid;
          return react.createElement(StudioTextarea.L, {
            className: ManualEditor_ManualEditor_module.manualEditor,
            errorAfterBlur: errorMessage,
            hideLabel: !0,
            label: texts.expression,
            onChange: (event) => {
              const { value } = event.target;
              if ((setExpressionString(value), isStringValidAsExpression(value))) {
                const expression = ((str = value), JSON.parse(str));
                onChange(expression), setIsValid(!0), (isManualExpressionValidRef.current = !0);
              } else setIsValid(!1), (isManualExpressionValidRef.current = !1);
              var str;
            },
            rows: 12,
            value: expressionString,
          });
        };
      ManualEditor.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'ManualEditor',
        props: {
          expression: {
            required: !0,
            tsType: {
              name: 'union',
              raw: '| null\n| StrictStringExpression\n| StrictBooleanExpression\n| StrictNumberExpression\n| FuncIf',
              elements: [
                { name: 'null' },
                {
                  name: 'union',
                  raw: '| string\n| [string]\n| FuncComponent\n| FuncDataModel\n| FuncGatewayAction\n| FuncGatewayActionContext\n| FuncDisplayValue\n| FuncInstanceContext\n| FuncFrontendSettings\n| FuncConcat\n| FuncFormatDate\n| FuncRound\n| FuncText\n| FuncLanguage\n| FuncLowerCase\n| FuncUpperCase\n| FuncArgv',
                  elements: [
                    { name: 'string' },
                    { name: 'tuple', raw: '[string]', elements: [{ name: 'string' }] },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    {
                      name: 'tuple',
                      raw: "['displayValue', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'displayValue'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    { name: 'unknown' },
                    {
                      name: 'tuple',
                      raw: "['frontendSettings', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'frontendSettings'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['concat', ...StringExpression[]]",
                      elements: [{ name: 'literal', value: "'concat'" }, { name: 'unknown' }],
                    },
                    {
                      name: 'tuple',
                      raw: "['formatDate', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'formatDate'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['formatNumber', NumberExpression, NumberExpression]",
                      elements: [
                        { name: 'literal', value: "'formatNumber'" },
                        {
                          name: 'union',
                          raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                          elements: [
                            { name: 'null' },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'FuncIf' },
                            { name: 'StrictStringExpression' },
                          ],
                        },
                        {
                          name: 'union',
                          raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                          elements: [
                            { name: 'null' },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'FuncIf' },
                            { name: 'StrictStringExpression' },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['text', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'text'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['language']",
                      elements: [{ name: 'literal', value: "'language'" }],
                    },
                    {
                      name: 'tuple',
                      raw: "['lowerCase', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'lowerCase'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['upperCase', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'upperCase'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    {
                                      name: 'union',
                                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                      elements: [
                                        { name: 'null' },
                                        {
                                          name: 'union',
                                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                          elements: [
                                            { name: 'boolean' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "['not', BooleanExpression]",
                                              elements: [
                                                { name: 'literal', value: "'not'" },
                                                { name: 'BooleanExpression' },
                                              ],
                                            },
                                            { name: 'unknown' },
                                            { name: 'unknown' },
                                            {
                                              name: 'tuple',
                                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                              elements: [
                                                { name: 'literal', value: "'authContext'" },
                                                {
                                                  name: 'union',
                                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                  elements: [
                                                    { name: 'literal', value: "'read'" },
                                                    { name: 'literal', value: "'write'" },
                                                    { name: 'literal', value: "'instantiate'" },
                                                    { name: 'literal', value: "'confirm'" },
                                                    { name: 'literal', value: "'sign'" },
                                                    { name: 'literal', value: "'reject'" },
                                                  ],
                                                },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['contains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'contains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['notContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'notContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['startsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'startsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['endsWith', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'endsWith'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                            {
                                              name: 'tuple',
                                              raw: "['commaContains', StringExpression, StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'commaContains'" },
                                                { name: 'StringExpression' },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                        { name: 'FuncIf' },
                                        { name: 'StrictStringExpression' },
                                        {
                                          name: 'union',
                                          raw: 'number | FuncStringLength',
                                          elements: [
                                            { name: 'number' },
                                            {
                                              name: 'tuple',
                                              raw: "['stringLength', StringExpression]",
                                              elements: [
                                                { name: 'literal', value: "'stringLength'" },
                                                { name: 'StringExpression' },
                                              ],
                                            },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['argv', NumberExpression]",
                      elements: [
                        { name: 'literal', value: "'argv'" },
                        {
                          name: 'union',
                          raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                          elements: [
                            { name: 'null' },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'FuncIf' },
                            { name: 'StrictStringExpression' },
                          ],
                        },
                      ],
                    },
                  ],
                },
                {
                  name: 'union',
                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                  elements: [
                    { name: 'boolean' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    {
                      name: 'tuple',
                      raw: "['not', BooleanExpression]",
                      elements: [
                        { name: 'literal', value: "'not'" },
                        { name: 'BooleanExpression' },
                      ],
                    },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    {
                      name: 'tuple',
                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                      elements: [
                        { name: 'literal', value: "'authContext'" },
                        {
                          name: 'union',
                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                          elements: [
                            { name: 'literal', value: "'read'" },
                            { name: 'literal', value: "'write'" },
                            { name: 'literal', value: "'instantiate'" },
                            { name: 'literal', value: "'confirm'" },
                            { name: 'literal', value: "'sign'" },
                            { name: 'literal', value: "'reject'" },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['contains', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'contains'" },
                        { name: 'StringExpression' },
                        { name: 'StringExpression' },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['notContains', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'notContains'" },
                        { name: 'StringExpression' },
                        { name: 'StringExpression' },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['startsWith', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'startsWith'" },
                        { name: 'StringExpression' },
                        { name: 'StringExpression' },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['endsWith', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'endsWith'" },
                        { name: 'StringExpression' },
                        { name: 'StringExpression' },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['commaContains', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'commaContains'" },
                        { name: 'StringExpression' },
                        { name: 'StringExpression' },
                      ],
                    },
                  ],
                },
                {
                  name: 'union',
                  raw: 'number | FuncStringLength',
                  elements: [
                    { name: 'number' },
                    {
                      name: 'tuple',
                      raw: "['stringLength', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'stringLength'" },
                        { name: 'StringExpression' },
                      ],
                    },
                  ],
                },
                {
                  name: 'union',
                  raw: 'FuncIfWithElse | FuncIfWithoutElse',
                  elements: [
                    {
                      name: 'tuple',
                      raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                      elements: [
                        { name: 'literal', value: "'if'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                          elements: [
                            { name: 'null' },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'FuncIf' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        { name: 'Expression' },
                        { name: 'literal', value: "'else'" },
                        { name: 'Expression' },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['if', BooleanExpression, Expression]",
                      elements: [
                        { name: 'literal', value: "'if'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                          elements: [
                            { name: 'null' },
                            {
                              name: 'union',
                              raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                              elements: [
                                { name: 'boolean' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "['not', BooleanExpression]",
                                  elements: [
                                    { name: 'literal', value: "'not'" },
                                    { name: 'BooleanExpression' },
                                  ],
                                },
                                { name: 'unknown' },
                                { name: 'unknown' },
                                {
                                  name: 'tuple',
                                  raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                  elements: [
                                    { name: 'literal', value: "'authContext'" },
                                    {
                                      name: 'union',
                                      raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                      elements: [
                                        { name: 'literal', value: "'read'" },
                                        { name: 'literal', value: "'write'" },
                                        { name: 'literal', value: "'instantiate'" },
                                        { name: 'literal', value: "'confirm'" },
                                        { name: 'literal', value: "'sign'" },
                                        { name: 'literal', value: "'reject'" },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['contains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'contains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['notContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'notContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['startsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'startsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['endsWith', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'endsWith'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['commaContains', StringExpression, StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'commaContains'" },
                                    { name: 'StringExpression' },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'FuncIf' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        { name: 'Expression' },
                      ],
                    },
                  ],
                },
              ],
            },
            description: '',
          },
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(expression: Expression) => void',
              signature: {
                arguments: [
                  {
                    type: {
                      name: 'union',
                      raw: '| null\n| StrictStringExpression\n| StrictBooleanExpression\n| StrictNumberExpression\n| FuncIf',
                      elements: [
                        { name: 'null' },
                        {
                          name: 'union',
                          raw: '| string\n| [string]\n| FuncComponent\n| FuncDataModel\n| FuncGatewayAction\n| FuncGatewayActionContext\n| FuncDisplayValue\n| FuncInstanceContext\n| FuncFrontendSettings\n| FuncConcat\n| FuncFormatDate\n| FuncRound\n| FuncText\n| FuncLanguage\n| FuncLowerCase\n| FuncUpperCase\n| FuncArgv',
                          elements: [
                            { name: 'string' },
                            { name: 'tuple', raw: '[string]', elements: [{ name: 'string' }] },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            {
                              name: 'tuple',
                              raw: "['displayValue', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'displayValue'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            { name: 'unknown' },
                            {
                              name: 'tuple',
                              raw: "['frontendSettings', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'frontendSettings'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['concat', ...StringExpression[]]",
                              elements: [
                                { name: 'literal', value: "'concat'" },
                                { name: 'unknown' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['formatDate', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'formatDate'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['formatNumber', NumberExpression, NumberExpression]",
                              elements: [
                                { name: 'literal', value: "'formatNumber'" },
                                {
                                  name: 'union',
                                  raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                                  elements: [
                                    { name: 'null' },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'FuncIf' },
                                    { name: 'StrictStringExpression' },
                                  ],
                                },
                                {
                                  name: 'union',
                                  raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                                  elements: [
                                    { name: 'null' },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'FuncIf' },
                                    { name: 'StrictStringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['text', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'text'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['language']",
                              elements: [{ name: 'literal', value: "'language'" }],
                            },
                            {
                              name: 'tuple',
                              raw: "['lowerCase', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'lowerCase'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['upperCase', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'upperCase'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            {
                                              name: 'union',
                                              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                              elements: [
                                                { name: 'null' },
                                                {
                                                  name: 'union',
                                                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                                  elements: [
                                                    { name: 'boolean' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['not', BooleanExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'not'" },
                                                        { name: 'BooleanExpression' },
                                                      ],
                                                    },
                                                    { name: 'unknown' },
                                                    { name: 'unknown' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                                      elements: [
                                                        { name: 'literal', value: "'authContext'" },
                                                        {
                                                          name: 'union',
                                                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                                          elements: [
                                                            { name: 'literal', value: "'read'" },
                                                            { name: 'literal', value: "'write'" },
                                                            {
                                                              name: 'literal',
                                                              value: "'instantiate'",
                                                            },
                                                            { name: 'literal', value: "'confirm'" },
                                                            { name: 'literal', value: "'sign'" },
                                                            { name: 'literal', value: "'reject'" },
                                                          ],
                                                        },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['contains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'contains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['notContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'notContains'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['startsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'startsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['endsWith', StringExpression, StringExpression]",
                                                      elements: [
                                                        { name: 'literal', value: "'endsWith'" },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['commaContains', StringExpression, StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'commaContains'",
                                                        },
                                                        { name: 'StringExpression' },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                                { name: 'FuncIf' },
                                                { name: 'StrictStringExpression' },
                                                {
                                                  name: 'union',
                                                  raw: 'number | FuncStringLength',
                                                  elements: [
                                                    { name: 'number' },
                                                    {
                                                      name: 'tuple',
                                                      raw: "['stringLength', StringExpression]",
                                                      elements: [
                                                        {
                                                          name: 'literal',
                                                          value: "'stringLength'",
                                                        },
                                                        { name: 'StringExpression' },
                                                      ],
                                                    },
                                                  ],
                                                },
                                              ],
                                            },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['argv', NumberExpression]",
                              elements: [
                                { name: 'literal', value: "'argv'" },
                                {
                                  name: 'union',
                                  raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                                  elements: [
                                    { name: 'null' },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'FuncIf' },
                                    { name: 'StrictStringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          name: 'union',
                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                          elements: [
                            { name: 'boolean' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            {
                              name: 'tuple',
                              raw: "['not', BooleanExpression]",
                              elements: [
                                { name: 'literal', value: "'not'" },
                                { name: 'BooleanExpression' },
                              ],
                            },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            {
                              name: 'tuple',
                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                              elements: [
                                { name: 'literal', value: "'authContext'" },
                                {
                                  name: 'union',
                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                  elements: [
                                    { name: 'literal', value: "'read'" },
                                    { name: 'literal', value: "'write'" },
                                    { name: 'literal', value: "'instantiate'" },
                                    { name: 'literal', value: "'confirm'" },
                                    { name: 'literal', value: "'sign'" },
                                    { name: 'literal', value: "'reject'" },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['contains', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'contains'" },
                                { name: 'StringExpression' },
                                { name: 'StringExpression' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['notContains', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'notContains'" },
                                { name: 'StringExpression' },
                                { name: 'StringExpression' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['startsWith', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'startsWith'" },
                                { name: 'StringExpression' },
                                { name: 'StringExpression' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['endsWith', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'endsWith'" },
                                { name: 'StringExpression' },
                                { name: 'StringExpression' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['commaContains', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'commaContains'" },
                                { name: 'StringExpression' },
                                { name: 'StringExpression' },
                              ],
                            },
                          ],
                        },
                        {
                          name: 'union',
                          raw: 'number | FuncStringLength',
                          elements: [
                            { name: 'number' },
                            {
                              name: 'tuple',
                              raw: "['stringLength', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'stringLength'" },
                                { name: 'StringExpression' },
                              ],
                            },
                          ],
                        },
                        {
                          name: 'union',
                          raw: 'FuncIfWithElse | FuncIfWithoutElse',
                          elements: [
                            {
                              name: 'tuple',
                              raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                              elements: [
                                { name: 'literal', value: "'if'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                  elements: [
                                    { name: 'null' },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'FuncIf' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                                { name: 'Expression' },
                                { name: 'literal', value: "'else'" },
                                { name: 'Expression' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['if', BooleanExpression, Expression]",
                              elements: [
                                { name: 'literal', value: "'if'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                                  elements: [
                                    { name: 'null' },
                                    {
                                      name: 'union',
                                      raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                                      elements: [
                                        { name: 'boolean' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "['not', BooleanExpression]",
                                          elements: [
                                            { name: 'literal', value: "'not'" },
                                            { name: 'BooleanExpression' },
                                          ],
                                        },
                                        { name: 'unknown' },
                                        { name: 'unknown' },
                                        {
                                          name: 'tuple',
                                          raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                                          elements: [
                                            { name: 'literal', value: "'authContext'" },
                                            {
                                              name: 'union',
                                              raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                              elements: [
                                                { name: 'literal', value: "'read'" },
                                                { name: 'literal', value: "'write'" },
                                                { name: 'literal', value: "'instantiate'" },
                                                { name: 'literal', value: "'confirm'" },
                                                { name: 'literal', value: "'sign'" },
                                                { name: 'literal', value: "'reject'" },
                                              ],
                                            },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['contains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'contains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['notContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'notContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['startsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'startsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['endsWith', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'endsWith'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['commaContains', StringExpression, StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'commaContains'" },
                                            { name: 'StringExpression' },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'FuncIf' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                  ],
                                },
                                { name: 'Expression' },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    name: 'expression',
                  },
                ],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          isManualExpressionValidRef: {
            required: !0,
            tsType: {
              name: 'ReactMutableRefObject',
              raw: 'React.MutableRefObject<boolean>',
              elements: [{ name: 'boolean' }],
            },
            description: '',
          },
        },
      };
      var StudioExpression_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/StudioExpression.module.css',
        ),
        StudioExpression_module_options = {};
      (StudioExpression_module_options.styleTagTransform = styleTagTransform_default()),
        (StudioExpression_module_options.setAttributes = setAttributesWithoutAttributes_default()),
        (StudioExpression_module_options.insert = insertBySelector_default().bind(null, 'head')),
        (StudioExpression_module_options.domAPI = styleDomAPI_default()),
        (StudioExpression_module_options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(
        StudioExpression_module.A,
        StudioExpression_module_options,
      );
      const StudioExpression_StudioExpression_module =
        StudioExpression_module.A && StudioExpression_module.A.locals
          ? StudioExpression_module.A.locals
          : void 0;
      var TabId;
      !(function (TabId) {
        (TabId.Simplified = 'simplified'), (TabId.Manual = 'manual');
      })(TabId || (TabId = {}));
      const StudioExpression = ({
          expression,
          expressionOptions,
          onChange,
          dataLookupOptions,
          texts,
          showAddSubexpression,
        }) =>
          isExpressionValid(expression)
            ? react.createElement(
                StudioExpressionContext.Provider,
                { value: { dataLookupOptions, texts, expressionOptions } },
                react.createElement(ValidExpression, {
                  expression,
                  onChange,
                  showAddSubexpression,
                }),
              )
            : react.createElement(Alert.F, { severity: 'danger' }, texts.invalidExpression),
        ValidExpression = ({ expression, showAddSubexpression, onChange }) => {
          const { texts } = (0, react.useContext)(StudioExpressionContext),
            initialTab = (0, react.useMemo)(() => isExpressionSimple(expression), [expression])
              ? 'simplified'
              : 'manual',
            [selectedTab, setSelectedTab] = (0, react.useState)(initialTab),
            isManualExpressionValidRef = (0, react.useRef)(!0);
          return react.createElement(
            Tabs.tU,
            {
              className: StudioExpression_StudioExpression_module.validExpression,
              onChange: (tab) => {
                isManualExpressionValidRef.current
                  ? setSelectedTab(tab)
                  : confirm(texts.changeToSimplifiedWarning) &&
                    ((isManualExpressionValidRef.current = !0), setSelectedTab(tab));
              },
              size: 'small',
              value: selectedTab,
            },
            react.createElement(
              Tabs.tU.List,
              null,
              react.createElement(Tabs.tU.Tab, { value: 'simplified' }, texts.simplified),
              react.createElement(Tabs.tU.Tab, { value: 'manual' }, texts.manual),
            ),
            react.createElement(
              Tabs.tU.Content,
              {
                value: 'simplified',
                className: StudioExpression_StudioExpression_module.tabContent,
              },
              react.createElement(SimplifiedEditor, { expression, onChange, showAddSubexpression }),
            ),
            react.createElement(
              Tabs.tU.Content,
              { value: 'manual', className: StudioExpression_StudioExpression_module.tabContent },
              react.createElement(ManualEditor, {
                expression,
                onChange,
                isManualExpressionValidRef,
              }),
            ),
          );
        };
      StudioExpression.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'StudioExpression',
        props: {
          expression: {
            required: !0,
            tsType: {
              name: 'union',
              raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
              elements: [
                { name: 'null' },
                {
                  name: 'union',
                  raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                  elements: [
                    { name: 'boolean' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    {
                      name: 'tuple',
                      raw: "['not', BooleanExpression]",
                      elements: [
                        { name: 'literal', value: "'not'" },
                        { name: 'BooleanExpression' },
                      ],
                    },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    {
                      name: 'tuple',
                      raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                      elements: [
                        { name: 'literal', value: "'authContext'" },
                        {
                          name: 'union',
                          raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                          elements: [
                            { name: 'literal', value: "'read'" },
                            { name: 'literal', value: "'write'" },
                            { name: 'literal', value: "'instantiate'" },
                            { name: 'literal', value: "'confirm'" },
                            { name: 'literal', value: "'sign'" },
                            { name: 'literal', value: "'reject'" },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['contains', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'contains'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['notContains', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'notContains'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['startsWith', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'startsWith'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['endsWith', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'endsWith'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['commaContains', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'commaContains'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                      ],
                    },
                  ],
                },
                {
                  name: 'union',
                  raw: 'FuncIfWithElse | FuncIfWithoutElse',
                  elements: [
                    {
                      name: 'tuple',
                      raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                      elements: [
                        { name: 'literal', value: "'if'" },
                        { name: 'BooleanExpression' },
                        { name: 'Expression' },
                        { name: 'literal', value: "'else'" },
                        { name: 'Expression' },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['if', BooleanExpression, Expression]",
                      elements: [
                        { name: 'literal', value: "'if'" },
                        { name: 'BooleanExpression' },
                        { name: 'Expression' },
                      ],
                    },
                  ],
                },
                {
                  name: 'union',
                  raw: '| string\n| [string]\n| FuncComponent\n| FuncDataModel\n| FuncGatewayAction\n| FuncGatewayActionContext\n| FuncDisplayValue\n| FuncInstanceContext\n| FuncFrontendSettings\n| FuncConcat\n| FuncFormatDate\n| FuncRound\n| FuncText\n| FuncLanguage\n| FuncLowerCase\n| FuncUpperCase\n| FuncArgv',
                  elements: [
                    { name: 'string' },
                    { name: 'tuple', raw: '[string]', elements: [{ name: 'string' }] },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    { name: 'unknown' },
                    {
                      name: 'tuple',
                      raw: "['displayValue', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'displayValue'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                      ],
                    },
                    { name: 'unknown' },
                    {
                      name: 'tuple',
                      raw: "['frontendSettings', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'frontendSettings'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['concat', ...StringExpression[]]",
                      elements: [{ name: 'literal', value: "'concat'" }, { name: 'unknown' }],
                    },
                    {
                      name: 'tuple',
                      raw: "['formatDate', StringExpression, StringExpression]",
                      elements: [
                        { name: 'literal', value: "'formatDate'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['formatNumber', NumberExpression, NumberExpression]",
                      elements: [
                        { name: 'literal', value: "'formatNumber'" },
                        {
                          name: 'union',
                          raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                          elements: [
                            { name: 'null' },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictStringExpression' },
                          ],
                        },
                        {
                          name: 'union',
                          raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                          elements: [
                            { name: 'null' },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictStringExpression' },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['text', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'text'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['language']",
                      elements: [{ name: 'literal', value: "'language'" }],
                    },
                    {
                      name: 'tuple',
                      raw: "['lowerCase', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'lowerCase'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['upperCase', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'upperCase'" },
                        {
                          name: 'union',
                          raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                          elements: [
                            { name: 'null' },
                            { name: 'StrictStringExpression' },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictBooleanExpression' },
                          ],
                        },
                      ],
                    },
                    {
                      name: 'tuple',
                      raw: "['argv', NumberExpression]",
                      elements: [
                        { name: 'literal', value: "'argv'" },
                        {
                          name: 'union',
                          raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                          elements: [
                            { name: 'null' },
                            {
                              name: 'union',
                              raw: 'number | FuncStringLength',
                              elements: [
                                { name: 'number' },
                                {
                                  name: 'tuple',
                                  raw: "['stringLength', StringExpression]",
                                  elements: [
                                    { name: 'literal', value: "'stringLength'" },
                                    { name: 'StringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'union',
                              raw: 'FuncIfWithElse | FuncIfWithoutElse',
                              elements: [
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                    { name: 'literal', value: "'else'" },
                                    { name: 'Expression' },
                                  ],
                                },
                                {
                                  name: 'tuple',
                                  raw: "['if', BooleanExpression, Expression]",
                                  elements: [
                                    { name: 'literal', value: "'if'" },
                                    { name: 'BooleanExpression' },
                                    { name: 'Expression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'StrictStringExpression' },
                          ],
                        },
                      ],
                    },
                  ],
                },
                {
                  name: 'union',
                  raw: 'number | FuncStringLength',
                  elements: [
                    { name: 'number' },
                    {
                      name: 'tuple',
                      raw: "['stringLength', StringExpression]",
                      elements: [
                        { name: 'literal', value: "'stringLength'" },
                        { name: 'StringExpression' },
                      ],
                    },
                  ],
                },
              ],
            },
            description: '',
          },
          expressionOptions: {
            required: !1,
            tsType: { name: 'Array', elements: [{ name: 'string' }], raw: 'string[]' },
            description: '',
          },
          onChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(expression: BooleanExpression) => void',
              signature: {
                arguments: [
                  {
                    type: {
                      name: 'union',
                      raw: '| null\n| StrictBooleanExpression\n| FuncIf\n| StrictStringExpression\n| StrictNumberExpression',
                      elements: [
                        { name: 'null' },
                        {
                          name: 'union',
                          raw: '| boolean\n| FuncEquals\n| FuncNotEquals\n| FuncGreaterThan\n| FuncGreaterThanEq\n| FuncLessThan\n| FuncLessThanEq\n| FuncNot\n| FuncAnd\n| FuncOr\n| FuncAuthContext\n| FuncContains\n| FuncNotContains\n| FuncStartsWith\n| FuncEndsWith\n| FuncCommaContains',
                          elements: [
                            { name: 'boolean' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            {
                              name: 'tuple',
                              raw: "['not', BooleanExpression]",
                              elements: [
                                { name: 'literal', value: "'not'" },
                                { name: 'BooleanExpression' },
                              ],
                            },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            {
                              name: 'tuple',
                              raw: "[\n  'authContext',\n  'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject',\n]",
                              elements: [
                                { name: 'literal', value: "'authContext'" },
                                {
                                  name: 'union',
                                  raw: "'read' | 'write' | 'instantiate' | 'confirm' | 'sign' | 'reject'",
                                  elements: [
                                    { name: 'literal', value: "'read'" },
                                    { name: 'literal', value: "'write'" },
                                    { name: 'literal', value: "'instantiate'" },
                                    { name: 'literal', value: "'confirm'" },
                                    { name: 'literal', value: "'sign'" },
                                    { name: 'literal', value: "'reject'" },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['contains', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'contains'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['notContains', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'notContains'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['startsWith', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'startsWith'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['endsWith', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'endsWith'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['commaContains', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'commaContains'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          name: 'union',
                          raw: 'FuncIfWithElse | FuncIfWithoutElse',
                          elements: [
                            {
                              name: 'tuple',
                              raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                              elements: [
                                { name: 'literal', value: "'if'" },
                                { name: 'BooleanExpression' },
                                { name: 'Expression' },
                                { name: 'literal', value: "'else'" },
                                { name: 'Expression' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['if', BooleanExpression, Expression]",
                              elements: [
                                { name: 'literal', value: "'if'" },
                                { name: 'BooleanExpression' },
                                { name: 'Expression' },
                              ],
                            },
                          ],
                        },
                        {
                          name: 'union',
                          raw: '| string\n| [string]\n| FuncComponent\n| FuncDataModel\n| FuncGatewayAction\n| FuncGatewayActionContext\n| FuncDisplayValue\n| FuncInstanceContext\n| FuncFrontendSettings\n| FuncConcat\n| FuncFormatDate\n| FuncRound\n| FuncText\n| FuncLanguage\n| FuncLowerCase\n| FuncUpperCase\n| FuncArgv',
                          elements: [
                            { name: 'string' },
                            { name: 'tuple', raw: '[string]', elements: [{ name: 'string' }] },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            { name: 'unknown' },
                            {
                              name: 'tuple',
                              raw: "['displayValue', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'displayValue'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                              ],
                            },
                            { name: 'unknown' },
                            {
                              name: 'tuple',
                              raw: "['frontendSettings', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'frontendSettings'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['concat', ...StringExpression[]]",
                              elements: [
                                { name: 'literal', value: "'concat'" },
                                { name: 'unknown' },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['formatDate', StringExpression, StringExpression]",
                              elements: [
                                { name: 'literal', value: "'formatDate'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['formatNumber', NumberExpression, NumberExpression]",
                              elements: [
                                { name: 'literal', value: "'formatNumber'" },
                                {
                                  name: 'union',
                                  raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                                  elements: [
                                    { name: 'null' },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictStringExpression' },
                                  ],
                                },
                                {
                                  name: 'union',
                                  raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                                  elements: [
                                    { name: 'null' },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictStringExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['text', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'text'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['language']",
                              elements: [{ name: 'literal', value: "'language'" }],
                            },
                            {
                              name: 'tuple',
                              raw: "['lowerCase', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'lowerCase'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['upperCase', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'upperCase'" },
                                {
                                  name: 'union',
                                  raw: '| null\n| StrictStringExpression\n| FuncIf\n| StrictNumberExpression\n| StrictBooleanExpression',
                                  elements: [
                                    { name: 'null' },
                                    { name: 'StrictStringExpression' },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictBooleanExpression' },
                                  ],
                                },
                              ],
                            },
                            {
                              name: 'tuple',
                              raw: "['argv', NumberExpression]",
                              elements: [
                                { name: 'literal', value: "'argv'" },
                                {
                                  name: 'union',
                                  raw: 'null | StrictNumberExpression | FuncIf | StrictStringExpression',
                                  elements: [
                                    { name: 'null' },
                                    {
                                      name: 'union',
                                      raw: 'number | FuncStringLength',
                                      elements: [
                                        { name: 'number' },
                                        {
                                          name: 'tuple',
                                          raw: "['stringLength', StringExpression]",
                                          elements: [
                                            { name: 'literal', value: "'stringLength'" },
                                            { name: 'StringExpression' },
                                          ],
                                        },
                                      ],
                                    },
                                    {
                                      name: 'union',
                                      raw: 'FuncIfWithElse | FuncIfWithoutElse',
                                      elements: [
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression, 'else', Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                            { name: 'literal', value: "'else'" },
                                            { name: 'Expression' },
                                          ],
                                        },
                                        {
                                          name: 'tuple',
                                          raw: "['if', BooleanExpression, Expression]",
                                          elements: [
                                            { name: 'literal', value: "'if'" },
                                            { name: 'BooleanExpression' },
                                            { name: 'Expression' },
                                          ],
                                        },
                                      ],
                                    },
                                    { name: 'StrictStringExpression' },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        {
                          name: 'union',
                          raw: 'number | FuncStringLength',
                          elements: [
                            { name: 'number' },
                            {
                              name: 'tuple',
                              raw: "['stringLength', StringExpression]",
                              elements: [
                                { name: 'literal', value: "'stringLength'" },
                                { name: 'StringExpression' },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    name: 'expression',
                  },
                ],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          texts: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'object',
              raw: '{\n  addSubexpression: string;\n  and: string;\n  andOr: string;\n  cannotSaveSinceInvalid: string;\n  cannotSimplify: string;\n  changeToSimplifiedWarning: string;\n  componentId: string;\n  confirmDeleteSubexpression: string;\n  dataModelPath: string;\n  delete: string;\n  disabledLogicalOperator: string;\n  edit: string;\n  errorListFooter: string;\n  errorListHeader: string;\n  errorMessages: Record<ExpressionErrorKey, string>;\n  expression: string;\n  false: string;\n  firstOperand: string;\n  gatewayActionContext: Record<GatewayActionContext, string>;\n  gatewayActionKey: string;\n  instanceContext: Record<InstanceContext, string>;\n  instanceContextKey: string;\n  invalidExpression: string;\n  logicalOperation: string;\n  logicalOperator: string;\n  logicalTupleOperators: Record<LogicalTupleOperator, string>;\n  manual: string;\n  numberValidationError: string;\n  or: string;\n  readonlyComponentId: string;\n  readonlyDataModelPath: string;\n  readonlyGatewayActionContext: string;\n  readonlyInstanceContext: string;\n  relationalOperator: string;\n  relationalOperators: Record<RelationalOperator, string>;\n  save: string;\n  saveAndClose: string;\n  secondOperand: string;\n  simplified: string;\n  subexpression: (index: number) => string;\n  transformToLogical: string;\n  true: string;\n  value: string;\n  valueType: string;\n  valueTypes: Record<SimpleSubexpressionValueType, string>;\n}',
              signature: {
                properties: [
                  { key: 'addSubexpression', value: { name: 'string', required: !0 } },
                  { key: 'and', value: { name: 'string', required: !0 } },
                  { key: 'andOr', value: { name: 'string', required: !0 } },
                  { key: 'cannotSaveSinceInvalid', value: { name: 'string', required: !0 } },
                  { key: 'cannotSimplify', value: { name: 'string', required: !0 } },
                  { key: 'changeToSimplifiedWarning', value: { name: 'string', required: !0 } },
                  { key: 'componentId', value: { name: 'string', required: !0 } },
                  { key: 'confirmDeleteSubexpression', value: { name: 'string', required: !0 } },
                  { key: 'dataModelPath', value: { name: 'string', required: !0 } },
                  { key: 'delete', value: { name: 'string', required: !0 } },
                  { key: 'disabledLogicalOperator', value: { name: 'string', required: !0 } },
                  { key: 'edit', value: { name: 'string', required: !0 } },
                  { key: 'errorListFooter', value: { name: 'string', required: !0 } },
                  { key: 'errorListHeader', value: { name: 'string', required: !0 } },
                  {
                    key: 'errorMessages',
                    value: {
                      name: 'Record',
                      elements: [{ name: 'ExpressionErrorKey' }, { name: 'string' }],
                      raw: 'Record<ExpressionErrorKey, string>',
                      required: !0,
                    },
                  },
                  { key: 'expression', value: { name: 'string', required: !0 } },
                  { key: 'false', value: { name: 'string', required: !0 } },
                  { key: 'firstOperand', value: { name: 'string', required: !0 } },
                  {
                    key: 'gatewayActionContext',
                    value: {
                      name: 'Record',
                      elements: [{ name: 'GatewayActionContext' }, { name: 'string' }],
                      raw: 'Record<GatewayActionContext, string>',
                      required: !0,
                    },
                  },
                  { key: 'gatewayActionKey', value: { name: 'string', required: !0 } },
                  {
                    key: 'instanceContext',
                    value: {
                      name: 'Record',
                      elements: [{ name: 'InstanceContext' }, { name: 'string' }],
                      raw: 'Record<InstanceContext, string>',
                      required: !0,
                    },
                  },
                  { key: 'instanceContextKey', value: { name: 'string', required: !0 } },
                  { key: 'invalidExpression', value: { name: 'string', required: !0 } },
                  { key: 'logicalOperation', value: { name: 'string', required: !0 } },
                  { key: 'logicalOperator', value: { name: 'string', required: !0 } },
                  {
                    key: 'logicalTupleOperators',
                    value: {
                      name: 'Record',
                      elements: [{ name: 'LogicalTupleOperator' }, { name: 'string' }],
                      raw: 'Record<LogicalTupleOperator, string>',
                      required: !0,
                    },
                  },
                  { key: 'manual', value: { name: 'string', required: !0 } },
                  { key: 'numberValidationError', value: { name: 'string', required: !0 } },
                  { key: 'or', value: { name: 'string', required: !0 } },
                  { key: 'readonlyComponentId', value: { name: 'string', required: !0 } },
                  { key: 'readonlyDataModelPath', value: { name: 'string', required: !0 } },
                  { key: 'readonlyGatewayActionContext', value: { name: 'string', required: !0 } },
                  { key: 'readonlyInstanceContext', value: { name: 'string', required: !0 } },
                  { key: 'relationalOperator', value: { name: 'string', required: !0 } },
                  {
                    key: 'relationalOperators',
                    value: {
                      name: 'Record',
                      elements: [
                        {
                          name: 'union',
                          raw: 'NumberRelationOperator | GeneralRelationOperator',
                          elements: [
                            { name: 'NumberRelationOperator' },
                            { name: 'GeneralRelationOperator' },
                          ],
                        },
                        { name: 'string' },
                      ],
                      raw: 'Record<RelationalOperator, string>',
                      required: !0,
                    },
                  },
                  { key: 'save', value: { name: 'string', required: !0 } },
                  { key: 'saveAndClose', value: { name: 'string', required: !0 } },
                  { key: 'secondOperand', value: { name: 'string', required: !0 } },
                  { key: 'simplified', value: { name: 'string', required: !0 } },
                  {
                    key: 'subexpression',
                    value: {
                      name: 'signature',
                      type: 'function',
                      raw: '(index: number) => string',
                      signature: {
                        arguments: [{ type: { name: 'number' }, name: 'index' }],
                        return: { name: 'string' },
                      },
                      required: !0,
                    },
                  },
                  { key: 'transformToLogical', value: { name: 'string', required: !0 } },
                  { key: 'true', value: { name: 'string', required: !0 } },
                  { key: 'value', value: { name: 'string', required: !0 } },
                  { key: 'valueType', value: { name: 'string', required: !0 } },
                  {
                    key: 'valueTypes',
                    value: {
                      name: 'Record',
                      elements: [{ name: 'SimpleSubexpressionValueType' }, { name: 'string' }],
                      raw: 'Record<SimpleSubexpressionValueType, string>',
                      required: !0,
                    },
                  },
                ],
              },
            },
            description: '',
          },
          dataLookupOptions: {
            required: !0,
            tsType: {
              name: 'Partial',
              elements: [
                {
                  name: 'signature',
                  type: 'object',
                  raw: '{\n  [K in DataLookupFuncName]: string[];\n}',
                  signature: {
                    properties: [
                      {
                        key: { name: 'DataLookupFuncName', required: !0 },
                        value: { name: 'Array', elements: [{ name: 'string' }], raw: 'string[]' },
                      },
                    ],
                  },
                },
              ],
              raw: 'Partial<DataLookupOptions>',
            },
            description: '',
          },
          showAddSubexpression: { required: !1, tsType: { name: 'boolean' }, description: '' },
        },
      };
    },
    './src/components/StudioExpression/enums/DataLookupFuncName.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      var DataLookupFuncName;
      __webpack_require__.d(__webpack_exports__, { A: () => DataLookupFuncName }),
        (function (DataLookupFuncName) {
          (DataLookupFuncName.DataModel = 'dataModel'),
            (DataLookupFuncName.Component = 'component'),
            (DataLookupFuncName.GatewayAction = 'gatewayAction');
        })(DataLookupFuncName || (DataLookupFuncName = {}));
    },
    './src/components/StudioExpression/enums/ExpressionErrorKey.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      var ExpressionErrorKey;
      __webpack_require__.d(__webpack_exports__, { E: () => ExpressionErrorKey }),
        (function (ExpressionErrorKey) {
          (ExpressionErrorKey.ComponentIDNoLongerExists = 'componentIDNoLongerExists'),
            (ExpressionErrorKey.InvalidComponentId = 'invalidComponentId'),
            (ExpressionErrorKey.InvalidDataModelPath = 'invalidDataModelPath'),
            (ExpressionErrorKey.InvalidFirstOperand = 'invalidFirstOperand'),
            (ExpressionErrorKey.InvalidSecondOperand = 'invalidSecondOperand'),
            (ExpressionErrorKey.NumericRelationOperatorWithWrongType =
              'numericRelationOperatorWithWrongType');
        })(ExpressionErrorKey || (ExpressionErrorKey = {}));
    },
    './src/components/StudioExpression/enums/GatewayActionContext.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      var GatewayActionContext;
      __webpack_require__.d(__webpack_exports__, { e: () => GatewayActionContext }),
        (function (GatewayActionContext) {
          (GatewayActionContext.Sign = 'sign'),
            (GatewayActionContext.Confirm = 'confirm'),
            (GatewayActionContext.Reject = 'reject'),
            (GatewayActionContext.Pay = 'pay');
        })(GatewayActionContext || (GatewayActionContext = {}));
    },
    './src/components/StudioExpression/enums/GeneralRelationOperator.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      var GeneralRelationOperator;
      __webpack_require__.d(__webpack_exports__, { R: () => GeneralRelationOperator }),
        (function (GeneralRelationOperator) {
          (GeneralRelationOperator.Equals = 'equals'),
            (GeneralRelationOperator.NotEquals = 'notEquals');
        })(GeneralRelationOperator || (GeneralRelationOperator = {}));
    },
    './src/components/StudioExpression/enums/InstanceContext.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      var InstanceContext;
      __webpack_require__.d(__webpack_exports__, { N: () => InstanceContext }),
        (function (InstanceContext) {
          (InstanceContext.AppId = 'appId'),
            (InstanceContext.InstanceId = 'instanceId'),
            (InstanceContext.InstanceOwnerPartyId = 'instanceOwnerPartyId');
        })(InstanceContext || (InstanceContext = {}));
    },
    './src/components/StudioExpression/enums/KeyLookupFuncName.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      var KeyLookupFuncName;
      __webpack_require__.d(__webpack_exports__, { J: () => KeyLookupFuncName }),
        (function (KeyLookupFuncName) {
          (KeyLookupFuncName.InstanceContext = 'instanceContext'),
            (KeyLookupFuncName.GatewayActionContext = 'gatewayActionContext');
        })(KeyLookupFuncName || (KeyLookupFuncName = {}));
    },
    './src/components/StudioExpression/enums/LogicalTupleOperator.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      var LogicalTupleOperator;
      __webpack_require__.d(__webpack_exports__, { y: () => LogicalTupleOperator }),
        (function (LogicalTupleOperator) {
          (LogicalTupleOperator.And = 'and'), (LogicalTupleOperator.Or = 'or');
        })(LogicalTupleOperator || (LogicalTupleOperator = {}));
    },
    './src/components/StudioExpression/enums/NumberRelationOperator.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      var NumberRelationOperator;
      __webpack_require__.d(__webpack_exports__, { a: () => NumberRelationOperator }),
        (function (NumberRelationOperator) {
          (NumberRelationOperator.GreaterThan = 'greaterThan'),
            (NumberRelationOperator.GreaterThanOrEq = 'greaterThanEq'),
            (NumberRelationOperator.LessThan = 'lessThan'),
            (NumberRelationOperator.LessThanOrEq = 'lessThanEq');
        })(NumberRelationOperator || (NumberRelationOperator = {}));
    },
    './src/components/StudioExpression/enums/SimpleSubexpressionValueType.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      var SimpleSubexpressionValueType;
      __webpack_require__.d(__webpack_exports__, { C: () => SimpleSubexpressionValueType }),
        (function (SimpleSubexpressionValueType) {
          (SimpleSubexpressionValueType.Component = 'component'),
            (SimpleSubexpressionValueType.DataModel = 'dataModel'),
            (SimpleSubexpressionValueType.GatewayAction = 'gatewayAction'),
            (SimpleSubexpressionValueType.GatewayActionContext = 'gatewayActionContext'),
            (SimpleSubexpressionValueType.InstanceContext = 'instanceContext'),
            (SimpleSubexpressionValueType.String = 'string'),
            (SimpleSubexpressionValueType.Number = 'number'),
            (SimpleSubexpressionValueType.Boolean = 'boolean'),
            (SimpleSubexpressionValueType.Null = 'null');
        })(SimpleSubexpressionValueType || (SimpleSubexpressionValueType = {}));
    },
    './src/components/StudioFileUploader/StudioFileUploader.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { h: () => StudioFileUploader });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioFileUploader_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioFileUploader/StudioFileUploader.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioFileUploader_module.A, options);
      const StudioFileUploader_StudioFileUploader_module =
        StudioFileUploader_module.A && StudioFileUploader_module.A.locals
          ? StudioFileUploader_module.A.locals
          : void 0;
      var src = __webpack_require__('../studio-icons/src/index.ts'),
        StudioButton = __webpack_require__('./src/components/StudioButton/index.ts');
      const StudioFileUploader = (0, react.forwardRef)(
        (
          {
            onUploadFile,
            accept,
            size,
            variant = 'tertiary',
            disabled,
            uploaderButtonText,
            fileNameRegEx,
            onInvalidFileName,
            dataTestId,
          },
          ref,
        ) => {
          const handleSubmit = (event) => {
            event?.preventDefault();
            const file = getFile(ref);
            if (isFileNameValid(file, fileNameRegEx, ref, onInvalidFileName)) {
              const formData = new FormData();
              formData.append('file', file), onUploadFile(formData, file.name);
            }
          };
          return react.createElement(
            'form',
            { onSubmit: handleSubmit },
            react.createElement('input', {
              'data-testid': dataTestId,
              type: 'file',
              accept,
              ref,
              disabled,
              onChange: () => {
                getFile(ref) && handleSubmit();
              },
              className: StudioFileUploader_StudioFileUploader_module.fileInput,
            }),
            react.createElement(
              StudioButton.r,
              {
                size,
                icon: react.createElement(src.UploadIcon, null),
                onClick: () => ref?.current?.click(),
                disabled,
                variant,
              },
              uploaderButtonText,
            ),
          );
        },
      );
      StudioFileUploader.displayName = 'StudioFileUploader';
      const getFile = (fileRef) => fileRef?.current?.files?.item(0),
        isFileNameValid = (file, fileNameRegEx, fileRef, onInvalidFileName) => {
          if (!file) return !1;
          return (
            !(!!fileNameRegEx && !!onInvalidFileName) ||
            !!file.name.match(fileNameRegEx) ||
            (onInvalidFileName(), (fileRef.current.value = ''), !1)
          );
        };
      StudioFileUploader.__docgenInfo = {
        description:
          '@component\n   Component for uploading a file from a studio button and show spinner during uploading',
        methods: [],
        displayName: 'StudioFileUploader',
        props: { variant: { defaultValue: { value: "'tertiary'", computed: !1 }, required: !1 } },
      };
    },
    './src/components/StudioGridSelector/StudioGridSelector.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { Y: () => StudioGridSelector });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioGridSelector_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioGridSelector/StudioGridSelector.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioGridSelector_module.A, options);
      const StudioGridSelector_StudioGridSelector_module =
        StudioGridSelector_module.A && StudioGridSelector_module.A.locals
          ? StudioGridSelector_module.A.locals
          : void 0;
      var classnames = __webpack_require__('../../../node_modules/classnames/index.js'),
        classnames_default = __webpack_require__.n(classnames);
      const StudioGridSelector = ({ disabled = !1, sliderValue = 12, handleSliderChange }) => {
          const [hoverValue, setHoverValue] = (0, react.useState)(0),
            [selectedValue, setSelectedValue] = (0, react.useState)(sliderValue);
          (0, react.useEffect)(() => {
            setSelectedValue(sliderValue);
          }, [sliderValue]);
          const optionClassName = (gridValue) => {
              let variableClassName =
                gridValue > selectedValue
                  ? StudioGridSelector_StudioGridSelector_module.outside
                  : StudioGridSelector_StudioGridSelector_module.inside;
              return (
                hoverValue > 0 &&
                  (variableClassName =
                    gridValue > hoverValue
                      ? StudioGridSelector_StudioGridSelector_module.outside
                      : StudioGridSelector_StudioGridSelector_module.inside),
                classnames_default()(
                  StudioGridSelector_StudioGridSelector_module.option,
                  variableClassName,
                )
              );
            },
            sliderIsHovered = hoverValue > 0,
            backgroundCss =
              'linear-gradient(\n' +
              generateLinearGradient(
                sliderIsHovered ? hoverValue : selectedValue,
                sliderIsHovered,
              ) +
              ')',
            inputRef = (0, react.useRef)(null);
          return react.createElement(
            'div',
            {
              className: classnames_default()(
                StudioGridSelector_StudioGridSelector_module.sliderContainer,
                disabled && StudioGridSelector_StudioGridSelector_module.disabled,
              ),
              style: { '--background': backgroundCss },
            },
            react.createElement('input', {
              ref: inputRef,
              className: StudioGridSelector_StudioGridSelector_module.range,
              type: 'range',
              min: '1',
              max: '12',
              id: 'range',
              value: sliderValue,
              list: 'gridValues',
              onChange: (event) => handleSliderChange(convertToGridSize(event.target.value)),
              onInput: (event) => {
                setSelectedValue(parseInt(event.target.value)), setHoverValue(0);
              },
              disabled,
              onMouseMove: (event) => {
                const dataListElement = inputRef.current.list,
                  hoverOption = [...calculateOptionPositionsX(dataListElement)]
                    .reverse()
                    .find((optionPosX) => optionPosX.positionX < event.clientX);
                setHoverValue(hoverOption?.value || 0);
              },
              onMouseLeave: () => setHoverValue(0),
            }),
            react.createElement(
              'datalist',
              { id: 'gridValues' },
              [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((gridValue) =>
                react.createElement('option', {
                  key: gridValue,
                  value: gridValue,
                  label: gridValue.toString(),
                  className: optionClassName(gridValue),
                }),
              ),
            ),
          );
        },
        generateLinearGradient = (gridValue, hover) => {
          const gradientLines = ['to right'],
            insideColour = hover ? 'var(--hover-square-color)' : 'var(--selected-square-colour)',
            createStep = (option) => {
              const endSquarePosition = `calc((100% + 1px) * ${option} / 12 - 1px)`,
                squareColour =
                  option <= gridValue ? insideColour : 'var(--unselected-square-colour)';
              return [
                `${squareColour} ${`calc((100% + 1px) * ${option - 1} / 12)`}`,
                `${squareColour} ${endSquarePosition}`,
                `white ${endSquarePosition}`,
                `white ${`calc((100% + 1px) * ${option} / 12)`}`,
              ].join(',\n');
            };
          for (let i = 1; i <= 12; i++) gradientLines.push(createStep(i));
          return gradientLines.join(',\n');
        },
        convertToGridSize = (value) => parseInt(value),
        calculateOptionPositionsX = (datalistElement) => {
          if (datalistElement)
            return Array.from(datalistElement.options).map((option) => {
              const optionRect = option.getBoundingClientRect();
              return { value: parseInt(option.value), positionX: optionRect.x };
            });
        };
      StudioGridSelector.__docgenInfo = {
        description:
          '@component\n   A component designed for choosing a value within the range of 1 to 12',
        methods: [],
        displayName: 'StudioGridSelector',
        props: {
          disabled: {
            required: !1,
            tsType: { name: 'boolean' },
            description: '',
            defaultValue: { value: 'false', computed: !1 },
          },
          sliderValue: {
            required: !1,
            tsType: {
              name: 'union',
              raw: '1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12',
              elements: [
                { name: 'literal', value: '1' },
                { name: 'literal', value: '2' },
                { name: 'literal', value: '3' },
                { name: 'literal', value: '4' },
                { name: 'literal', value: '5' },
                { name: 'literal', value: '6' },
                { name: 'literal', value: '7' },
                { name: 'literal', value: '8' },
                { name: 'literal', value: '9' },
                { name: 'literal', value: '10' },
                { name: 'literal', value: '11' },
                { name: 'literal', value: '12' },
              ],
            },
            description: '',
            defaultValue: { value: '12', computed: !1 },
          },
          handleSliderChange: {
            required: !0,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(newValue: GridSize) => void',
              signature: {
                arguments: [
                  {
                    type: {
                      name: 'union',
                      raw: '1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12',
                      elements: [
                        { name: 'literal', value: '1' },
                        { name: 'literal', value: '2' },
                        { name: 'literal', value: '3' },
                        { name: 'literal', value: '4' },
                        { name: 'literal', value: '5' },
                        { name: 'literal', value: '6' },
                        { name: 'literal', value: '7' },
                        { name: 'literal', value: '8' },
                        { name: 'literal', value: '9' },
                        { name: 'literal', value: '10' },
                        { name: 'literal', value: '11' },
                        { name: 'literal', value: '12' },
                      ],
                    },
                    name: 'newValue',
                  },
                ],
                return: { name: 'void' },
              },
            },
            description: '',
          },
        },
      };
    },
    './src/components/StudioIconTextfield/StudioIconTextfield.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { l: () => StudioIconTextfield });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        StudioTextfield = __webpack_require__('./src/components/StudioTextfield/index.ts'),
        classnames = __webpack_require__('../../../node_modules/classnames/index.js'),
        classnames_default = __webpack_require__.n(classnames),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioIconTextfield_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioIconTextfield/StudioIconTextfield.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioIconTextfield_module.A, options);
      const StudioIconTextfield_StudioIconTextfield_module =
          StudioIconTextfield_module.A && StudioIconTextfield_module.A.locals
            ? StudioIconTextfield_module.A.locals
            : void 0,
        StudioIconTextfield = (0, react.forwardRef)(
          ({ icon, className: givenClassName, ...rest }, ref) => {
            const className = classnames_default()(
              givenClassName,
              StudioIconTextfield_StudioIconTextfield_module.container,
            );
            return react.createElement(
              'div',
              { className, ref },
              react.createElement(
                'div',
                {
                  'aria-hidden': !0,
                  className: StudioIconTextfield_StudioIconTextfield_module.prefixIcon,
                },
                icon,
              ),
              react.createElement(StudioTextfield.e, {
                ...rest,
                className: StudioIconTextfield_StudioIconTextfield_module.textfield,
              }),
            );
          },
        );
      (StudioIconTextfield.displayName = 'StudioIconTextfield'),
        (StudioIconTextfield.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioIconTextfield',
          props: {
            icon: {
              required: !0,
              tsType: { name: 'ReactReactNode', raw: 'React.ReactNode' },
              description: '',
            },
            errorAfterBlur: { required: !1, tsType: { name: 'ReactNode' }, description: '' },
            withAsterisk: { required: !1, tsType: { name: 'boolean' }, description: '' },
          },
        });
    },
    './src/components/StudioIconTextfield/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, {
        l: () => _StudioIconTextfield__WEBPACK_IMPORTED_MODULE_0__.l,
      });
      var _StudioIconTextfield__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        './src/components/StudioIconTextfield/StudioIconTextfield.tsx',
      );
    },
    './src/components/StudioLabelAsParagraph/StudioLabelAsParagraph.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { L: () => StudioLabelAsParagraph });
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          '../../../node_modules/react/index.js',
        ),
        _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Typography/Label/Label.js',
        );
      const StudioLabelAsParagraph = (0, react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(
        ({ children, ...rest }, ref) =>
          react__WEBPACK_IMPORTED_MODULE_0__.createElement(
            _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_1__.J,
            { asChild: !0, ...rest, ref },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement('p', null, children),
          ),
      );
      (StudioLabelAsParagraph.displayName = 'StudioLabelAsParagraph'),
        (StudioLabelAsParagraph.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioLabelAsParagraph',
        });
    },
    './src/components/StudioLabelWrapper/StudioLabelWrapper.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { W: () => StudioLabelWrapper });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioLabelWrapper_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioLabelWrapper/StudioLabelWrapper.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioLabelWrapper_module.A, options);
      const StudioLabelWrapper_StudioLabelWrapper_module =
        StudioLabelWrapper_module.A && StudioLabelWrapper_module.A.locals
          ? StudioLabelWrapper_module.A.locals
          : void 0;
      var classnames = __webpack_require__('../../../node_modules/classnames/index.js'),
        classnames_default = __webpack_require__.n(classnames);
      const StudioLabelWrapper = (0, react.forwardRef)(
        ({ children, className, withAsterisk, ...rest }, ref) => {
          const finalClassName = classnames_default()(
            StudioLabelWrapper_StudioLabelWrapper_module.studioLabelWrapper,
            withAsterisk && StudioLabelWrapper_StudioLabelWrapper_module.withAsterisk,
            className,
          );
          return react.createElement('span', { className: finalClassName, ...rest, ref }, children);
        },
      );
      (StudioLabelWrapper.displayName = 'StudioLabelWrapper'),
        (StudioLabelWrapper.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioLabelWrapper',
        });
    },
    './src/components/StudioModal/StudioModal.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { O: () => StudioModal });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioModal_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioModal/StudioModal.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioModal_module.A, options);
      const StudioModal_StudioModal_module =
        StudioModal_module.A && StudioModal_module.A.locals ? StudioModal_module.A.locals : void 0;
      var lib = __webpack_require__('../../../node_modules/react-modal/lib/index.js'),
        lib_default = __webpack_require__.n(lib),
        src = __webpack_require__('../studio-icons/src/index.ts'),
        StudioButton = __webpack_require__('./src/components/StudioButton/index.ts');
      const StudioModal = (0, react.forwardRef)(
        ({ isOpen, onClose, title, children, closeButtonLabel, ...rest }, ref) =>
          react.createElement(
            lib_default(),
            {
              isOpen,
              onRequestClose: onClose,
              className: StudioModal_StudioModal_module.modal,
              overlayClassName: StudioModal_StudioModal_module.modalOverlay,
              ariaHideApp: !1,
              ref,
              ...rest,
            },
            react.createElement(
              'div',
              { className: StudioModal_StudioModal_module.headingWrapper },
              react.createElement(
                'div',
                { className: StudioModal_StudioModal_module.title },
                title,
              ),
              react.createElement(StudioButton.r, {
                variant: 'tertiary',
                icon: react.createElement(src.MultiplyIcon, null),
                onClick: onClose,
                'aria-label': closeButtonLabel,
              }),
            ),
            react.createElement(
              'div',
              { className: StudioModal_StudioModal_module.contentWrapper },
              children,
            ),
          ),
      );
      (StudioModal.displayName = 'StudioModal'),
        (StudioModal.__docgenInfo = {
          description:
            "@component\n   Component that displays a Modal for Altinn-studio\n\n@example\n   <StudioModal\n     isOpen={isOpen}\n     onClose={() => setIsOpen(false)}\n     title={\n       <div>\n         <SomeIcon />\n         <Heading level={1} size='small'>Some name</Heading>\n       </div>\n     }\n     closeButtonLabel='Close modal'\n   >\n     <div>\n       <SomeChildrenComponents />\n     </div>\n   </StudioModal>\n\n@property {boolean}[isOpen] - Flag for if the modal is open\n@property {function}[onClose] - Fucntion to execute when closing modal\n@property {ReactNode}[title] - Title of the modal\n@property {ReactNode}[children] - Content in the modal\n@property {string}[closeButtonLabel] - aria-label for close button\n\n@returns {ReactNode} - The rendered component",
          methods: [],
          displayName: 'StudioModal',
          props: {
            isOpen: { required: !0, tsType: { name: 'boolean' }, description: '' },
            onClose: {
              required: !0,
              tsType: {
                name: 'signature',
                type: 'function',
                raw: '() => void',
                signature: { arguments: [], return: { name: 'void' } },
              },
              description: '',
            },
            title: { required: !0, tsType: { name: 'ReactNode' }, description: '' },
            children: { required: !0, tsType: { name: 'ReactNode' }, description: '' },
            closeButtonLabel: { required: !0, tsType: { name: 'string' }, description: '' },
          },
        });
    },
    './src/components/StudioNativeSelect/StudioNativeSelect.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { e: () => StudioNativeSelect });
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          '../../../node_modules/react/index.js',
        ),
        _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/form/NativeSelect/NativeSelect.js',
        );
      const StudioNativeSelect = (0, react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(
        ({ children, description, label, id, size, ...rest }, ref) => {
          const defaultId = (0, react__WEBPACK_IMPORTED_MODULE_0__.useId)();
          return (
            (id = id ?? defaultId),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(
              _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_1__.m,
              { description, label, ref, size, id, ...rest },
              children,
            )
          );
        },
      );
      (StudioNativeSelect.displayName = 'StudioNativeSelect'),
        (StudioNativeSelect.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioNativeSelect',
        });
    },
    './src/components/StudioNotFoundPage/StudioNotFoundPage.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { P: () => StudioNotFoundPage });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioNotFoundPage_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioNotFoundPage/StudioNotFoundPage.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioNotFoundPage_module.A, options);
      const StudioNotFoundPage_StudioNotFoundPage_module =
        StudioNotFoundPage_module.A && StudioNotFoundPage_module.A.locals
          ? StudioNotFoundPage_module.A.locals
          : void 0;
      var classnames = __webpack_require__('../../../node_modules/classnames/index.js'),
        classnames_default = __webpack_require__.n(classnames),
        Heading = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Typography/Heading/Heading.js',
        ),
        Link = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Link/Link.js',
        );
      const StudioNotFoundPage = (0, react.forwardRef)(
        ({ className, title, body, redirectHref, redirectLinkText, ...rest }, ref) =>
          react.createElement(
            'div',
            {
              ref,
              className: classnames_default()(
                className,
                StudioNotFoundPage_StudioNotFoundPage_module.wrapper,
              ),
              ...rest,
            },
            react.createElement(
              'div',
              { className: StudioNotFoundPage_StudioNotFoundPage_module.contentWrapper },
              react.createElement('img', {
                src: __webpack_require__(
                  './src/components/StudioNotFoundPage/images/PCImage404.png',
                ),
                alt: '',
                'data-testid': '404-error',
              }),
              react.createElement(
                'div',
                { className: StudioNotFoundPage_StudioNotFoundPage_module.textWrapper },
                react.createElement(Heading.D, { level: 1, size: 'large' }, title),
                react.createElement(
                  'div',
                  { className: StudioNotFoundPage_StudioNotFoundPage_module.body },
                  body,
                ),
                react.createElement(
                  Link.N,
                  {
                    href: redirectHref,
                    className: StudioNotFoundPage_StudioNotFoundPage_module.link,
                  },
                  redirectLinkText,
                ),
              ),
            ),
          ),
      );
      (StudioNotFoundPage.displayName = 'StudioNotFoundPage'),
        (StudioNotFoundPage.__docgenInfo = {
          description: '@component\n   Displays the 404 - Not found page in studio',
          methods: [],
          displayName: 'StudioNotFoundPage',
        });
    },
    './src/components/StudioPageError/StudioPageError.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { C: () => StudioPageError });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        Alert = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Alert/Alert.js',
        ),
        Heading = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Typography/Heading/Heading.js',
        ),
        Paragraph = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Typography/Paragraph/Paragraph.js',
        ),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioPageError_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioPageError/StudioPageError.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioPageError_module.A, options);
      const StudioPageError_StudioPageError_module =
          StudioPageError_module.A && StudioPageError_module.A.locals
            ? StudioPageError_module.A.locals
            : void 0,
        StudioPageError = ({ message, title }) => {
          const isReactNode = react.isValidElement(message);
          return react.createElement(
            'div',
            { className: StudioPageError_StudioPageError_module.container },
            react.createElement(
              Alert.F,
              {
                className: StudioPageError_StudioPageError_module.alertContent,
                severity: 'danger',
              },
              react.createElement(Heading.D, { level: 1, size: 'xs', spacing: !0 }, title),
              isReactNode
                ? react.createElement(react.Fragment, null, message)
                : react.createElement(Paragraph.f, null, message),
            ),
          );
        };
      StudioPageError.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'StudioPageError',
        props: {
          title: { required: !1, tsType: { name: 'string' }, description: '' },
          message: {
            required: !1,
            tsType: {
              name: 'union',
              raw: 'string | React.ReactNode',
              elements: [{ name: 'string' }, { name: 'ReactReactNode', raw: 'React.ReactNode' }],
            },
            description: '',
          },
        },
      };
    },
    './src/components/StudioPageSpinner/StudioPageSpinner.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { Z: () => StudioPageSpinner });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioPageSpinner_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioPageSpinner/StudioPageSpinner.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioPageSpinner_module.A, options);
      const StudioPageSpinner_StudioPageSpinner_module =
        StudioPageSpinner_module.A && StudioPageSpinner_module.A.locals
          ? StudioPageSpinner_module.A.locals
          : void 0;
      var src = __webpack_require__('./src/index.ts');
      const StudioPageSpinner = (0, react.forwardRef)(
        ({ spinnerTitle, showSpinnerTitle = !1 }, ref) =>
          react.createElement(
            src.i3,
            { ref, className: StudioPageSpinner_StudioPageSpinner_module.container },
            react.createElement(src.Wq, {
              spinnerTitle,
              showSpinnerTitle,
              size: 'xlarge',
              className: StudioPageSpinner_StudioPageSpinner_module.spinnerText,
            }),
          ),
      );
      (StudioPageSpinner.displayName = 'StudioPageSpinner'),
        (StudioPageSpinner.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioPageSpinner',
          props: {
            showSpinnerTitle: { defaultValue: { value: 'false', computed: !1 }, required: !1 },
          },
        });
    },
    './src/components/StudioPopover/StudioPopover.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { mu: () => StudioPopover });
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          '../../../node_modules/react/index.js',
        ),
        _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Popover/index.js',
        );
      const StudioPopoverTrigger = ({ ...rest }) =>
          react__WEBPACK_IMPORTED_MODULE_0__.createElement(
            _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_1__.AM.Trigger,
            rest,
          ),
        StudioPopoverContent = ({ ...rest }) =>
          react__WEBPACK_IMPORTED_MODULE_0__.createElement(
            _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_1__.AM.Content,
            rest,
          ),
        StudioPopoverRoot = ({ ...rest }) =>
          react__WEBPACK_IMPORTED_MODULE_0__.createElement(
            _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_1__.AM,
            rest,
          ),
        StudioPopover = StudioPopoverRoot;
      (StudioPopover.Trigger = StudioPopoverTrigger),
        (StudioPopover.Content = StudioPopoverContent),
        (StudioPopoverRoot.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioPopoverRoot',
        }),
        (StudioPopoverTrigger.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioPopoverTrigger',
        }),
        (StudioPopoverContent.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioPopoverContent',
        });
    },
    './src/components/StudioProperty/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { C: () => StudioProperty });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        classnames = __webpack_require__('../../../node_modules/classnames/index.js'),
        classnames_default = __webpack_require__.n(classnames),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioPropertyGroup_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioProperty/StudioPropertyGroup/StudioPropertyGroup.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioPropertyGroup_module.A, options);
      const StudioPropertyGroup_StudioPropertyGroup_module =
          StudioPropertyGroup_module.A && StudioPropertyGroup_module.A.locals
            ? StudioPropertyGroup_module.A.locals
            : void 0,
        StudioPropertyGroup = (0, react.forwardRef)(
          ({ className: givenClass, children, ...rest }, ref) => {
            const className = classnames_default()(
              givenClass,
              StudioPropertyGroup_StudioPropertyGroup_module.listWrapper,
            );
            return react.createElement('div', { className, ref, ...rest }, children);
          },
        );
      (StudioPropertyGroup.displayName = 'StudioProperty.Group'),
        (StudioPropertyGroup.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioProperty.Group',
        });
      var StudioButton = __webpack_require__('./src/components/StudioButton/index.ts'),
        StudioPropertyButton_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioProperty/StudioPropertyButton/StudioPropertyButton.module.css',
        ),
        StudioPropertyButton_module_options = {};
      (StudioPropertyButton_module_options.styleTagTransform = styleTagTransform_default()),
        (StudioPropertyButton_module_options.setAttributes =
          setAttributesWithoutAttributes_default()),
        (StudioPropertyButton_module_options.insert = insertBySelector_default().bind(
          null,
          'head',
        )),
        (StudioPropertyButton_module_options.domAPI = styleDomAPI_default()),
        (StudioPropertyButton_module_options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(
        StudioPropertyButton_module.A,
        StudioPropertyButton_module_options,
      );
      const StudioPropertyButton_StudioPropertyButton_module =
        StudioPropertyButton_module.A && StudioPropertyButton_module.A.locals
          ? StudioPropertyButton_module.A.locals
          : void 0;
      var src = __webpack_require__('../studio-icons/src/index.ts');
      const StudioPropertyButton = (0, react.forwardRef)(
        (
          {
            className: givenClass,
            compact,
            readOnly,
            icon: givenIcon,
            property,
            value,
            withoutNegativeMargin,
            ...rest
          },
          ref,
        ) => {
          const hasValue = !!value,
            icon =
              hasValue || givenIcon ? givenIcon : react.createElement(src.PlusCircleIcon, null),
            className = classnames_default()(
              StudioPropertyButton_StudioPropertyButton_module.propertyButton,
              hasValue && StudioPropertyButton_StudioPropertyButton_module.withValue,
              compact && StudioPropertyButton_StudioPropertyButton_module.compact,
              readOnly && StudioPropertyButton_StudioPropertyButton_module.readOnly,
              withoutNegativeMargin &&
                StudioPropertyButton_StudioPropertyButton_module.withoutNegativeMargin,
              givenClass,
            );
          return (
            readOnly && (rest.onClick = null),
            react.createElement(
              StudioButton.r,
              {
                'aria-label': property,
                'aria-readonly': !!readOnly || null,
                className,
                fullWidth: !0,
                icon,
                ref,
                title: property,
                variant: 'tertiary',
                ...rest,
              },
              react.createElement(
                'span',
                { className: StudioPropertyButton_StudioPropertyButton_module.content },
                react.createElement(
                  'span',
                  { className: StudioPropertyButton_StudioPropertyButton_module.property },
                  property,
                ),
                react.createElement(
                  'span',
                  { className: StudioPropertyButton_StudioPropertyButton_module.value },
                  value,
                ),
              ),
              readOnly
                ? react.createElement(
                    'span',
                    { className: StudioPropertyButton_StudioPropertyButton_module.readOnlyWrapper },
                    react.createElement(src.PadlockLockedFillIcon, null),
                  )
                : hasValue &&
                    react.createElement(
                      'span',
                      {
                        className: StudioPropertyButton_StudioPropertyButton_module.editIconWrapper,
                      },
                      react.createElement(src.PencilIcon, null),
                    ),
            )
          );
        },
      );
      (StudioPropertyButton.displayName = 'StudioProperty.Button'),
        (StudioPropertyButton.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioProperty.Button',
        });
      var Fieldset = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/form/Fieldset/Fieldset.js',
        ),
        StudioPropertyFieldset_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioProperty/StudioPropertyFieldset/StudioPropertyFieldset.module.css',
        ),
        StudioPropertyFieldset_module_options = {};
      (StudioPropertyFieldset_module_options.styleTagTransform = styleTagTransform_default()),
        (StudioPropertyFieldset_module_options.setAttributes =
          setAttributesWithoutAttributes_default()),
        (StudioPropertyFieldset_module_options.insert = insertBySelector_default().bind(
          null,
          'head',
        )),
        (StudioPropertyFieldset_module_options.domAPI = styleDomAPI_default()),
        (StudioPropertyFieldset_module_options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(
        StudioPropertyFieldset_module.A,
        StudioPropertyFieldset_module_options,
      );
      const StudioPropertyFieldset_StudioPropertyFieldset_module =
          StudioPropertyFieldset_module.A && StudioPropertyFieldset_module.A.locals
            ? StudioPropertyFieldset_module.A.locals
            : void 0,
        StudioPropertyFieldset = (0, react.forwardRef)(
          ({ menubar, children, className: givenClass, compact, ...props }, ref) => {
            const className = classnames_default()(
              givenClass,
              StudioPropertyFieldset_StudioPropertyFieldset_module.propertyFieldset,
              compact && StudioPropertyFieldset_StudioPropertyFieldset_module.compact,
            );
            return react.createElement(
              Fieldset.L,
              { size: 'small', ...props, className, ref },
              react.createElement(
                'div',
                {
                  className: StudioPropertyFieldset_StudioPropertyFieldset_module.menubar,
                  role: 'menubar',
                },
                menubar,
              ),
              react.createElement(
                'div',
                { className: StudioPropertyFieldset_StudioPropertyFieldset_module.content },
                children,
              ),
            );
          },
        );
      (StudioPropertyFieldset.displayName = 'StudioProperty.Fieldset'),
        (StudioPropertyFieldset.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioProperty.Fieldset',
        });
      const StudioProperty = {
        Group: StudioPropertyGroup,
        Button: StudioPropertyButton,
        Fieldset: StudioPropertyFieldset,
      };
    },
    './src/components/StudioRecommendedNextAction/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { l0: () => StudioRecommendedNextAction });
      var StudioButton = __webpack_require__('./src/components/StudioButton/index.ts'),
        react = __webpack_require__('../../../node_modules/react/index.js'),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioRecommendedNextAction_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioRecommendedNextAction/StudioRecommendedNextAction.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioRecommendedNextAction_module.A, options);
      const StudioRecommendedNextAction_StudioRecommendedNextAction_module =
        StudioRecommendedNextAction_module.A && StudioRecommendedNextAction_module.A.locals
          ? StudioRecommendedNextAction_module.A.locals
          : void 0;
      var Card = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Card/index.js',
        ),
        Paragraph = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Typography/Paragraph/Paragraph.js',
        ),
        Heading = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Typography/Heading/Heading.js',
        );
      const StudioRecommendedNextAction = ({
        onSave,
        saveButtonText,
        onSkip,
        skipButtonText,
        title,
        description,
        hideSaveButton = !1,
        children,
      }) => {
        const formName = (0, react.useId)();
        return react.createElement(
          'form',
          { name: formName, onSubmit: onSave },
          react.createElement(
            Card.Zp,
            null,
            react.createElement(
              Card.Zp.Header,
              null,
              react.createElement(Heading.D, { size: 'xs' }, title),
            ),
            react.createElement(
              Card.Zp.Content,
              null,
              react.createElement(
                Paragraph.f,
                {
                  size: 'sm',
                  className:
                    StudioRecommendedNextAction_StudioRecommendedNextAction_module.description,
                },
                description,
              ),
              children,
              react.createElement(
                'div',
                {
                  className:
                    StudioRecommendedNextAction_StudioRecommendedNextAction_module.buttonGroup,
                },
                !hideSaveButton &&
                  react.createElement(
                    StudioButton.r,
                    { type: 'submit', variant: 'primary' },
                    saveButtonText,
                  ),
                react.createElement(
                  StudioButton.r,
                  { onClick: onSkip, variant: 'tertiary' },
                  skipButtonText,
                ),
              ),
            ),
          ),
        );
      };
      StudioRecommendedNextAction.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'StudioRecommendedNextAction',
        props: {
          onSave: {
            required: !0,
            tsType: {
              name: 'ReactFormEventHandler',
              raw: 'React.FormEventHandler<HTMLFormElement>',
              elements: [{ name: 'HTMLFormElement' }],
            },
            description: '',
          },
          saveButtonText: { required: !0, tsType: { name: 'string' }, description: '' },
          onSkip: {
            required: !0,
            tsType: {
              name: 'ReactMouseEventHandler',
              raw: 'React.MouseEventHandler<HTMLButtonElement>',
              elements: [{ name: 'HTMLButtonElement' }],
            },
            description: '',
          },
          skipButtonText: { required: !0, tsType: { name: 'string' }, description: '' },
          title: { required: !0, tsType: { name: 'string' }, description: '' },
          description: { required: !0, tsType: { name: 'string' }, description: '' },
          hideSaveButton: {
            required: !1,
            tsType: { name: 'boolean' },
            description: '',
            defaultValue: { value: 'false', computed: !1 },
          },
          children: {
            required: !0,
            tsType: { name: 'ReactReactNode', raw: 'React.ReactNode' },
            description: '',
          },
        },
      };
    },
    './src/components/StudioSectionHeader/StudioSectionHeader.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { n: () => StudioSectionHeader });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        Heading = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Typography/Heading/Heading.js',
        ),
        HelpText = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/HelpText/HelpText.js',
        ),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioSectionHeader_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioSectionHeader/StudioSectionHeader.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioSectionHeader_module.A, options);
      const StudioSectionHeader_StudioSectionHeader_module =
        StudioSectionHeader_module.A && StudioSectionHeader_module.A.locals
          ? StudioSectionHeader_module.A.locals
          : void 0;
      var classnames = __webpack_require__('../../../node_modules/classnames/index.js'),
        classnames_default = __webpack_require__.n(classnames);
      const StudioSectionHeader = (0, react.forwardRef)(
        ({ heading, helpText, icon, className: givenClassName, ...rest }, ref) => {
          const className = classnames_default()(
            givenClassName,
            StudioSectionHeader_StudioSectionHeader_module.container,
          );
          return react.createElement(
            'div',
            { ...rest, className, ref },
            react.createElement(
              'div',
              { className: StudioSectionHeader_StudioSectionHeader_module.iconTitleContainer },
              icon || null,
              react.createElement(
                Heading.D,
                { size: 'xxsmall', level: heading.level ?? 2 },
                heading.text,
              ),
            ),
            helpText &&
              react.createElement(
                HelpText.$,
                { size: 'medium', title: helpText.title },
                helpText.text,
              ),
          );
        },
      );
      (StudioSectionHeader.displayName = 'StudioSectionHeader'),
        (StudioSectionHeader.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioSectionHeader',
          props: {
            icon: {
              required: !1,
              tsType: { name: 'ReactReactNode', raw: 'React.ReactNode' },
              description: '',
            },
            heading: {
              required: !0,
              tsType: {
                name: 'signature',
                type: 'object',
                raw: "{\n  text: string;\n  level?: HeadingProps['level'];\n}",
                signature: {
                  properties: [
                    { key: 'text', value: { name: 'string', required: !0 } },
                    {
                      key: 'level',
                      value: {
                        name: "HeadingProps['level']",
                        raw: "HeadingProps['level']",
                        required: !1,
                      },
                    },
                  ],
                },
              },
              description: '',
            },
            helpText: {
              required: !1,
              tsType: {
                name: 'signature',
                type: 'object',
                raw: '{\n  text: string;\n  title: string;\n}',
                signature: {
                  properties: [
                    { key: 'text', value: { name: 'string', required: !0 } },
                    { key: 'title', value: { name: 'string', required: !0 } },
                  ],
                },
              },
              description: '',
            },
          },
        });
    },
    './src/components/StudioSpinner/StudioSpinner.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { W: () => StudioSpinner });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        Spinner = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Spinner/Spinner.js',
        ),
        Paragraph = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Typography/Paragraph/Paragraph.js',
        ),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioSpinner_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioSpinner/StudioSpinner.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioSpinner_module.A, options);
      const StudioSpinner_StudioSpinner_module =
          StudioSpinner_module.A && StudioSpinner_module.A.locals
            ? StudioSpinner_module.A.locals
            : void 0,
        StudioSpinner = (0, react.forwardRef)(
          (
            {
              spinnerTitle,
              showSpinnerTitle = !1,
              size = 'medium',
              variant = 'interaction',
              ...rest
            },
            ref,
          ) => {
            const spinnerDescriptionId = (0, react.useId)();
            return react.createElement(
              'div',
              { className: StudioSpinner_StudioSpinner_module.spinnerWrapper, ref, ...rest },
              react.createElement(Spinner.y, {
                title: !showSpinnerTitle && spinnerTitle,
                size,
                variant,
                'aria-describedby': showSpinnerTitle ? spinnerDescriptionId : null,
                'data-testid': 'studio-spinner-test-id',
              }),
              showSpinnerTitle &&
                react.createElement(Paragraph.f, { id: spinnerDescriptionId }, spinnerTitle),
            );
          },
        );
      (StudioSpinner.displayName = 'StudioSpinner'),
        (StudioSpinner.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioSpinner',
          props: {
            showSpinnerTitle: { defaultValue: { value: 'false', computed: !1 }, required: !1 },
            size: { defaultValue: { value: "'medium'", computed: !1 }, required: !1 },
            variant: { defaultValue: { value: "'interaction'", computed: !1 }, required: !1 },
          },
        });
    },
    './src/components/StudioSpinner/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, {
        W: () => _StudioSpinner__WEBPACK_IMPORTED_MODULE_0__.W,
      });
      var _StudioSpinner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        './src/components/StudioSpinner/StudioSpinner.tsx',
      );
    },
    './src/components/StudioTableLocalPagination/StudioTableLocalPagination.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { S: () => StudioTableLocalPagination });
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          '../../../node_modules/react/index.js',
        ),
        _StudioTableRemotePagination__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          './src/components/StudioTableRemotePagination/index.ts',
        ),
        _hooks_useTableSorting__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          './src/hooks/useTableSorting.tsx',
        ),
        _StudioTableRemotePagination_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          './src/components/StudioTableRemotePagination/utils.tsx',
        );
      const StudioTableLocalPagination = (0, react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(
        (
          {
            columns,
            rows,
            size = 'medium',
            isLoading = !1,
            loadingText,
            emptyTableFallback,
            pagination,
          },
          ref,
        ) => {
          const [currentPage, setCurrentPage] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(1),
            [pageSize, setPageSize] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(
              pagination?.pageSizeOptions[0] ?? void 0,
            ),
            isSortable = columns.some((column) => column.sortable),
            { handleSorting, sortedRows } = (0,
            _hooks_useTableSorting__WEBPACK_IMPORTED_MODULE_2__.M)(rows, { enable: isSortable }),
            initialRowsToRender = (0,
            _StudioTableRemotePagination_utils__WEBPACK_IMPORTED_MODULE_3__.J)(
              currentPage,
              pageSize,
              rows,
            ),
            [rowsToRender, setRowsToRender] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(
              initialRowsToRender,
            );
          (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
            const newRowsToRender = (0,
            _StudioTableRemotePagination_utils__WEBPACK_IMPORTED_MODULE_3__.J)(
              currentPage,
              pageSize,
              sortedRows || rows,
            );
            setRowsToRender(newRowsToRender);
          }, [sortedRows, rows, currentPage, pageSize]);
          const totalRows = rows.length,
            totalPages = Math.ceil(totalRows / pageSize),
            studioTableRemotePaginationProps = pagination && {
              ...pagination,
              pageSize,
              currentPage,
              totalPages,
              totalRows,
              onPageChange: setCurrentPage,
              onPageSizeChange: setPageSize,
            };
          return react__WEBPACK_IMPORTED_MODULE_0__.createElement(
            _StudioTableRemotePagination__WEBPACK_IMPORTED_MODULE_1__.P,
            {
              columns,
              rows: rowsToRender,
              size,
              isLoading,
              loadingText,
              emptyTableFallback,
              onSortClick: handleSorting,
              pagination: studioTableRemotePaginationProps,
              ref,
            },
          );
        },
      );
      (StudioTableLocalPagination.displayName = 'StudioTableLocalPagination'),
        (StudioTableLocalPagination.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioTableLocalPagination',
          props: {
            size: { defaultValue: { value: "'medium'", computed: !1 }, required: !1 },
            isLoading: { defaultValue: { value: 'false', computed: !1 }, required: !1 },
          },
        });
    },
    './src/components/StudioTableRemotePagination/StudioTableRemotePagination.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { P: () => StudioTableRemotePagination });
      var _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Table/index.js',
        ),
        _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Typography/Label/Label.js',
        ),
        _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/form/NativeSelect/NativeSelect.js',
        ),
        _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Typography/Paragraph/Paragraph.js',
        ),
        _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/Pagination/index.js',
        ),
        react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          '../../../node_modules/react/index.js',
        ),
        _StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          './src/components/StudioTableRemotePagination/StudioTableRemotePagination.module.css',
        ),
        _StudioSpinner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          './src/components/StudioSpinner/index.ts',
        ),
        _hooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__('./src/hooks/index.ts');
      const StudioTableRemotePagination = (0, react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(
        (
          {
            columns,
            rows,
            size = 'medium',
            isLoading = !1,
            loadingText,
            emptyTableFallback,
            onSortClick,
            pagination,
          },
          ref,
        ) => {
          const selectId = (0, react__WEBPACK_IMPORTED_MODULE_0__.useId)(),
            tableBodyRef = (0, react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),
            [spinnerHeight, setSpinnerHeight] = react__WEBPACK_IMPORTED_MODULE_0__.useState('75px'),
            {
              currentPage,
              totalPages,
              totalRows,
              pageSize,
              pageSizeOptions,
              onPageChange: handlePageChange,
              onPageSizeChange: handlePageSizeChange,
              paginationTexts,
            } = pagination || {},
            {
              pageSizeLabel,
              totalRowsText,
              nextButtonAriaLabel,
              previousButtonAriaLabel,
              numberButtonAriaLabel,
            } = paginationTexts || {},
            isTableEmpty = 0 === rows.length && !isLoading,
            isSortingActive = !isTableEmpty && onSortClick,
            isPaginationActive = pagination && totalRows > Math.min(...pageSizeOptions),
            retainedIsPaginationActive = (0, _hooks__WEBPACK_IMPORTED_MODULE_3__.oM)(
              isLoading,
              isPaginationActive,
            ),
            retainedTotalPages = (0, _hooks__WEBPACK_IMPORTED_MODULE_3__.oM)(isLoading, totalPages),
            retainedTotalRows = (0, _hooks__WEBPACK_IMPORTED_MODULE_3__.oM)(isLoading, totalRows);
          return (
            (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
              rows.length > 0 && setSpinnerHeight(tableBodyRef.current.clientHeight + 'px');
            }, [tableBodyRef, rows.length]),
            (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
              totalRows > 0 && isTableEmpty && handlePageChange(1);
            }, [totalRows, isTableEmpty, handlePageChange]),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(
              'div',
              {
                className:
                  _StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_1__.A
                    .componentContainer,
              },
              react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_4__.XI,
                {
                  size,
                  className:
                    _StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_1__.A.table,
                  ref,
                },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                  _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_4__.XI.Head,
                  null,
                  react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                    _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_4__.XI.Row,
                    null,
                    columns.map(({ accessor, heading, sortable, headerCellClass }) =>
                      react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                        _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_4__.XI.HeaderCell,
                        {
                          key: accessor,
                          sortable: isSortingActive && sortable,
                          onSortClick: () => onSortClick(accessor),
                          className: headerCellClass,
                        },
                        heading,
                      ),
                    ),
                  ),
                ),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                  _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_4__.XI.Body,
                  { ref: tableBodyRef },
                  rows.map((row) =>
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                      _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_4__.XI.Row,
                      { key: String(row.id) },
                      columns.map(({ accessor, bodyCellClass, bodyCellFormatter }) =>
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                          _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_4__.XI.Cell,
                          { key: accessor, className: bodyCellClass },
                          bodyCellFormatter ? bodyCellFormatter(row[accessor]) : row[accessor],
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              isTableEmpty &&
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                  'div',
                  {
                    className:
                      _StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_1__.A
                        .emptyTableFallbackContainer,
                  },
                  emptyTableFallback,
                ),
              isLoading &&
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                  _StudioSpinner__WEBPACK_IMPORTED_MODULE_2__.W,
                  { style: { height: spinnerHeight }, spinnerTitle: loadingText },
                ),
              retainedIsPaginationActive &&
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                  'div',
                  {
                    className:
                      _StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_1__.A
                        .paginationContainer,
                  },
                  react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                    'div',
                    {
                      className:
                        _StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_1__.A
                          .selectContainer,
                    },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                      _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_5__.J,
                      {
                        htmlFor: selectId,
                        size,
                        className:
                          _StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_1__.A
                            .selectLabel,
                      },
                      pageSizeLabel,
                    ),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                      _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_6__.m,
                      {
                        id: selectId,
                        size,
                        defaultValue: pageSize,
                        className:
                          _StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_1__.A
                            .select,
                        onChange: (e) => handlePageSizeChange(Number(e.target.value)),
                      },
                      pageSizeOptions.map((pageSizeOption) =>
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                          'option',
                          { key: pageSizeOption, value: pageSizeOption },
                          pageSizeOption,
                        ),
                      ),
                    ),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                      _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_7__.f,
                      {
                        size,
                        className:
                          _StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_1__.A
                            .rowCounter,
                      },
                      totalRowsText,
                      ' ',
                      retainedTotalRows,
                    ),
                  ),
                  retainedTotalPages > 1 &&
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                      _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_8__.dK,
                      {
                        size,
                        currentPage,
                        totalPages: retainedTotalPages,
                        onChange: handlePageChange,
                        nextLabel: nextButtonAriaLabel,
                        previousLabel: previousButtonAriaLabel,
                        itemLabel: numberButtonAriaLabel,
                        hideLabels: !0,
                        compact: !0,
                      },
                    ),
                ),
            )
          );
        },
      );
      (StudioTableRemotePagination.displayName = 'StudioTableRemotePagination'),
        (StudioTableRemotePagination.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioTableRemotePagination',
          props: {
            size: { defaultValue: { value: "'medium'", computed: !1 }, required: !1 },
            isLoading: { defaultValue: { value: 'false', computed: !1 }, required: !1 },
          },
        });
    },
    './src/components/StudioTableRemotePagination/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, {
        P: () => _StudioTableRemotePagination__WEBPACK_IMPORTED_MODULE_0__.P,
      });
      var _StudioTableRemotePagination__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        './src/components/StudioTableRemotePagination/StudioTableRemotePagination.tsx',
      );
    },
    './src/components/StudioTableRemotePagination/utils.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { J: () => getRowsToRender });
      const getRowsToRender = (currentPage, pageSize, rows) => {
        if (!pageSize) return rows;
        const startIndex = (currentPage - 1) * pageSize,
          endIndex = startIndex + pageSize;
        return rows.slice(startIndex, endIndex);
      };
    },
    './src/components/StudioTextarea/StudioTextarea.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { L: () => StudioTextarea });
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          '../../../node_modules/react/index.js',
        ),
        _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/form/Textarea/Textarea.js',
        ),
        _hooks_useTextInputProps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          './src/hooks/useTextInputProps.tsx',
        );
      const StudioTextarea = (0, react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {
        const textareaProps = (0, _hooks_useTextInputProps__WEBPACK_IMPORTED_MODULE_1__.j)(props);
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(
          _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_2__.T,
          { ref, ...textareaProps },
        );
      });
      (StudioTextarea.displayName = 'StudioTextarea'),
        (StudioTextarea.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioTextarea',
        });
    },
    './src/components/StudioTextarea/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, {
        L: () => _StudioTextarea__WEBPACK_IMPORTED_MODULE_0__.L,
      });
      var _StudioTextarea__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        './src/components/StudioTextarea/StudioTextarea.tsx',
      );
    },
    './src/components/StudioTextfield/StudioTextfield.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { e: () => StudioTextfield });
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          '../../../node_modules/react/index.js',
        ),
        _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          '../../../node_modules/@digdir/designsystemet-react/dist/esm/components/form/Textfield/Textfield.js',
        ),
        _hooks_useTextInputProps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          './src/hooks/useTextInputProps.tsx',
        );
      const StudioTextfield = (0, react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {
        const textfieldProps = (0, _hooks_useTextInputProps__WEBPACK_IMPORTED_MODULE_1__.j)(props);
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(
          _digdir_designsystemet_react__WEBPACK_IMPORTED_MODULE_2__.q,
          { ref, ...textfieldProps },
        );
      });
      (StudioTextfield.displayName = 'StudioTextfield'),
        (StudioTextfield.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioTextfield',
        });
    },
    './src/components/StudioTextfield/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, {
        e: () => _StudioTextfield__WEBPACK_IMPORTED_MODULE_0__.e,
      });
      var _StudioTextfield__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        './src/components/StudioTextfield/StudioTextfield.tsx',
      );
    },
    './src/components/StudioToggleableTextfield/StudioTextfieldToggleView/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { h: () => StudioTextfieldToggleView });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        src = __webpack_require__('../studio-icons/src/index.ts'),
        src_0 = __webpack_require__('./src/index.ts'),
        injectStylesIntoStyleTag = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
        ),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        StudioTextfieldToggleView_module = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioToggleableTextfield/StudioTextfieldToggleView/StudioTextfieldToggleView.module.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(StudioTextfieldToggleView_module.A, options);
      const StudioTextfieldToggleView_StudioTextfieldToggleView_module =
        StudioTextfieldToggleView_module.A && StudioTextfieldToggleView_module.A.locals
          ? StudioTextfieldToggleView_module.A.locals
          : void 0;
      var classnames = __webpack_require__('../../../node_modules/classnames/index.js'),
        classnames_default = __webpack_require__.n(classnames);
      const StudioTextfieldToggleView = ({ onClick, children, className: givenClass, ...rest }) => {
        const className = classnames_default()(
          StudioTextfieldToggleView_StudioTextfieldToggleView_module.button,
          givenClass,
        );
        return react.createElement(
          src_0.rO,
          { className, onClick, ...rest },
          react.createElement(
            'span',
            {
              className:
                StudioTextfieldToggleView_StudioTextfieldToggleView_module.viewModeIconsContainer,
            },
            react.createElement(src.KeyVerticalIcon, {
              'data-testid': 'keyIcon',
              'aria-hidden': !0,
            }),
            children,
          ),
          react.createElement(
            'span',
            {
              className: StudioTextfieldToggleView_StudioTextfieldToggleView_module.editIconWrapper,
            },
            react.createElement(src.PencilIcon, {
              className: StudioTextfieldToggleView_StudioTextfieldToggleView_module.editIcon,
              'data-testid': 'editIcon',
              'aria-hidden': !0,
            }),
          ),
        );
      };
      StudioTextfieldToggleView.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'StudioTextfieldToggleView',
        props: {
          icon: { required: !1, tsType: { name: 'ReactNode' }, description: '' },
          iconPlacement: {
            required: !1,
            tsType: {
              name: 'union',
              raw: "'left' | 'right'",
              elements: [
                { name: 'literal', value: "'left'" },
                { name: 'literal', value: "'right'" },
              ],
            },
            description: '',
          },
          color: {
            required: !1,
            tsType: {
              name: 'union',
              raw: "ButtonProps['color'] | 'inverted'",
              elements: [
                { name: "ButtonProps['color']", raw: "ButtonProps['color']" },
                { name: 'literal', value: "'inverted'" },
              ],
            },
            description: '',
          },
        },
      };
    },
    './src/components/StudioToggleableTextfield/StudioToggleableTextfield.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { C: () => StudioToggleableTextfield });
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          '../../../node_modules/react/index.js',
        ),
        _StudioTextfieldToggleView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          './src/components/StudioToggleableTextfield/StudioTextfieldToggleView/index.ts',
        ),
        _StudioIconTextfield__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          './src/components/StudioIconTextfield/index.ts',
        );
      const StudioToggleableTextfield = (0, react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(
        ({ inputProps, viewProps, customValidation, onIsViewMode }, ref) => {
          const [isViewMode, setIsViewMode] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0),
            [errorMessage, setErrorMessage] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(
              null,
            );
          (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
            onIsViewMode && onIsViewMode(isViewMode);
          }, [isViewMode, onIsViewMode]);
          const toggleViewMode = () => {
            setIsViewMode((prevMode) => !prevMode);
          };
          return isViewMode
            ? react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                _StudioTextfieldToggleView__WEBPACK_IMPORTED_MODULE_1__.h,
                { onClick: toggleViewMode, ...viewProps },
              )
            : react__WEBPACK_IMPORTED_MODULE_0__.createElement(
                _StudioIconTextfield__WEBPACK_IMPORTED_MODULE_2__.l,
                {
                  ...inputProps,
                  ref,
                  onBlur: (event) => {
                    errorMessage ||
                      inputProps.error ||
                      (toggleViewMode(), inputProps.onBlur?.(event));
                  },
                  onChange: (event) => {
                    customValidation &&
                      ((event) => {
                        const errorValidationMessage = customValidation(event.target.value);
                        errorValidationMessage
                          ? setErrorMessage(errorValidationMessage)
                          : setErrorMessage(null);
                      })(event),
                      inputProps.onChange?.(event);
                  },
                  error: inputProps.error || errorMessage,
                  autoFocus: !0,
                },
              );
        },
      );
      (StudioToggleableTextfield.displayName = 'StudioToggleableTextfield'),
        (StudioToggleableTextfield.__docgenInfo = {
          description: '',
          methods: [],
          displayName: 'StudioToggleableTextfield',
          props: {
            customValidation: {
              required: !1,
              tsType: {
                name: 'signature',
                type: 'function',
                raw: '(value: string) => string | undefined',
                signature: {
                  arguments: [{ type: { name: 'string' }, name: 'value' }],
                  return: {
                    name: 'union',
                    raw: 'string | undefined',
                    elements: [{ name: 'string' }, { name: 'undefined' }],
                  },
                },
              },
              description: '',
            },
            inputProps: {
              required: !0,
              tsType: {
                name: 'intersection',
                raw: '{\n  icon: React.ReactNode;\n} & StudioTextfieldProps',
                elements: [
                  {
                    name: 'signature',
                    type: 'object',
                    raw: '{\n  icon: React.ReactNode;\n}',
                    signature: {
                      properties: [
                        {
                          key: 'icon',
                          value: { name: 'ReactReactNode', raw: 'React.ReactNode', required: !0 },
                        },
                      ],
                    },
                  },
                  {
                    name: 'intersection',
                    raw: 'HTMLAttributes<E> & DesignSystemProps<E> & AdditionalProps',
                    elements: [
                      {
                        name: 'HTMLAttributes',
                        elements: [{ name: 'HTMLInputElement' }],
                        raw: 'HTMLAttributes<E>',
                      },
                      { name: 'unknown' },
                      {
                        name: 'signature',
                        type: 'object',
                        raw: '{\n  errorAfterBlur?: ReactNode;\n  withAsterisk?: boolean;\n}',
                        signature: {
                          properties: [
                            { key: 'errorAfterBlur', value: { name: 'ReactNode', required: !1 } },
                            { key: 'withAsterisk', value: { name: 'boolean', required: !1 } },
                          ],
                        },
                      },
                    ],
                  },
                ],
              },
              description: '',
            },
            viewProps: {
              required: !0,
              tsType: {
                name: 'Omit',
                elements: [
                  {
                    name: 'intersection',
                    raw: "Omit<ButtonProps, 'icon' | 'color'> & {\n  icon?: ReactNode;\n  iconPlacement?: IconPlacement;\n  color?: ButtonProps['color'] | 'inverted';\n}",
                    elements: [
                      {
                        name: 'Omit',
                        elements: [
                          { name: 'ButtonProps' },
                          {
                            name: 'union',
                            raw: "'icon' | 'color'",
                            elements: [
                              { name: 'literal', value: "'icon'" },
                              { name: 'literal', value: "'color'" },
                            ],
                          },
                        ],
                        raw: "Omit<ButtonProps, 'icon' | 'color'>",
                      },
                      {
                        name: 'signature',
                        type: 'object',
                        raw: "{\n  icon?: ReactNode;\n  iconPlacement?: IconPlacement;\n  color?: ButtonProps['color'] | 'inverted';\n}",
                        signature: {
                          properties: [
                            { key: 'icon', value: { name: 'ReactNode', required: !1 } },
                            {
                              key: 'iconPlacement',
                              value: {
                                name: 'union',
                                raw: "'left' | 'right'",
                                elements: [
                                  { name: 'literal', value: "'left'" },
                                  { name: 'literal', value: "'right'" },
                                ],
                                required: !1,
                              },
                            },
                            {
                              key: 'color',
                              value: {
                                name: 'union',
                                raw: "ButtonProps['color'] | 'inverted'",
                                elements: [
                                  { name: "ButtonProps['color']", raw: "ButtonProps['color']" },
                                  { name: 'literal', value: "'inverted'" },
                                ],
                                required: !1,
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  { name: 'literal', value: "'onClick'" },
                ],
                raw: "Omit<StudioTextfieldToggleViewProps, 'onClick'>",
              },
              description: '',
            },
            onIsViewMode: {
              required: !1,
              tsType: {
                name: 'signature',
                type: 'function',
                raw: '(isViewMode: boolean) => void',
                signature: {
                  arguments: [{ type: { name: 'boolean' }, name: 'isViewMode' }],
                  return: { name: 'void' },
                },
              },
              description: '',
            },
          },
        });
    },
    './src/components/StudioToggleableTextfield/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, {
        C: () => _StudioToggleableTextfield__WEBPACK_IMPORTED_MODULE_0__.C,
      });
      var _StudioToggleableTextfield__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        './src/components/StudioToggleableTextfield/StudioToggleableTextfield.tsx',
      );
      __webpack_require__(
        './src/components/StudioToggleableTextfield/StudioTextfieldToggleView/index.ts',
      );
    },
    './src/components/StudioToggleableTextfieldSchema/StudioToggleableTextfieldSchema.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { X: () => StudioToggleableTextfieldSchema });
      var react = __webpack_require__('../../../node_modules/react/index.js'),
        ajv = __webpack_require__('../../../node_modules/ajv/dist/ajv.js'),
        ajv_default = __webpack_require__.n(ajv);
      class JsonSchemaValidator {
        layoutSchema = null;
        JSONValidator = new (ajv_default())({ allErrors: !0, strict: !1 });
        constructor(layoutSchema, schemas) {
          layoutSchema &&
            ((this.layoutSchema = layoutSchema),
            [...schemas, layoutSchema].forEach((schema) => {
              this.addSchemaToValidator(schema);
            }));
        }
        isPropertyRequired(propertyPath) {
          if (!this.layoutSchema || !propertyPath) return !1;
          const parent = this.getPropertyByPath(
            propertyPath.substring(0, propertyPath.lastIndexOf('/properties')),
          );
          return parent?.required?.includes(propertyPath.split('/').pop());
        }
        validateProperty(propertyId, value) {
          const JSONSchemaValidationErrors = this.validate(propertyId, value),
            firstError = JSONSchemaValidationErrors?.[0];
          return '' === firstError?.instancePath ? firstError?.keyword : null;
        }
        addSchemaToValidator(schema) {
          this.JSONValidator.getSchema(schema?.$id) || this.JSONValidator.addSchema(schema);
        }
        getPropertyByPath(path) {
          return { ...path.split('/').reduce((o, p) => (o || {})[p], this.layoutSchema) };
        }
        validate(schemaId, data) {
          const validateJsonSchema = this.JSONValidator.getSchema(schemaId);
          return validateJsonSchema && (validateJsonSchema(data), 'errors' in validateJsonSchema)
            ? validateJsonSchema.errors
            : null;
        }
      }
      var StudioToggleableTextfield = __webpack_require__(
        './src/components/StudioToggleableTextfield/index.ts',
      );
      const StudioToggleableTextfieldSchema = (0, react.forwardRef)(
        (
          {
            layoutSchema,
            relatedSchemas,
            inputProps,
            propertyPath,
            onError,
            onIsViewMode,
            ...rest
          },
          ref,
        ) => {
          const jsonSchemaValidator = new JsonSchemaValidator(layoutSchema, relatedSchemas),
            propertyId =
              layoutSchema && propertyPath ? `${layoutSchema.$id}#/${propertyPath}` : null,
            handleOnChange = (event) => {
              const validationError = ((event) => {
                const newValue = event.target.value;
                if (jsonSchemaValidator.isPropertyRequired(propertyPath) && 0 === newValue?.length)
                  return createSchemaError('required', 'Property value is required');
                if (propertyId) {
                  const error = jsonSchemaValidator.validateProperty(propertyId, newValue);
                  return error ? createSchemaError(error, 'Result of validate property') : null;
                }
                return null;
              })(event);
              onError?.(validationError || null), inputProps.onChange?.(event);
            };
          return react.createElement(StudioToggleableTextfield.C, {
            ...rest,
            ref,
            inputProps: {
              ...inputProps,
              onChange: (event) => handleOnChange(event),
              error: inputProps.error,
            },
            onIsViewMode,
          });
        },
      );
      StudioToggleableTextfieldSchema.displayName = 'StudioToggleableTextfieldSchema';
      const createSchemaError = (errorCode, details) => ({ errorCode, details });
      StudioToggleableTextfieldSchema.__docgenInfo = {
        description: '',
        methods: [],
        displayName: 'StudioToggleableTextfieldSchema',
        props: {
          layoutSchema: { required: !0, tsType: { name: 'JsonSchema' }, description: '' },
          relatedSchemas: {
            required: !0,
            tsType: { name: 'Array', elements: [{ name: 'JsonSchema' }], raw: 'JsonSchema[]' },
            description: '',
          },
          propertyPath: { required: !0, tsType: { name: 'string' }, description: '' },
          onIsViewMode: {
            required: !1,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(isViewMode: boolean) => void',
              signature: {
                arguments: [{ type: { name: 'boolean' }, name: 'isViewMode' }],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          onError: {
            required: !1,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(error: SchemaValidationError | null) => void',
              signature: {
                arguments: [
                  {
                    type: {
                      name: 'union',
                      raw: 'SchemaValidationError | null',
                      elements: [
                        {
                          name: 'signature',
                          type: 'object',
                          raw: '{\n  errorCode: string;\n  details: string;\n}',
                          signature: {
                            properties: [
                              { key: 'errorCode', value: { name: 'string', required: !0 } },
                              { key: 'details', value: { name: 'string', required: !0 } },
                            ],
                          },
                        },
                        { name: 'null' },
                      ],
                    },
                    name: 'error',
                  },
                ],
                return: { name: 'void' },
              },
            },
            description: '',
          },
          customValidation: {
            required: !1,
            tsType: {
              name: 'signature',
              type: 'function',
              raw: '(value: string) => string | undefined',
              signature: {
                arguments: [{ type: { name: 'string' }, name: 'value' }],
                return: {
                  name: 'union',
                  raw: 'string | undefined',
                  elements: [{ name: 'string' }, { name: 'undefined' }],
                },
              },
            },
            description: '',
          },
          inputProps: {
            required: !0,
            tsType: {
              name: 'intersection',
              raw: '{\n  icon: React.ReactNode;\n} & StudioTextfieldProps',
              elements: [
                {
                  name: 'signature',
                  type: 'object',
                  raw: '{\n  icon: React.ReactNode;\n}',
                  signature: {
                    properties: [
                      {
                        key: 'icon',
                        value: { name: 'ReactReactNode', raw: 'React.ReactNode', required: !0 },
                      },
                    ],
                  },
                },
                {
                  name: 'intersection',
                  raw: 'HTMLAttributes<E> & DesignSystemProps<E> & AdditionalProps',
                  elements: [
                    {
                      name: 'HTMLAttributes',
                      elements: [{ name: 'HTMLInputElement' }],
                      raw: 'HTMLAttributes<E>',
                    },
                    { name: 'unknown' },
                    {
                      name: 'signature',
                      type: 'object',
                      raw: '{\n  errorAfterBlur?: ReactNode;\n  withAsterisk?: boolean;\n}',
                      signature: {
                        properties: [
                          { key: 'errorAfterBlur', value: { name: 'ReactNode', required: !1 } },
                          { key: 'withAsterisk', value: { name: 'boolean', required: !1 } },
                        ],
                      },
                    },
                  ],
                },
              ],
            },
            description: '',
          },
          viewProps: {
            required: !0,
            tsType: {
              name: 'Omit',
              elements: [
                {
                  name: 'intersection',
                  raw: "Omit<ButtonProps, 'icon' | 'color'> & {\n  icon?: ReactNode;\n  iconPlacement?: IconPlacement;\n  color?: ButtonProps['color'] | 'inverted';\n}",
                  elements: [
                    {
                      name: 'Omit',
                      elements: [
                        { name: 'ButtonProps' },
                        {
                          name: 'union',
                          raw: "'icon' | 'color'",
                          elements: [
                            { name: 'literal', value: "'icon'" },
                            { name: 'literal', value: "'color'" },
                          ],
                        },
                      ],
                      raw: "Omit<ButtonProps, 'icon' | 'color'>",
                    },
                    {
                      name: 'signature',
                      type: 'object',
                      raw: "{\n  icon?: ReactNode;\n  iconPlacement?: IconPlacement;\n  color?: ButtonProps['color'] | 'inverted';\n}",
                      signature: {
                        properties: [
                          { key: 'icon', value: { name: 'ReactNode', required: !1 } },
                          {
                            key: 'iconPlacement',
                            value: {
                              name: 'union',
                              raw: "'left' | 'right'",
                              elements: [
                                { name: 'literal', value: "'left'" },
                                { name: 'literal', value: "'right'" },
                              ],
                              required: !1,
                            },
                          },
                          {
                            key: 'color',
                            value: {
                              name: 'union',
                              raw: "ButtonProps['color'] | 'inverted'",
                              elements: [
                                { name: "ButtonProps['color']", raw: "ButtonProps['color']" },
                                { name: 'literal', value: "'inverted'" },
                              ],
                              required: !1,
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
                { name: 'literal', value: "'onClick'" },
              ],
              raw: "Omit<StudioTextfieldToggleViewProps, 'onClick'>",
            },
            description: '',
          },
        },
      };
    },
    './src/components/index.ts': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, {
        rO: () => StudioButton.r,
        i3: () => StudioCenter.i,
        W9: () => StudioLabelWrapper.W,
        eg: () => StudioNativeSelect.e,
        Wq: () => StudioSpinner.W,
      });
      __webpack_require__('./src/components/StudioAnimateHeight/index.ts'),
        __webpack_require__('./src/components/StudioBooleanToggleGroup/index.ts');
      var StudioButton = __webpack_require__('./src/components/StudioButton/index.ts'),
        StudioCenter = __webpack_require__('./src/components/StudioCenter/StudioCenter.tsx'),
        StudioLabelWrapper =
          (__webpack_require__('./src/components/StudioCodeFragment/index.ts'),
          __webpack_require__('./src/components/StudioDecimalInput/index.ts'),
          __webpack_require__('./src/components/StudioDeleteButton/index.ts'),
          __webpack_require__('./src/components/StudioDisplayTile/StudioDisplayTile.tsx'),
          __webpack_require__('./src/components/StudioDropdownMenu/index.ts'),
          __webpack_require__('./src/components/StudioExpression/enums/DataLookupFuncName.ts'),
          __webpack_require__('./src/components/StudioExpression/enums/ExpressionErrorKey.ts'),
          __webpack_require__('./src/components/StudioExpression/enums/GeneralRelationOperator.ts'),
          __webpack_require__('./src/components/StudioExpression/enums/GatewayActionContext.ts'),
          __webpack_require__('./src/components/StudioExpression/enums/InstanceContext.ts'),
          __webpack_require__('./src/components/StudioExpression/enums/KeyLookupFuncName.ts'),
          __webpack_require__('./src/components/StudioExpression/enums/LogicalTupleOperator.ts'),
          __webpack_require__('./src/components/StudioExpression/enums/NumberRelationOperator.ts'),
          __webpack_require__(
            './src/components/StudioExpression/enums/SimpleSubexpressionValueType.ts',
          ),
          __webpack_require__('./src/components/StudioExpression/StudioExpression.tsx'),
          __webpack_require__('./src/components/StudioFileUploader/StudioFileUploader.tsx'),
          __webpack_require__('./src/components/StudioGridSelector/StudioGridSelector.tsx'),
          __webpack_require__('./src/components/StudioIconTextfield/index.ts'),
          __webpack_require__('./src/components/StudioLabelAsParagraph/StudioLabelAsParagraph.tsx'),
          __webpack_require__('./src/components/StudioLabelWrapper/StudioLabelWrapper.tsx')),
        StudioNativeSelect =
          (__webpack_require__('./src/components/StudioModal/StudioModal.tsx'),
          __webpack_require__('./src/components/StudioNativeSelect/StudioNativeSelect.tsx')),
        StudioResizableLayoutElement =
          (__webpack_require__('./src/components/StudioNotFoundPage/StudioNotFoundPage.tsx'),
          __webpack_require__('./src/components/StudioPageError/StudioPageError.tsx'),
          __webpack_require__('./src/components/StudioPageSpinner/StudioPageSpinner.tsx'),
          __webpack_require__('./src/components/StudioPopover/StudioPopover.tsx'),
          __webpack_require__('./src/components/StudioProperty/index.ts'),
          __webpack_require__('./src/components/StudioRecommendedNextAction/index.ts'),
          __webpack_require__(
            './src/components/StudioResizableLayout/StudioResizableLayoutElement/StudioResizableLayoutElement.tsx',
          )),
        StudioResizableLayoutContainer = __webpack_require__(
          './src/components/StudioResizableLayout/StudioResizableLayoutContainer/StudioResizableLayoutContainer.tsx',
        ),
        StudioResizableLayoutContext = __webpack_require__(
          './src/components/StudioResizableLayout/context/StudioResizableLayoutContext.ts',
        );
      StudioResizableLayoutContainer.HV,
        StudioResizableLayoutElement.A,
        StudioResizableLayoutContext.$;
      __webpack_require__('./src/components/StudioSectionHeader/StudioSectionHeader.tsx');
      var StudioSpinner = __webpack_require__('./src/components/StudioSpinner/index.ts');
      __webpack_require__(
        './src/components/StudioTableLocalPagination/StudioTableLocalPagination.tsx',
      ),
        __webpack_require__('./src/components/StudioTableRemotePagination/index.ts'),
        __webpack_require__('./src/components/StudioTextarea/index.ts'),
        __webpack_require__('./src/components/StudioTextfield/index.ts'),
        __webpack_require__('./src/components/StudioToggleableTextfield/index.ts'),
        __webpack_require__(
          './src/components/StudioToggleableTextfieldSchema/StudioToggleableTextfieldSchema.tsx',
        ),
        __webpack_require__('./src/components/StudioTreeView/index.ts');
    },
    './src/hooks/useTableSorting.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { M: () => useTableSorting });
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        '../../../node_modules/react/index.js',
      );
      const useTableSorting = (rows, options) => {
        const [sortColumn, setSortColumn] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),
          [sortDirection, setSortDirection] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(
            'asc',
          ),
          [sortedRows, setSortedRows] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(rows);
        return (
          (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
            if (null !== sortColumn) {
              const newSortedRows = [...rows].sort((rowA, rowB) => {
                let cellA = rowA[sortColumn],
                  cellB = rowB[sortColumn];
                return (
                  'string' == typeof cellA &&
                    'string' == typeof cellB &&
                    ((cellA = cellA.toLowerCase()), (cellB = cellB.toLowerCase())),
                  cellA > cellB
                    ? 'asc' === sortDirection
                      ? 1
                      : -1
                    : cellA < cellB
                      ? 'asc' === sortDirection
                        ? -1
                        : 1
                      : 0
                );
              });
              setSortedRows(newSortedRows);
            } else setSortedRows(rows);
          }, [sortColumn, sortDirection, rows]),
          options.enable
            ? {
                sortedRows,
                handleSorting: (columnKey) => {
                  sortColumn === columnKey
                    ? setSortDirection((prevDirection) =>
                        'asc' === prevDirection ? 'desc' : 'asc',
                      )
                    : (setSortColumn(columnKey), setSortDirection('asc'));
                },
              }
            : { sortedRows: void 0, handleSorting: void 0 }
        );
      };
    },
    './src/hooks/useTextInputProps.tsx': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { j: () => useTextInputProps });
      var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          '../../../node_modules/react/index.js',
        ),
        _components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__('./src/components/index.ts');
      function useTextInputProps(props) {
        const {
            value = '',
            onChange,
            onBlur,
            error,
            errorAfterBlur,
            label,
            withAsterisk,
            ...rest
          } = props,
          [valueState, setValueState] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(value),
          [showError, setShowError] = (0, react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),
          disableError = () => setShowError(!1);
        (0, react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
          value || disableError(), setValueState(value);
        }, [value]);
        return {
          ...rest,
          value: valueState,
          onChange: (event) => {
            setValueState(event.target.value),
              event.target.value || disableError(),
              onChange?.(event);
          },
          onBlur: (event) => {
            event.target.value && setShowError(!0), onBlur?.(event);
          },
          error: showError && errorAfterBlur ? errorAfterBlur : error,
          label: react__WEBPACK_IMPORTED_MODULE_0__.createElement(
            _components__WEBPACK_IMPORTED_MODULE_1__.W9,
            { withAsterisk },
            label,
          ),
        };
      }
    },
    './src/index.ts': (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      __webpack_require__.d(__webpack_exports__, {
        rO: () => components.rO,
        i3: () => components.i3,
        eg: () => components.eg,
        Wq: () => components.Wq,
      });
      var components = __webpack_require__('./src/components/index.ts'),
        injectStylesIntoStyleTag =
          (__webpack_require__('./src/hooks/index.ts'),
          __webpack_require__(
            '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
          )),
        injectStylesIntoStyleTag_default = __webpack_require__.n(injectStylesIntoStyleTag),
        styleDomAPI = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
        ),
        styleDomAPI_default = __webpack_require__.n(styleDomAPI),
        insertBySelector = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
        ),
        insertBySelector_default = __webpack_require__.n(insertBySelector),
        setAttributesWithoutAttributes = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
        ),
        setAttributesWithoutAttributes_default = __webpack_require__.n(
          setAttributesWithoutAttributes,
        ),
        insertStyleElement = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
        ),
        insertStyleElement_default = __webpack_require__.n(insertStyleElement),
        styleTagTransform = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
        ),
        styleTagTransform_default = __webpack_require__.n(styleTagTransform),
        studio_variables = __webpack_require__(
          '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/style/studio-variables.css',
        ),
        options = {};
      (options.styleTagTransform = styleTagTransform_default()),
        (options.setAttributes = setAttributesWithoutAttributes_default()),
        (options.insert = insertBySelector_default().bind(null, 'head')),
        (options.domAPI = styleDomAPI_default()),
        (options.insertStyleElement = insertStyleElement_default());
      injectStylesIntoStyleTag_default()(studio_variables.A, options);
      studio_variables.A && studio_variables.A.locals && studio_variables.A.locals;
    },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioCenter/StudioCenter.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.xmVEGDOolSZsvwnE3mL3 {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n}\n',
          '',
          {
            version: 3,
            sources: ['webpack://./src/components/StudioCenter/StudioCenter.module.css'],
            names: [],
            mappings: 'AAAA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,YAAY;EACZ,WAAW;AACb',
            sourcesContent: [
              '.root {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = { root: 'xmVEGDOolSZsvwnE3mL3' });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioCodeFragment/StudioCodeFragment.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          ".JgCEdzE5cHln1_Du1XTg {\n  flex: 1;\n  background-color: var(--fds-semantic-surface-neutral-subtle);\n  border: 1px solid var(--fds-semantic-border-neutral-subtle);\n  border-radius: var(--fds-border_radius-small);\n  font-family: 'Courier New', monospace;\n  font-size: 0.8em;\n  padding: 0 var(--fds-spacing-1);\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n",
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioCodeFragment/StudioCodeFragment.module.css',
            ],
            names: [],
            mappings:
              'AAAA;EACE,OAAO;EACP,4DAA4D;EAC5D,2DAA2D;EAC3D,6CAA6C;EAC7C,qCAAqC;EACrC,gBAAgB;EAChB,+BAA+B;EAC/B,gBAAgB;EAChB,uBAAuB;AACzB',
            sourcesContent: [
              ".code {\n  flex: 1;\n  background-color: var(--fds-semantic-surface-neutral-subtle);\n  border: 1px solid var(--fds-semantic-border-neutral-subtle);\n  border-radius: var(--fds-border_radius-small);\n  font-family: 'Courier New', monospace;\n  font-size: 0.8em;\n  padding: 0 var(--fds-spacing-1);\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n",
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = { code: 'JgCEdzE5cHln1_Du1XTg' });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioDisplayTile/StudioDisplayTile.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.gR9DuXr4SQj55IpEunGr {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1;\n  gap: var(--fds-spacing-2);\n  padding: var(--fds-spacing-2) var(--fds-spacing-3);\n}\n\n.guJybmjbbTOJx2L9QsVy {\n  display: flex;\n  gap: var(--fds-spacing-1);\n}\n\n.U7kRh_GxfP1hc0hoBM2Z {\n  font-weight: 500;\n}\n\n.EfD8f7y2hhXtRJ6OIiZ6 {\n  display: flex;\n  align-items: center;\n}\n',
          '',
          {
            version: 3,
            sources: ['webpack://./src/components/StudioDisplayTile/StudioDisplayTile.module.css'],
            names: [],
            mappings:
              'AAAA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,OAAO;EACP,yBAAyB;EACzB,kDAAkD;AACpD;;AAEA;EACE,aAAa;EACb,yBAAyB;AAC3B;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB',
            sourcesContent: [
              '.container {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1;\n  gap: var(--fds-spacing-2);\n  padding: var(--fds-spacing-2) var(--fds-spacing-3);\n}\n\n.innerContainer {\n  display: flex;\n  gap: var(--fds-spacing-1);\n}\n\n.label {\n  font-weight: 500;\n}\n\n.iconLabelContainer {\n  display: flex;\n  align-items: center;\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            container: 'gR9DuXr4SQj55IpEunGr',
            innerContainer: 'guJybmjbbTOJx2L9QsVy',
            label: 'U7kRh_GxfP1hc0hoBM2Z',
            iconLabelContainer: 'EfD8f7y2hhXtRJ6OIiZ6',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioDropdownMenu/StudioDropdownMenuItem.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.koNitmgmLAObbyOAs0M8 {\n  display: flex;\n  gap: var(--fds-spacing-1);\n}\n\n.hMvEmBPuZ8xKPKTLc9zI {\n  display: contents;\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioDropdownMenu/StudioDropdownMenuItem.module.css',
            ],
            names: [],
            mappings: 'AAAA;EACE,aAAa;EACb,yBAAyB;AAC3B;;AAEA;EACE,iBAAiB;AACnB',
            sourcesContent: [
              '.studioDropdownMenuItem {\n  display: flex;\n  gap: var(--fds-spacing-1);\n}\n\n.iconWrapper {\n  display: contents;\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            studioDropdownMenuItem: 'koNitmgmLAObbyOAs0M8',
            iconWrapper: 'hMvEmBPuZ8xKPKTLc9zI',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/ManualEditor/ManualEditor.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          ".O_BUprU4wklbYdzwzT_c textarea {\n  font-family: 'Courier New', monospace;\n  font-size: 0.8em;\n}\n",
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioExpression/ManualEditor/ManualEditor.module.css',
            ],
            names: [],
            mappings: 'AAAA;EACE,qCAAqC;EACrC,gBAAgB;AAClB',
            sourcesContent: [
              ".manualEditor textarea {\n  font-family: 'Courier New', monospace;\n  font-size: 0.8em;\n}\n",
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = { manualEditor: 'O_BUprU4wklbYdzwzT_c' });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/BooleanEditor/BooleanEditor.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          ".vmdxxELaozjJeRtdiZKQ {\n  align-items: stretch;\n  display: flex;\n  flex-direction: column;\n  gap: var(--studio-expression-spacing);\n}\n\n.iIsjDrrwmL_Fdg0AN0mB {\n  box-sizing: border-box;\n  width: 100%;\n}\n\n.iIsjDrrwmL_Fdg0AN0mB [role='radiogroup'] {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n}\n\n.iIsjDrrwmL_Fdg0AN0mB button {\n  flex: 1;\n}\n",
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioExpression/SimplifiedEditor/BooleanEditor/BooleanEditor.module.css',
            ],
            names: [],
            mappings:
              'AAAA;EACE,oBAAoB;EACpB,aAAa;EACb,sBAAsB;EACtB,qCAAqC;AACvC;;AAEA;EACE,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,sBAAsB;EACtB,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,OAAO;AACT',
            sourcesContent: [
              ".booleanEditor {\n  align-items: stretch;\n  display: flex;\n  flex-direction: column;\n  gap: var(--studio-expression-spacing);\n}\n\n.toggle {\n  box-sizing: border-box;\n  width: 100%;\n}\n\n.toggle [role='radiogroup'] {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n}\n\n.toggle button {\n  flex: 1;\n}\n",
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            booleanEditor: 'vmdxxELaozjJeRtdiZKQ',
            toggle: 'iIsjDrrwmL_Fdg0AN0mB',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/LogicalExpressionEditor.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.uV3R9B96LJhR3dcBU6Dq {\n  align-items: stretch;\n  display: grid;\n  gap: var(--studio-expression-spacing);\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/LogicalExpressionEditor.module.css',
            ],
            names: [],
            mappings: 'AAAA;EACE,oBAAoB;EACpB,aAAa;EACb,qCAAqC;AACvC',
            sourcesContent: [
              '.fieldsetContent {\n  align-items: stretch;\n  display: grid;\n  gap: var(--studio-expression-spacing);\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = { fieldsetContent: 'uV3R9B96LJhR3dcBU6Dq' });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/LogicalOperatorToggle/LogicalOperatorToggle.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.P6UNh370UmaZ9i6EBDe3 {\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: var(--studio-expression-spacing);\n  width: 100%;\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/LogicalOperatorToggle/LogicalOperatorToggle.module.css',
            ],
            names: [],
            mappings: 'AAAA;EACE,mBAAmB;EACnB,aAAa;EACb,mBAAmB;EACnB,qCAAqC;EACrC,WAAW;AACb',
            sourcesContent: [
              '.logicalOperatorToggle {\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: var(--studio-expression-spacing);\n  width: 100%;\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = { logicalOperatorToggle: 'P6UNh370UmaZ9i6EBDe3' });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/OperatorBetweenSubexpressions/OperatorBetweenSubexpressions.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.J7G5SLcoYnKaZ2Dd6AVh {\n  text-align: center;\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/OperatorBetweenSubexpressions/OperatorBetweenSubexpressions.module.css',
            ],
            names: [],
            mappings: 'AAAA;EACE,kBAAkB;AACpB',
            sourcesContent: ['.operator {\n  text-align: center;\n}\n'],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = { operator: 'J7G5SLcoYnKaZ2Dd6AVh' });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/SubExpressionErrors/SubexpressionErrors.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.Emp9LZrRro8zISncrDO7 {\n  display: flex;\n  flex-direction: column;\n  gap: var(--studio-expression-spacing);\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/SubExpressionErrors/SubexpressionErrors.module.css',
            ],
            names: [],
            mappings: 'AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,qCAAqC;AACvC',
            sourcesContent: [
              '.subexpressionErrors {\n  display: flex;\n  flex-direction: column;\n  gap: var(--studio-expression-spacing);\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = { subexpressionErrors: 'Emp9LZrRro8zISncrDO7' });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/SubExpressionToolbar/SubexpressionToolbar.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.Gy1DQcZwx7HE9FqArrZL {\n  display: flex;\n  flex-direction: row;\n  gap: var(--studio-expression-spacing);\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/SubExpressionToolbar/SubexpressionToolbar.module.css',
            ],
            names: [],
            mappings: 'AAAA;EACE,aAAa;EACb,mBAAmB;EACnB,qCAAqC;AACvC',
            sourcesContent: [
              '.subexpressionToolbar {\n  display: flex;\n  flex-direction: row;\n  gap: var(--studio-expression-spacing);\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = { subexpressionToolbar: 'Gy1DQcZwx7HE9FqArrZL' });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/SubExpressionValueSelector/SubExpressionValueReadonly/SubexpressionValueReadonly.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.zKXmW7vFVQGbOR8GRbZG {\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: var(--fds-spacing-1);\n  justify-content: flex-start;\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/SubExpressionValueSelector/SubExpressionValueReadonly/SubexpressionValueReadonly.module.css',
            ],
            names: [],
            mappings: 'AAAA;EACE,mBAAmB;EACnB,aAAa;EACb,mBAAmB;EACnB,yBAAyB;EACzB,2BAA2B;AAC7B',
            sourcesContent: [
              '.binding {\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: var(--fds-spacing-1);\n  justify-content: flex-start;\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = { binding: 'zKXmW7vFVQGbOR8GRbZG' });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/SubExpressionValueSelector/SubexpressionValueSelector.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.gyftYbko6oXrGFnEorht {\n  display: flex;\n  flex-direction: column;\n  gap: var(--studio-expression-spacing);\n}\n\n.EXa_bQlzoOlsrzYNdgSG {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/SubExpressionValueSelector/SubexpressionValueSelector.module.css',
            ],
            names: [],
            mappings:
              'AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,qCAAqC;AACvC;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,uBAAuB;AACzB',
            sourcesContent: [
              '.fieldsetContent {\n  display: flex;\n  flex-direction: column;\n  gap: var(--studio-expression-spacing);\n}\n\n.wrapper {\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            fieldsetContent: 'gyftYbko6oXrGFnEorht',
            wrapper: 'EXa_bQlzoOlsrzYNdgSG',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/Subexpression.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.SBHcQUQTyIwhTC0hktKW {\n  --background-colour: var(--fds-semantic-surface-neutral-subtle);\n  --border-colour: var(--fds-semantic-border-divider-default);\n\n  background-color: var(--background-colour);\n  border-radius: var(--fds-border_radius-medium);\n  border: 1px solid var(--border-colour);\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.SBHcQUQTyIwhTC0hktKW:not(.PDc5EnQgk_tIE8JCITkJ) .qCZ3AdEQB9aAkGxlz6A9 {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: var(--studio-expression-spacing);\n}\n\n.SBHcQUQTyIwhTC0hktKW.PDc5EnQgk_tIE8JCITkJ .qCZ3AdEQB9aAkGxlz6A9 > * {\n  padding: var(--studio-expression-spacing);\n}\n\n.SBHcQUQTyIwhTC0hktKW.PDc5EnQgk_tIE8JCITkJ .qCZ3AdEQB9aAkGxlz6A9 > *:not(:first-child) {\n  border-top: 1px solid var(--border-colour);\n}\n\n.SBHcQUQTyIwhTC0hktKW.PDc5EnQgk_tIE8JCITkJ .mqbg3hDHLY0W3ueggLYa:hover {\n  background-color: var(--fds-semantic-surface-neutral-subtle-hover);\n}\n\n.SBHcQUQTyIwhTC0hktKW:not(.PDc5EnQgk_tIE8JCITkJ) {\n  padding: var(--studio-expression-spacing);\n}\n\n.SBHcQUQTyIwhTC0hktKW.Fu4vEBrgbxEVGTu4YRqh {\n  --border-colour: var(--fds-semantic-border-danger-default);\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioExpression/SimplifiedEditor/LogicalExpressionEditor/SubExpression/Subexpression.module.css',
            ],
            names: [],
            mappings:
              'AAAA;EACE,+DAA+D;EAC/D,2DAA2D;;EAE3D,0CAA0C;EAC1C,8CAA8C;EAC9C,sCAAsC;EACtC,sBAAsB;EACtB,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,sBAAsB;EACtB,aAAa;EACb,sBAAsB;EACtB,qCAAqC;AACvC;;AAEA;EACE,yCAAyC;AAC3C;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,kEAAkE;AACpE;;AAEA;EACE,yCAAyC;AAC3C;;AAEA;EACE,0DAA0D;AAC5D',
            sourcesContent: [
              '.subexpression {\n  --background-colour: var(--fds-semantic-surface-neutral-subtle);\n  --border-colour: var(--fds-semantic-border-divider-default);\n\n  background-color: var(--background-colour);\n  border-radius: var(--fds-border_radius-medium);\n  border: 1px solid var(--border-colour);\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.subexpression:not(.editMode) .fieldsetContent {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  gap: var(--studio-expression-spacing);\n}\n\n.subexpression.editMode .fieldsetContent > * {\n  padding: var(--studio-expression-spacing);\n}\n\n.subexpression.editMode .fieldsetContent > *:not(:first-child) {\n  border-top: 1px solid var(--border-colour);\n}\n\n.subexpression.editMode .editableItem:hover {\n  background-color: var(--fds-semantic-surface-neutral-subtle-hover);\n}\n\n.subexpression:not(.editMode) {\n  padding: var(--studio-expression-spacing);\n}\n\n.subexpression.hasError {\n  --border-colour: var(--fds-semantic-border-danger-default);\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            subexpression: 'SBHcQUQTyIwhTC0hktKW',
            editMode: 'PDc5EnQgk_tIE8JCITkJ',
            fieldsetContent: 'qCZ3AdEQB9aAkGxlz6A9',
            editableItem: 'mqbg3hDHLY0W3ueggLYa',
            hasError: 'Fu4vEBrgbxEVGTu4YRqh',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioExpression/StudioExpression.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.eX4b2QZNosvQ4M7xIZL9 {\n  background-color: var(--fds-semantic-background-default);\n}\n\n.eX4b2QZNosvQ4M7xIZL9 .P87dnZyDvDsbxs9w7qTd {\n  padding: var(--studio-expression-spacing);\n}\n',
          '',
          {
            version: 3,
            sources: ['webpack://./src/components/StudioExpression/StudioExpression.module.css'],
            names: [],
            mappings: 'AAAA;EACE,wDAAwD;AAC1D;;AAEA;EACE,yCAAyC;AAC3C',
            sourcesContent: [
              '.validExpression {\n  background-color: var(--fds-semantic-background-default);\n}\n\n.validExpression .tabContent {\n  padding: var(--studio-expression-spacing);\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            validExpression: 'eX4b2QZNosvQ4M7xIZL9',
            tabContent: 'P87dnZyDvDsbxs9w7qTd',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioFileUploader/StudioFileUploader.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.Bq4aB6blhAjGX8Tch4I8 {\n  display: none;\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioFileUploader/StudioFileUploader.module.css',
            ],
            names: [],
            mappings: 'AAAA;EACE,aAAa;AACf',
            sourcesContent: ['.fileInput {\n  display: none;\n}\n'],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = { fileInput: 'Bq4aB6blhAjGX8Tch4I8' });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioGridSelector/StudioGridSelector.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.JvnZeoIUFPogXQuKv2xd {\n  position: relative;\n  --outline: 1px solid var(--fds-semantic-border-action-active);\n  --outline-offset: 1px;\n  --border-radius: var(--fds-border_radius-small);\n  --selected-square-colour: var(--fds-semantic-surface-action-second-default);\n  --unselected-square-colour: var(--fds-semantic-surface-action-second-no_fill-active);\n  --hover-square-color: var(--fds-semantic-surface-action-hover);\n  --thumb-width: calc(100% / 12);\n}\n\n.JvnZeoIUFPogXQuKv2xd.fwt_gqAU6WIV_lmYeLS_ {\n  opacity: var(--fds-opacity-disabled);\n}\n\n.GSq81ORblF1g8TgSIRh3 {\n  -webkit-appearance: none;\n  appearance: none;\n  aspect-ratio: 12;\n  border-radius: var(--border-radius);\n  box-sizing: border-box;\n  cursor: pointer;\n  margin: 0;\n  outline-offset: var(--outline-offset);\n  outline: var(--outline);\n  padding: 0;\n  width: 100%;\n}\n\n.GSq81ORblF1g8TgSIRh3:disabled {\n  --thumb-background-colour: var(--fds-semantic-border-neutral-default);\n  cursor: not-allowed;\n}\n\n.GSq81ORblF1g8TgSIRh3::-webkit-slider-runnable-track {\n  aspect-ratio: 12;\n  background: var(--background);\n  border-radius: var(--border-radius);\n}\n\n.GSq81ORblF1g8TgSIRh3::-moz-range-track {\n  aspect-ratio: 12;\n  background: var(--background);\n  border-radius: var(--border-radius);\n}\n\n.GSq81ORblF1g8TgSIRh3::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: var(--thumb-width);\n}\n\n.GSq81ORblF1g8TgSIRh3::-moz-range-thumb {\n  width: var(--thumb-width);\n}\n\ndatalist {\n  align-items: center;\n  aspect-ratio: 12;\n  border-radius: var(--border-radius);\n  color: white;\n  display: flex;\n  justify-content: space-around;\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n\n.XOzj5kmmTantnVW2U29Q {\n  display: flex;\n  width: 100%;\n  text-align: center;\n  justify-content: center;\n  height: 100%;\n  align-items: center;\n}\n\n.XOzj5kmmTantnVW2U29Q:first-child {\n  border-top-left-radius: var(--border-radius);\n  border-bottom-left-radius: var(--border-radius);\n}\n\n.XOzj5kmmTantnVW2U29Q:last-child {\n  border-top-right-radius: var(--border-radius);\n  border-bottom-right-radius: var(--border-radius);\n}\n\n.XOzj5kmmTantnVW2U29Q.jLvZjHoCd_D09Vfmu_73 {\n  color: var(--fds-semantic-surface-action-second-default);\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioGridSelector/StudioGridSelector.module.css',
            ],
            names: [],
            mappings:
              'AAAA;EACE,kBAAkB;EAClB,6DAA6D;EAC7D,qBAAqB;EACrB,+CAA+C;EAC/C,2EAA2E;EAC3E,oFAAoF;EACpF,8DAA8D;EAC9D,8BAA8B;AAChC;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,wBAAwB;EACxB,gBAAgB;EAChB,gBAAgB;EAChB,mCAAmC;EACnC,sBAAsB;EACtB,eAAe;EACf,SAAS;EACT,qCAAqC;EACrC,uBAAuB;EACvB,UAAU;EACV,WAAW;AACb;;AAEA;EACE,qEAAqE;EACrE,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,6BAA6B;EAC7B,mCAAmC;AACrC;;AAEA;EACE,gBAAgB;EAChB,6BAA6B;EAC7B,mCAAmC;AACrC;;AAEA;EACE,wBAAwB;EACxB,gBAAgB;EAChB,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,mBAAmB;EACnB,gBAAgB;EAChB,mCAAmC;EACnC,YAAY;EACZ,aAAa;EACb,6BAA6B;EAC7B,oBAAoB;EACpB,kBAAkB;EAClB,MAAM;EACN,WAAW;AACb;;AAEA;EACE,aAAa;EACb,WAAW;EACX,kBAAkB;EAClB,uBAAuB;EACvB,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,4CAA4C;EAC5C,+CAA+C;AACjD;;AAEA;EACE,6CAA6C;EAC7C,gDAAgD;AAClD;;AAEA;EACE,wDAAwD;AAC1D',
            sourcesContent: [
              '.sliderContainer {\n  position: relative;\n  --outline: 1px solid var(--fds-semantic-border-action-active);\n  --outline-offset: 1px;\n  --border-radius: var(--fds-border_radius-small);\n  --selected-square-colour: var(--fds-semantic-surface-action-second-default);\n  --unselected-square-colour: var(--fds-semantic-surface-action-second-no_fill-active);\n  --hover-square-color: var(--fds-semantic-surface-action-hover);\n  --thumb-width: calc(100% / 12);\n}\n\n.sliderContainer.disabled {\n  opacity: var(--fds-opacity-disabled);\n}\n\n.range {\n  -webkit-appearance: none;\n  appearance: none;\n  aspect-ratio: 12;\n  border-radius: var(--border-radius);\n  box-sizing: border-box;\n  cursor: pointer;\n  margin: 0;\n  outline-offset: var(--outline-offset);\n  outline: var(--outline);\n  padding: 0;\n  width: 100%;\n}\n\n.range:disabled {\n  --thumb-background-colour: var(--fds-semantic-border-neutral-default);\n  cursor: not-allowed;\n}\n\n.range::-webkit-slider-runnable-track {\n  aspect-ratio: 12;\n  background: var(--background);\n  border-radius: var(--border-radius);\n}\n\n.range::-moz-range-track {\n  aspect-ratio: 12;\n  background: var(--background);\n  border-radius: var(--border-radius);\n}\n\n.range::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  width: var(--thumb-width);\n}\n\n.range::-moz-range-thumb {\n  width: var(--thumb-width);\n}\n\ndatalist {\n  align-items: center;\n  aspect-ratio: 12;\n  border-radius: var(--border-radius);\n  color: white;\n  display: flex;\n  justify-content: space-around;\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n\n.option {\n  display: flex;\n  width: 100%;\n  text-align: center;\n  justify-content: center;\n  height: 100%;\n  align-items: center;\n}\n\n.option:first-child {\n  border-top-left-radius: var(--border-radius);\n  border-bottom-left-radius: var(--border-radius);\n}\n\n.option:last-child {\n  border-top-right-radius: var(--border-radius);\n  border-bottom-right-radius: var(--border-radius);\n}\n\n.option.outside {\n  color: var(--fds-semantic-surface-action-second-default);\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            sliderContainer: 'JvnZeoIUFPogXQuKv2xd',
            disabled: 'fwt_gqAU6WIV_lmYeLS_',
            range: 'GSq81ORblF1g8TgSIRh3',
            option: 'XOzj5kmmTantnVW2U29Q',
            outside: 'jLvZjHoCd_D09Vfmu_73',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioIconTextfield/StudioIconTextfield.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.fmMVuifHxDExJCMAPzpo {\n  display: flex;\n  gap: var(--fds-spacing-2);\n}\n\n.zsDxKKw4M0C2l5dIw_96 {\n  color: var(--fds-semantic-text-neutral-default);\n  margin-top: var(--fds-spacing-7);\n  font-size: var(--fds-sizing-6);\n}\n\n.dkgs14lEfPDovrSozqq_ {\n  width: 100%;\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioIconTextfield/StudioIconTextfield.module.css',
            ],
            names: [],
            mappings:
              'AAAA;EACE,aAAa;EACb,yBAAyB;AAC3B;;AAEA;EACE,+CAA+C;EAC/C,gCAAgC;EAChC,8BAA8B;AAChC;;AAEA;EACE,WAAW;AACb',
            sourcesContent: [
              '.container {\n  display: flex;\n  gap: var(--fds-spacing-2);\n}\n\n.prefixIcon {\n  color: var(--fds-semantic-text-neutral-default);\n  margin-top: var(--fds-spacing-7);\n  font-size: var(--fds-sizing-6);\n}\n\n.textfield {\n  width: 100%;\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            container: 'fmMVuifHxDExJCMAPzpo',
            prefixIcon: 'zsDxKKw4M0C2l5dIw_96',
            textfield: 'dkgs14lEfPDovrSozqq_',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioLabelWrapper/StudioLabelWrapper.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          ".d55nB5yNOYJEV8biZwtz.x6viu3gGL0NUOnM7JsvQ::after {\n  content: '*';\n  color: var(--fds-semantic-text-warning-default);\n  margin-left: var(--fds-spacing-1);\n}\n",
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioLabelWrapper/StudioLabelWrapper.module.css',
            ],
            names: [],
            mappings: 'AAAA;EACE,YAAY;EACZ,+CAA+C;EAC/C,iCAAiC;AACnC',
            sourcesContent: [
              ".studioLabelWrapper.withAsterisk::after {\n  content: '*';\n  color: var(--fds-semantic-text-warning-default);\n  margin-left: var(--fds-spacing-1);\n}\n",
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            studioLabelWrapper: 'd55nB5yNOYJEV8biZwtz',
            withAsterisk: 'x6viu3gGL0NUOnM7JsvQ',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioModal/StudioModal.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.ye4KdJFzsUmXANCXOtwC {\n  --modal-min-width: 320px;\n  --modal-min-height: 100px;\n  --modal-max-height: 80vh;\n  --modal-max-width: 80%;\n  --modal-position: 50%;\n  --modal-translate: calc(var(--modal-position) * -1);\n  --heading-height: 70px;\n  --modal-border-size: 1px;\n  --modal-border-radius: var(--fds-border_radius-medium);\n  --modal-content-max-height: calc(\n    var(--modal-max-height) - var(--heading-height) - var(--modal-border-size)\n  );\n  --modal-padding: var(--fds-spacing-3);\n\n  background-color: var(--fds-semantic-background-default);\n  border-radius: var(--modal-border-radius);\n  border: var(--modal-border-size) solid var(--fds-semantic-border-neutral-subtle);\n  height: max-content;\n  left: var(--modal-position);\n  max-height: var(--modal-max-height);\n  max-width: var(--modal-max-width);\n  min-height: var(--modal-min-height);\n  min-width: var(--modal-min-width);\n  position: absolute;\n  top: var(--modal-position);\n  transform: translate(var(--modal-translate), var(--modal-translate));\n  width: max-content;\n}\n\n.nFoI4hqTEEbyQ7ew8sZZ {\n  background-color: rgba(30, 43, 60, 0.5);\n  bottom: 0;\n  left: 0;\n  position: fixed;\n  right: 0;\n  top: 0;\n  z-index: 1000;\n}\n\n.NiKn3wSkGXdNrfMzR26g {\n  align-items: center;\n  background-color: var(--fds-semantic-background-default);\n  border-bottom: 1px solid var(--fds-semantic-border-divider-default);\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  height: var(--heading-height);\n  padding: var(--modal-padding);\n}\n\n.yJsbPMdOI3iS1YnLGQdb {\n  max-height: calc(var(--modal-content-max-height));\n  overflow-y: auto;\n}\n\n.nBb4D4Tgf2OHLx9Tphcg {\n  flex: 1;\n}\n',
          '',
          {
            version: 3,
            sources: ['webpack://./src/components/StudioModal/StudioModal.module.css'],
            names: [],
            mappings:
              'AAAA;EACE,wBAAwB;EACxB,yBAAyB;EACzB,wBAAwB;EACxB,sBAAsB;EACtB,qBAAqB;EACrB,mDAAmD;EACnD,sBAAsB;EACtB,wBAAwB;EACxB,sDAAsD;EACtD;;GAEC;EACD,qCAAqC;;EAErC,wDAAwD;EACxD,yCAAyC;EACzC,gFAAgF;EAChF,mBAAmB;EACnB,2BAA2B;EAC3B,mCAAmC;EACnC,iCAAiC;EACjC,mCAAmC;EACnC,iCAAiC;EACjC,kBAAkB;EAClB,0BAA0B;EAC1B,oEAAoE;EACpE,kBAAkB;AACpB;;AAEA;EACE,uCAAuC;EACvC,SAAS;EACT,OAAO;EACP,eAAe;EACf,QAAQ;EACR,MAAM;EACN,aAAa;AACf;;AAEA;EACE,mBAAmB;EACnB,wDAAwD;EACxD,mEAAmE;EACnE,sBAAsB;EACtB,aAAa;EACb,mBAAmB;EACnB,6BAA6B;EAC7B,6BAA6B;AAC/B;;AAEA;EACE,iDAAiD;EACjD,gBAAgB;AAClB;;AAEA;EACE,OAAO;AACT',
            sourcesContent: [
              '.modal {\n  --modal-min-width: 320px;\n  --modal-min-height: 100px;\n  --modal-max-height: 80vh;\n  --modal-max-width: 80%;\n  --modal-position: 50%;\n  --modal-translate: calc(var(--modal-position) * -1);\n  --heading-height: 70px;\n  --modal-border-size: 1px;\n  --modal-border-radius: var(--fds-border_radius-medium);\n  --modal-content-max-height: calc(\n    var(--modal-max-height) - var(--heading-height) - var(--modal-border-size)\n  );\n  --modal-padding: var(--fds-spacing-3);\n\n  background-color: var(--fds-semantic-background-default);\n  border-radius: var(--modal-border-radius);\n  border: var(--modal-border-size) solid var(--fds-semantic-border-neutral-subtle);\n  height: max-content;\n  left: var(--modal-position);\n  max-height: var(--modal-max-height);\n  max-width: var(--modal-max-width);\n  min-height: var(--modal-min-height);\n  min-width: var(--modal-min-width);\n  position: absolute;\n  top: var(--modal-position);\n  transform: translate(var(--modal-translate), var(--modal-translate));\n  width: max-content;\n}\n\n.modalOverlay {\n  background-color: rgba(30, 43, 60, 0.5);\n  bottom: 0;\n  left: 0;\n  position: fixed;\n  right: 0;\n  top: 0;\n  z-index: 1000;\n}\n\n.headingWrapper {\n  align-items: center;\n  background-color: var(--fds-semantic-background-default);\n  border-bottom: 1px solid var(--fds-semantic-border-divider-default);\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  height: var(--heading-height);\n  padding: var(--modal-padding);\n}\n\n.contentWrapper {\n  max-height: calc(var(--modal-content-max-height));\n  overflow-y: auto;\n}\n\n.title {\n  flex: 1;\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            modal: 'ye4KdJFzsUmXANCXOtwC',
            modalOverlay: 'nFoI4hqTEEbyQ7ew8sZZ',
            headingWrapper: 'NiKn3wSkGXdNrfMzR26g',
            contentWrapper: 'yJsbPMdOI3iS1YnLGQdb',
            title: 'nBb4D4Tgf2OHLx9Tphcg',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioNotFoundPage/StudioNotFoundPage.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/getUrl.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__,
            ),
          ___CSS_LOADER_URL_IMPORT_0___ = new URL(
            __webpack_require__('./src/components/StudioNotFoundPage/images/Background404.png'),
            __webpack_require__.b,
          ),
          ___CSS_LOADER_EXPORT___ =
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
            ),
          ___CSS_LOADER_URL_REPLACEMENT_0___ =
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(
              ___CSS_LOADER_URL_IMPORT_0___,
            );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          `._p_avuggol1BrGt3l8A1 {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: 100vh;\n  background-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});\n  background-size: cover;\n  background-position: center;\n}\n\n.woUSzsQcVdJRAELqtezg {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  max-width: 500px;\n}\n\n.L3UwoROKT2AAMnfYCeBr {\n  white-space: pre-line;\n  padding-top: 10px;\n}\n\n.NGWW9E7eKqbJCV5B3Hwz {\n  margin-top: 30px;\n  margin-inline: 25px;\n}\n\n.YIrGHM7rfiR9Mc_N4lHl {\n  margin-top: 40px;\n}\n`,
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioNotFoundPage/StudioNotFoundPage.module.css',
            ],
            names: [],
            mappings:
              'AAAA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;EACtB,aAAa;EACb,yDAAmD;EACnD,sBAAsB;EACtB,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA;EACE,qBAAqB;EACrB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;AAClB',
            sourcesContent: [
              ".wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: 100vh;\n  background-image: url('./images/Background404.png');\n  background-size: cover;\n  background-position: center;\n}\n\n.contentWrapper {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  max-width: 500px;\n}\n\n.body {\n  white-space: pre-line;\n  padding-top: 10px;\n}\n\n.textWrapper {\n  margin-top: 30px;\n  margin-inline: 25px;\n}\n\n.link {\n  margin-top: 40px;\n}\n",
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            wrapper: '_p_avuggol1BrGt3l8A1',
            contentWrapper: 'woUSzsQcVdJRAELqtezg',
            body: 'L3UwoROKT2AAMnfYCeBr',
            textWrapper: 'NGWW9E7eKqbJCV5B3Hwz',
            link: 'YIrGHM7rfiR9Mc_N4lHl',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioPageError/StudioPageError.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.nGdjMcrEFjuBdt6_vg6A {\n  max-width: 700px;\n  margin: var(--fds-spacing-12) auto 0;\n  margin-top: 50px;\n}\n\n.ORDh6reJzwe2rcs_2X3l {\n  font-family: var(--studio-font-family);\n}\n',
          '',
          {
            version: 3,
            sources: ['webpack://./src/components/StudioPageError/StudioPageError.module.css'],
            names: [],
            mappings: 'AAAA;EACE,gBAAgB;EAChB,oCAAoC;EACpC,gBAAgB;AAClB;;AAEA;EACE,sCAAsC;AACxC',
            sourcesContent: [
              '.container {\n  max-width: 700px;\n  margin: var(--fds-spacing-12) auto 0;\n  margin-top: 50px;\n}\n\n.alertContent {\n  font-family: var(--studio-font-family);\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            container: 'nGdjMcrEFjuBdt6_vg6A',
            alertContent: 'ORDh6reJzwe2rcs_2X3l',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioPageSpinner/StudioPageSpinner.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '._7muONP6yBPpPZWzSFjJ {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.OyTTQ75YUEzQCTa80Cer {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n',
          '',
          {
            version: 3,
            sources: ['webpack://./src/components/StudioPageSpinner/StudioPageSpinner.module.css'],
            names: [],
            mappings:
              'AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;AACd',
            sourcesContent: [
              '.spinnerText {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            spinnerText: '_7muONP6yBPpPZWzSFjJ',
            container: 'OyTTQ75YUEzQCTa80Cer',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioProperty/StudioPropertyButton/StudioPropertyButton.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.IFfN289R1o5_uqtwJu49 {\n  border-radius: 0;\n  display: flex;\n  justify-content: flex-start;\n  margin: calc(-1 * var(--studio-property-button-vertical-spacing)) 0;\n  overflow: hidden;\n  padding: var(--studio-property-button-vertical-spacing) var(--fds-spacing-5);\n}\n\n.IFfN289R1o5_uqtwJu49.hvWqO4umQOnpulCVnC5h .Io8fxWQcIOTixYUlzUFN {\n  color: var(--fds-semantic-text-neutral-default);\n  text-align: left;\n}\n\n.IFfN289R1o5_uqtwJu49.hvWqO4umQOnpulCVnC5h .bSDWWcS_W3UjIBUBhFET {\n  font-weight: 500;\n}\n\n.Io8fxWQcIOTixYUlzUFN {\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n.POrn8HpDpnhtq6OjZ0mH:hover {\n  cursor: auto !important;\n  background-color: transparent !important;\n}\n\n.bSDWWcS_W3UjIBUBhFET,\n.Vv0LXLdJgqaCnRfVXxFN {\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n._jA_OyiZswqSdIrilNw8,\n.dnMVkg9lCzJeIBe5WzTR {\n  flex: 1;\n  text-align: right;\n  display: none;\n}\n\n._jA_OyiZswqSdIrilNw8,\n.IFfN289R1o5_uqtwJu49:hover .dnMVkg9lCzJeIBe5WzTR,\n.IFfN289R1o5_uqtwJu49:focus .dnMVkg9lCzJeIBe5WzTR {\n  display: inline-block;\n}\n\n._jA_OyiZswqSdIrilNw8 {\n  color: black;\n}\n\n.IFfN289R1o5_uqtwJu49.ol7jOdmGy3ys4akR1aAz {\n  padding-left: var(--fds-spacing-3);\n  padding-right: var(--fds-spacing-3);\n}\n\n.IFfN289R1o5_uqtwJu49.F9zxpECXZOdnZpDdFQbK {\n  margin: 0;\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioProperty/StudioPropertyButton/StudioPropertyButton.module.css',
            ],
            names: [],
            mappings:
              'AAAA;EACE,gBAAgB;EAChB,aAAa;EACb,2BAA2B;EAC3B,mEAAmE;EACnE,gBAAgB;EAChB,4EAA4E;AAC9E;;AAEA;EACE,+CAA+C;EAC/C,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;EACvB,wCAAwC;AAC1C;;AAEA;;EAEE,cAAc;EACd,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;;EAEE,OAAO;EACP,iBAAiB;EACjB,aAAa;AACf;;AAEA;;;EAGE,qBAAqB;AACvB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,kCAAkC;EAClC,mCAAmC;AACrC;;AAEA;EACE,SAAS;AACX',
            sourcesContent: [
              '.propertyButton {\n  border-radius: 0;\n  display: flex;\n  justify-content: flex-start;\n  margin: calc(-1 * var(--studio-property-button-vertical-spacing)) 0;\n  overflow: hidden;\n  padding: var(--studio-property-button-vertical-spacing) var(--fds-spacing-5);\n}\n\n.propertyButton.withValue .content {\n  color: var(--fds-semantic-text-neutral-default);\n  text-align: left;\n}\n\n.propertyButton.withValue .property {\n  font-weight: 500;\n}\n\n.content {\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n.readOnly:hover {\n  cursor: auto !important;\n  background-color: transparent !important;\n}\n\n.property,\n.value {\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.readOnlyWrapper,\n.editIconWrapper {\n  flex: 1;\n  text-align: right;\n  display: none;\n}\n\n.readOnlyWrapper,\n.propertyButton:hover .editIconWrapper,\n.propertyButton:focus .editIconWrapper {\n  display: inline-block;\n}\n\n.readOnlyWrapper {\n  color: black;\n}\n\n.propertyButton.compact {\n  padding-left: var(--fds-spacing-3);\n  padding-right: var(--fds-spacing-3);\n}\n\n.propertyButton.withoutNegativeMargin {\n  margin: 0;\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            propertyButton: 'IFfN289R1o5_uqtwJu49',
            withValue: 'hvWqO4umQOnpulCVnC5h',
            content: 'Io8fxWQcIOTixYUlzUFN',
            property: 'bSDWWcS_W3UjIBUBhFET',
            readOnly: 'POrn8HpDpnhtq6OjZ0mH',
            value: 'Vv0LXLdJgqaCnRfVXxFN',
            readOnlyWrapper: '_jA_OyiZswqSdIrilNw8',
            editIconWrapper: 'dnMVkg9lCzJeIBe5WzTR',
            compact: 'ol7jOdmGy3ys4akR1aAz',
            withoutNegativeMargin: 'F9zxpECXZOdnZpDdFQbK',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioProperty/StudioPropertyFieldset/StudioPropertyFieldset.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.wRBrT_YFuFXY1kIrK94K {\n  align-items: center;\n  background-color: var(--fds-semantic-surface-action-first-no_fill);\n  border-radius: var(--fds-border_radius-medium);\n  box-shadow: var(--fds-shadow-small);\n  box-sizing: border-box;\n  display: grid;\n  gap: var(--studio-property-fieldset-spacing);\n  grid-template-columns: [start] 1fr auto [end];\n  margin: 0 var(--fds-spacing-5);\n  overflow: auto;\n  padding: 0;\n  border: 1px solid var(--fds-semantic-border-first-default);\n}\n\n.wRBrT_YFuFXY1kIrK94K legend > * {\n  margin-left: var(--studio-property-fieldset-spacing);\n  margin-top: var(--studio-property-fieldset-spacing);\n  font-weight: 600;\n}\n\n.XDz5Gtp8dB9RT26YFnJQ {\n  align-items: center;\n  display: flex;\n  gap: var(--studio-property-fieldset-spacing);\n  margin-right: var(--studio-property-fieldset-spacing);\n  margin-top: var(--studio-property-fieldset-spacing);\n}\n\n.YeoUnJQCWVH2moWJbVzk {\n  grid-column-end: end;\n  grid-column-start: start;\n}\n\n.wRBrT_YFuFXY1kIrK94K.fFqjDZ4B6ZB0hVBjVYco {\n  --studio-property-fieldset-spacing: var(--fds-spacing-2);\n  margin: 0 var(--fds-spacing-3);\n  box-shadow: none;\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioProperty/StudioPropertyFieldset/StudioPropertyFieldset.module.css',
            ],
            names: [],
            mappings:
              'AAAA;EACE,mBAAmB;EACnB,kEAAkE;EAClE,8CAA8C;EAC9C,mCAAmC;EACnC,sBAAsB;EACtB,aAAa;EACb,4CAA4C;EAC5C,6CAA6C;EAC7C,8BAA8B;EAC9B,cAAc;EACd,UAAU;EACV,0DAA0D;AAC5D;;AAEA;EACE,oDAAoD;EACpD,mDAAmD;EACnD,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;EACnB,aAAa;EACb,4CAA4C;EAC5C,qDAAqD;EACrD,mDAAmD;AACrD;;AAEA;EACE,oBAAoB;EACpB,wBAAwB;AAC1B;;AAEA;EACE,wDAAwD;EACxD,8BAA8B;EAC9B,gBAAgB;AAClB',
            sourcesContent: [
              '.propertyFieldset {\n  align-items: center;\n  background-color: var(--fds-semantic-surface-action-first-no_fill);\n  border-radius: var(--fds-border_radius-medium);\n  box-shadow: var(--fds-shadow-small);\n  box-sizing: border-box;\n  display: grid;\n  gap: var(--studio-property-fieldset-spacing);\n  grid-template-columns: [start] 1fr auto [end];\n  margin: 0 var(--fds-spacing-5);\n  overflow: auto;\n  padding: 0;\n  border: 1px solid var(--fds-semantic-border-first-default);\n}\n\n.propertyFieldset legend > * {\n  margin-left: var(--studio-property-fieldset-spacing);\n  margin-top: var(--studio-property-fieldset-spacing);\n  font-weight: 600;\n}\n\n.menubar {\n  align-items: center;\n  display: flex;\n  gap: var(--studio-property-fieldset-spacing);\n  margin-right: var(--studio-property-fieldset-spacing);\n  margin-top: var(--studio-property-fieldset-spacing);\n}\n\n.content {\n  grid-column-end: end;\n  grid-column-start: start;\n}\n\n.propertyFieldset.compact {\n  --studio-property-fieldset-spacing: var(--fds-spacing-2);\n  margin: 0 var(--fds-spacing-3);\n  box-shadow: none;\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            propertyFieldset: 'wRBrT_YFuFXY1kIrK94K',
            menubar: 'XDz5Gtp8dB9RT26YFnJQ',
            content: 'YeoUnJQCWVH2moWJbVzk',
            compact: 'fFqjDZ4B6ZB0hVBjVYco',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioProperty/StudioPropertyGroup/StudioPropertyGroup.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.ZidRNaK94ESIlkUtbQnu {\n  display: flex;\n  flex-direction: column;\n  gap: var(--studio-property-vertical-gap);\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioProperty/StudioPropertyGroup/StudioPropertyGroup.module.css',
            ],
            names: [],
            mappings: 'AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,wCAAwC;AAC1C',
            sourcesContent: [
              '.listWrapper {\n  display: flex;\n  flex-direction: column;\n  gap: var(--studio-property-vertical-gap);\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = { listWrapper: 'ZidRNaK94ESIlkUtbQnu' });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioRecommendedNextAction/StudioRecommendedNextAction.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '._Hm9N6Kx2Fdo7BxLQhDC {\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-start;\n  gap: var(--fds-spacing-3);\n}\n\n.gqvcO36IJM16yS2T6SEs {\n  margin-top: var(--fds-spacing-2);\n  margin-bottom: var(--fds-spacing-4);\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioRecommendedNextAction/StudioRecommendedNextAction.module.css',
            ],
            names: [],
            mappings:
              'AAAA;EACE,aAAa;EACb,yBAAyB;EACzB,uBAAuB;EACvB,yBAAyB;AAC3B;;AAEA;EACE,gCAAgC;EAChC,mCAAmC;AACrC',
            sourcesContent: [
              '.buttonGroup {\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-start;\n  gap: var(--fds-spacing-3);\n}\n\n.description {\n  margin-top: var(--fds-spacing-2);\n  margin-bottom: var(--fds-spacing-4);\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            buttonGroup: '_Hm9N6Kx2Fdo7BxLQhDC',
            description: 'gqvcO36IJM16yS2T6SEs',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioSectionHeader/StudioSectionHeader.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.W4Aph1LsV5rqArgyRqbn {\n  display: flex;\n  justify-content: space-between;\n  min-height: var(--fds-spacing-12);\n  box-sizing: border-box;\n  max-height: max-content;\n  gap: var(--fds-spacing-2);\n  padding: var(--fds-spacing-2) var(--fds-spacing-3);\n  background-color: var(--fds-semantic-surface-neutral-selected);\n  border-bottom: 1px solid var(--fds-semantic-border-divider-default);\n}\n\n.kGQ6cwQTAKE4h46oEQGA {\n  display: flex;\n  align-items: center;\n  gap: var(--fds-spacing-2);\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioSectionHeader/StudioSectionHeader.module.css',
            ],
            names: [],
            mappings:
              'AAAA;EACE,aAAa;EACb,8BAA8B;EAC9B,iCAAiC;EACjC,sBAAsB;EACtB,uBAAuB;EACvB,yBAAyB;EACzB,kDAAkD;EAClD,8DAA8D;EAC9D,mEAAmE;AACrE;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,yBAAyB;AAC3B',
            sourcesContent: [
              '.container {\n  display: flex;\n  justify-content: space-between;\n  min-height: var(--fds-spacing-12);\n  box-sizing: border-box;\n  max-height: max-content;\n  gap: var(--fds-spacing-2);\n  padding: var(--fds-spacing-2) var(--fds-spacing-3);\n  background-color: var(--fds-semantic-surface-neutral-selected);\n  border-bottom: 1px solid var(--fds-semantic-border-divider-default);\n}\n\n.iconTitleContainer {\n  display: flex;\n  align-items: center;\n  gap: var(--fds-spacing-2);\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            container: 'W4Aph1LsV5rqArgyRqbn',
            iconTitleContainer: 'kGQ6cwQTAKE4h46oEQGA',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioSpinner/StudioSpinner.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.ycOrwEJXAP5HPX_wEwId {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: var(--fds-spacing-1);\n}\n',
          '',
          {
            version: 3,
            sources: ['webpack://./src/components/StudioSpinner/StudioSpinner.module.css'],
            names: [],
            mappings: 'AAAA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,yBAAyB;AAC3B',
            sourcesContent: [
              '.spinnerWrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: var(--fds-spacing-1);\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = { spinnerWrapper: 'ycOrwEJXAP5HPX_wEwId' });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioTableRemotePagination/StudioTableRemotePagination.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.UMazfac70jO1VlaMu_QI {\n  margin-bottom: var(--fds-spacing-10);\n}\n\n.fevY9w_5Z6Px34l72b4m {\n  width: 100%;\n}\n\n.mfUGlhfuEfoMcJUrlW01 {\n  padding: var(--fds-spacing-4);\n  text-align: center;\n}\n\n.mktGUnaD9mAq9cH_bb2a {\n  margin-top: var(--fds-spacing-4);\n  display: flex;\n  justify-content: space-between;\n}\n\n.E7dr99X_4v0fCQNqvEmg {\n  display: flex;\n  gap: var(--fds-spacing-3);\n}\n\n.QASkZLFuRDsxaatp5KsR {\n  margin-block: auto;\n}\n\n.l49vz9xwIUcdzhKZ8Pkz {\n  margin-block: auto;\n  font-weight: normal !important;\n}\n\n.mNNeEUube0UVmqgU8AuL {\n  margin-block: auto;\n  margin-left: var(--fds-spacing-6);\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioTableRemotePagination/StudioTableRemotePagination.module.css',
            ],
            names: [],
            mappings:
              'AAAA;EACE,oCAAoC;AACtC;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,6BAA6B;EAC7B,kBAAkB;AACpB;;AAEA;EACE,gCAAgC;EAChC,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,aAAa;EACb,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,8BAA8B;AAChC;;AAEA;EACE,kBAAkB;EAClB,iCAAiC;AACnC',
            sourcesContent: [
              '.componentContainer {\n  margin-bottom: var(--fds-spacing-10);\n}\n\n.table {\n  width: 100%;\n}\n\n.emptyTableFallbackContainer {\n  padding: var(--fds-spacing-4);\n  text-align: center;\n}\n\n.paginationContainer {\n  margin-top: var(--fds-spacing-4);\n  display: flex;\n  justify-content: space-between;\n}\n\n.selectContainer {\n  display: flex;\n  gap: var(--fds-spacing-3);\n}\n\n.select {\n  margin-block: auto;\n}\n\n.selectLabel {\n  margin-block: auto;\n  font-weight: normal !important;\n}\n\n.rowCounter {\n  margin-block: auto;\n  margin-left: var(--fds-spacing-6);\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            componentContainer: 'UMazfac70jO1VlaMu_QI',
            table: 'fevY9w_5Z6Px34l72b4m',
            emptyTableFallbackContainer: 'mfUGlhfuEfoMcJUrlW01',
            paginationContainer: 'mktGUnaD9mAq9cH_bb2a',
            selectContainer: 'E7dr99X_4v0fCQNqvEmg',
            select: 'QASkZLFuRDsxaatp5KsR',
            selectLabel: 'l49vz9xwIUcdzhKZ8Pkz',
            rowCounter: 'mNNeEUube0UVmqgU8AuL',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioToggleableTextfield/StudioTextfieldToggleView/StudioTextfieldToggleView.module.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          '.XIvD5oeBaDYL349PxKpF {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  border-radius: 0;\n}\n\n.LvHc7EvheivF0goSVEI1 {\n  display: grid;\n  grid-template-columns: auto 1fr;\n  text-align: left;\n  align-items: center;\n  color: var(--fds-semantic-text-neutral-default);\n  width: 100%;\n}\n\n.P1S4sPzljAMFFA2870cE {\n  flex: 1;\n  text-align: right;\n  display: none;\n}\n\n.XIvD5oeBaDYL349PxKpF:hover .P1S4sPzljAMFFA2870cE,\n.XIvD5oeBaDYL349PxKpF:focus .P1S4sPzljAMFFA2870cE {\n  display: flex;\n  align-items: center;\n}\n\n.i0DxjVgvEBC_pys7PjLe {\n  margin-left: auto;\n}\n',
          '',
          {
            version: 3,
            sources: [
              'webpack://./src/components/StudioToggleableTextfield/StudioTextfieldToggleView/StudioTextfieldToggleView.module.css',
            ],
            names: [],
            mappings:
              'AAAA;EACE,aAAa;EACb,2BAA2B;EAC3B,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,+BAA+B;EAC/B,gBAAgB;EAChB,mBAAmB;EACnB,+CAA+C;EAC/C,WAAW;AACb;;AAEA;EACE,OAAO;EACP,iBAAiB;EACjB,aAAa;AACf;;AAEA;;EAEE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;AACnB',
            sourcesContent: [
              '.button {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  border-radius: 0;\n}\n\n.viewModeIconsContainer {\n  display: grid;\n  grid-template-columns: auto 1fr;\n  text-align: left;\n  align-items: center;\n  color: var(--fds-semantic-text-neutral-default);\n  width: 100%;\n}\n\n.editIconWrapper {\n  flex: 1;\n  text-align: right;\n  display: none;\n}\n\n.button:hover .editIconWrapper,\n.button:focus .editIconWrapper {\n  display: flex;\n  align-items: center;\n}\n\n.editIcon {\n  margin-left: auto;\n}\n',
            ],
            sourceRoot: '',
          },
        ]),
          (___CSS_LOADER_EXPORT___.locals = {
            button: 'XIvD5oeBaDYL349PxKpF',
            viewModeIconsContainer: 'LvHc7EvheivF0goSVEI1',
            editIconWrapper: 'P1S4sPzljAMFFA2870cE',
            editIcon: 'i0DxjVgvEBC_pys7PjLe',
          });
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/style/studio-variables.css':
      (module, __webpack_exports__, __webpack_require__) => {
        __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
        var _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/sourceMaps.js',
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default =
            __webpack_require__.n(
              _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__,
            ),
          _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ =
            __webpack_require__(
              '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js',
            ),
          ___CSS_LOADER_EXPORT___ = __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__,
          )()(
            _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default(),
          );
        ___CSS_LOADER_EXPORT___.push([
          module.id,
          ':root {\n  --studio-treeitem-selected-background-colour: var(\n    --fds-semantic-surface-action-first-no_fill-active\n  );\n  --studio-treeitem-vertical-line-colour-root: #000;\n  --studio-treeitem-vertical-line-colour: var(--fds-semantic-border-divider-default);\n  --studio-treeitem-vertical-line-width: 2px;\n  --studio-expression-spacing: var(--fds-spacing-3);\n  --studio-property-vertical-gap: var(--fds-spacing-3);\n  --studio-property-button-vertical-spacing: calc(var(--studio-property-vertical-gap) / 2);\n  --studio-property-fieldset-spacing: var(--fds-spacing-3);\n}\n',
          '',
          {
            version: 3,
            sources: ['webpack://./src/style/studio-variables.css'],
            names: [],
            mappings:
              'AAAA;EACE;;GAEC;EACD,iDAAiD;EACjD,kFAAkF;EAClF,0CAA0C;EAC1C,iDAAiD;EACjD,oDAAoD;EACpD,wFAAwF;EACxF,wDAAwD;AAC1D',
            sourcesContent: [
              ':root {\n  --studio-treeitem-selected-background-colour: var(\n    --fds-semantic-surface-action-first-no_fill-active\n  );\n  --studio-treeitem-vertical-line-colour-root: #000;\n  --studio-treeitem-vertical-line-colour: var(--fds-semantic-border-divider-default);\n  --studio-treeitem-vertical-line-width: 2px;\n  --studio-expression-spacing: var(--fds-spacing-3);\n  --studio-property-vertical-gap: var(--fds-spacing-3);\n  --studio-property-button-vertical-spacing: calc(var(--studio-property-vertical-gap) / 2);\n  --studio-property-fieldset-spacing: var(--fds-spacing-3);\n}\n',
            ],
            sourceRoot: '',
          },
        ]);
        const __WEBPACK_DEFAULT_EXPORT__ = ___CSS_LOADER_EXPORT___;
      },
    './src/components/StudioTableRemotePagination/StudioTableRemotePagination.module.css': (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      __webpack_require__.d(__webpack_exports__, { A: () => __WEBPACK_DEFAULT_EXPORT__ });
      var _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js',
          ),
        _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default =
          __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__,
          ),
        _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleDomAPI.js',
          ),
        _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default =
          __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__,
          ),
        _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertBySelector.js',
          ),
        _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default =
          __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__,
          ),
        _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ =
          __webpack_require__(
            '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js',
          ),
        _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default =
          __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__,
          ),
        _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ =
          __webpack_require__(
            '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/insertStyleElement.js',
          ),
        _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default =
          __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__,
          ),
        _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ =
          __webpack_require__(
            '../../../node_modules/@storybook/builder-webpack5/node_modules/style-loader/dist/runtime/styleTagTransform.js',
          ),
        _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default =
          __webpack_require__.n(
            _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__,
          ),
        _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_6__ =
          __webpack_require__(
            '../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./src/components/StudioTableRemotePagination/StudioTableRemotePagination.module.css',
          ),
        options = {};
      (options.styleTagTransform =
        _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default()),
        (options.setAttributes =
          _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default()),
        (options.insert =
          _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(
            null,
            'head',
          )),
        (options.domAPI =
          _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default()),
        (options.insertStyleElement =
          _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());
      _node_modules_storybook_builder_webpack5_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(
        _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_6__.A,
        options,
      );
      const __WEBPACK_DEFAULT_EXPORT__ =
        _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_6__.A &&
        _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_6__
          .A.locals
          ? _node_modules_storybook_builder_webpack5_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_6_use_1_StudioTableRemotePagination_module_css__WEBPACK_IMPORTED_MODULE_6__
              .A.locals
          : void 0;
    },
    './src/components/StudioNotFoundPage/images/Background404.png': (
      module,
      __unused_webpack_exports,
      __webpack_require__,
    ) => {
      module.exports = __webpack_require__.p + 'static/media/Background404.905445a2.png';
    },
    './src/components/StudioNotFoundPage/images/PCImage404.png': (
      module,
      __unused_webpack_exports,
      __webpack_require__,
    ) => {
      module.exports = __webpack_require__.p + 'static/media/PCImage404.71fd8d42.png';
    },
  },
]);
