{
  "$id": "https://altinncdn.no/schemas/json/component/Map.schema.v1.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "properties": {
    "id": {
      "title": "ID",
      "description": "The component ID. Must be unique within all layouts/pages in a layout-set. Cannot end with <dash><number>.",
      "type": "string",
      "pattern": "^[0-9a-zA-Z][0-9a-zA-Z-]*(-?[a-zA-Z]+|[a-zA-Z][0-9]+|-[0-9]{6,})$"
    },
    "hidden": {
      "title": "Hidden",
      "description": "Boolean value or expression indicating if the component should be hidden. Defaults to false.",
      "default": false,
      "$ref": "expression.schema.v1.json#/definitions/boolean"
    },
    "grid": {
      "properties": {
        "xs": { "$ref": "#/definitions/IGridSize" },
        "sm": { "$ref": "#/definitions/IGridSize" },
        "md": { "$ref": "#/definitions/IGridSize" },
        "lg": { "$ref": "#/definitions/IGridSize" },
        "xl": { "$ref": "#/definitions/IGridSize" },
        "labelGrid": { "$ref": "#/definitions/IGridStyling" },
        "innerGrid": { "$ref": "#/definitions/IGridStyling" }
      }
    },
    "pageBreak": {
      "title": "Page break",
      "description": "Optionally insert page-break before/after component when rendered in PDF",
      "type": "object",
      "properties": {
        "breakBefore": {
          "title": "Page break before",
          "description": "PDF only: Value or expression indicating whether a page break should be added before the component. Can be either: 'auto' (default), 'always', or 'avoid'.",
          "examples": ["auto", "always", "avoid"],
          "default": "auto",
          "$ref": "expression.schema.v1.json#/definitions/string"
        },
        "breakAfter": {
          "title": "Page break after",
          "description": "PDF only: Value or expression indicating whether a page break should be added after the component. Can be either: 'auto' (default), 'always', or 'avoid'.",
          "examples": ["auto", "always", "avoid"],
          "default": "auto",
          "$ref": "expression.schema.v1.json#/definitions/string"
        }
      },
      "additionalProperties": false
    },
    "readOnly": {
      "title": "Read only/disabled?",
      "description": "Boolean value or expression indicating if the component should be read only/disabled. Defaults to false. <br /> <i>Please note that even with read-only fields in components, it may currently be possible to update the field by modifying the request sent to the API or through a direct API call.<i/>",
      "default": false,
      "$ref": "expression.schema.v1.json#/definitions/boolean"
    },
    "required": {
      "title": "Required?",
      "description": "Boolean value or expression indicating if the component should be required. Defaults to false.",
      "default": false,
      "$ref": "expression.schema.v1.json#/definitions/boolean"
    },
    "showValidations": {
      "title": "Validation types",
      "description": "List of validation types to show",
      "type": "array",
      "items": {
        "enum": [
          "Schema",
          "Component",
          "Expression",
          "CustomBackend",
          "Required",
          "AllExceptRequired",
          "All"
        ],
        "type": "string"
      }
    },
    "renderAsSummary": {
      "title": "Render as summary",
      "description": "Boolean value indicating if the component should be rendered as a summary. Defaults to false.",
      "default": false,
      "type": "boolean"
    },
    "forceShowInSummary": {
      "title": "Force show in summary",
      "description": "Will force show the component in a summary even if hideEmptyFields is set to true in the summary component.",
      "default": false,
      "$ref": "expression.schema.v1.json#/definitions/boolean"
    },
    "labelSettings": {
      "title": "ILabelSettings",
      "type": "object",
      "properties": {
        "optionalIndicator": {
          "title": "Optional indicator",
          "description": "Show optional indicator on label",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "type": { "const": "Map" },
    "textResourceBindings": {
      "properties": {
        "title": {
          "title": "Title",
          "description": "Label text/title shown above the component",
          "$ref": "expression.schema.v1.json#/definitions/string"
        },
        "description": {
          "title": "Description",
          "description": "Label description shown above the component, below the title",
          "$ref": "expression.schema.v1.json#/definitions/string"
        },
        "help": {
          "title": "Help text",
          "description": "Help text shown in a tooltip when clicking the help button",
          "$ref": "expression.schema.v1.json#/definitions/string"
        },
        "tableTitle": {
          "title": "Table title",
          "description": "Title used in the table view (overrides the default title)",
          "$ref": "expression.schema.v1.json#/definitions/string"
        },
        "shortName": {
          "title": "Short name (for validation)",
          "description": "Alternative name used for required validation messages (overrides the default title)",
          "$ref": "expression.schema.v1.json#/definitions/string"
        },
        "requiredValidation": {
          "title": "Required validation message",
          "description": "Full validation message shown when the component is required and no value has been entered (overrides both the default and shortName)",
          "$ref": "expression.schema.v1.json#/definitions/string"
        },
        "summaryTitle": {
          "title": "Summary title",
          "description": "Title used in the summary view (overrides the default title)",
          "$ref": "expression.schema.v1.json#/definitions/string"
        },
        "summaryAccessibleTitle": {
          "title": "Accessible summary title",
          "description": "Title used for aria-label on the edit button in the summary view (overrides the default and summary title)",
          "$ref": "expression.schema.v1.json#/definitions/string"
        }
      }
    },
    "dataModelBindings": {
      "title": "IDataModelBindingsForMap",
      "type": "object",
      "properties": {
        "simpleBinding": { "type": "string" },
        "geometries": {
          "description": "Should point to an array of objects like {data: string, label: string}",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "layers": {
      "type": "array",
      "items": {
        "title": "MapLayer",
        "type": "object",
        "properties": {
          "url": {
            "title": "Map layer url",
            "description": "Url to a map tile. {z}/{x}/{y} will be replaced with tile coordinates, {s} will be replaced with a random subdomain if subdomains are given",
            "type": "string"
          },
          "attribution": {
            "title": "Attribution",
            "description": "Ascribing a work or remark to a particular unit for recognition",
            "type": "string"
          },
          "subdomains": {
            "title": "Subdomains",
            "description": "List of subdomains. Used for balancing the load on different map tiling servers. A random one will replace {s} in the defined url.",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["url"],
        "additionalProperties": false
      }
    },
    "centerLocation": {
      "title": "Center location",
      "description": "Center location of the map",
      "type": "object",
      "properties": { "latitude": { "type": "number" }, "longitude": { "type": "number" } },
      "required": ["latitude", "longitude"],
      "additionalProperties": false
    },
    "zoom": { "type": "number" },
    "geometryType": {
      "title": "IGeometryType",
      "default": "GeoJSON",
      "enum": ["GeoJSON", "WKT"],
      "type": "string"
    }
  },
  "required": ["id", "type", "dataModelBindings"],
  "title": "Map component schema"
}
