{
  "$id": "https://altinncdn.no/schemas/json/layout/expression.schema.v1.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Expression",
  "description": "Multi-purpose expression mini-language used to declare dynamic behaviour in Altinn 3 apps",
  "examples": [
    [
      "equals",
      [
        "dataModel",
        "My.Model.Group.Field"
      ],
      "string constant"
    ],
    [
      "greaterThanEq",
      [
        "component",
        "my-component-id"
      ],
      [
        "dataModel",
        "My.Model.Other.Field"
      ]
    ],
    [
      "or",
      [
        "equals",
        "foo",
        "bar"
      ],
      [
        "equals",
        "foo",
        "baz"
      ]
    ],
    [
      "if",
      [
        "or",
        [
          "equals",
          [
            "component",
            "my-component"
          ],
          ""
        ],
        [
          "equals",
          [
            "component",
            "my-component"
          ],
          null
        ]
      ],
      "This will be the value if the condition above is true",
      "else",
      [
        "if",
        [
          "notEquals",
          [
            "component",
            "my-other-component"
          ],
          "illegal value"
        ],
        "This will be the value if the first condition is false, and the second is true",
        "else",
        "This will be the value if all the conditions above are false"
      ]
    ],
    [
      "concat",
      "Are you sure you want to delete ",
      [
        "dataModel",
        "My.Model.Title"
      ],
      "?"
    ]
  ],
  "$ref": "#/$defs/any",
  "$defs": {
    "any": {
      "title": "Any expression",
      "anyOf": [
        {
          "type": "null",
          "title": "Null/missing value"
        },
        {
          "$ref": "#/$defs/strict-string"
        },
        {
          "$ref": "#/$defs/strict-boolean"
        },
        {
          "$ref": "#/$defs/strict-number"
        },
        {
          "$ref": "#/$defs/func-if"
        }
      ]
    },
    "string": {
      "title": "Any expression returning string",
      "anyOf": [
        {
          "type": "null",
          "title": "Null/missing value"
        },
        {
          "$ref": "#/$defs/strict-string"
        },
        {
          "$ref": "#/$defs/func-if"
        },
        {
          "$ref": "#/$defs/strict-number",
          "description": "Numbers can be cast to strings"
        },
        {
          "$ref": "#/$defs/strict-boolean",
          "description": "Booleans can be cast to strings"
        }
      ]
    },
    "strict-string": {
      "title": "Any expression returning string (strict)",
      "anyOf": [
        {
          "type": "string",
          "title": "String constant"
        },
        {
          "$ref": "#/$defs/func-component"
        },
        {
          "$ref": "#/$defs/func-dataModel"
        },
        {
          "$ref": "#/$defs/func-instanceContext"
        },
        {
          "$ref": "#/$defs/func-frontendSettings"
        },
        {
          "$ref": "#/$defs/func-concat"
        },
        {
          "$ref": "#/$defs/func-round"
        },
        {
          "$ref": "#/$defs/func-text"
        },
        {
          "$ref": "#/$defs/func-language"
        },
        {
          "$ref": "#/$defs/func-lowerCase"
        },
        {
          "$ref": "#/$defs/func-upperCase"
        }
      ]
    },
    "boolean": {
      "title": "Any expression returning boolean",
      "anyOf": [
        {
          "type": "null",
          "title": "Null/missing value"
        },
        {
          "$ref": "#/$defs/strict-boolean"
        },
        {
          "$ref": "#/$defs/func-if"
        },
        {
          "$ref": "#/$defs/strict-string",
          "description": "Stringy true/false/0/1 can be cast to boolean"
        },
        {
          "$ref": "#/$defs/strict-number",
          "description": "Numeric 0/1 can be cast to boolean"
        }
      ]
    },
    "strict-boolean": {
      "title": "Any expression returning boolean (strict)",
      "anyOf": [
        {
          "type": "boolean",
          "title": "Boolean constant"
        },
        {
          "$ref": "#/$defs/func-equals"
        },
        {
          "$ref": "#/$defs/func-notEquals"
        },
        {
          "$ref": "#/$defs/func-greaterThan"
        },
        {
          "$ref": "#/$defs/func-greaterThanEq"
        },
        {
          "$ref": "#/$defs/func-lessThan"
        },
        {
          "$ref": "#/$defs/func-lessThanEq"
        },
        {
          "$ref": "#/$defs/func-not"
        },
        {
          "$ref": "#/$defs/func-and"
        },
        {
          "$ref": "#/$defs/func-or"
        },
        {
          "$ref": "#/$defs/func-authContext"
        },
        {
          "$ref": "#/$defs/func-contains"
        },
        {
          "$ref": "#/$defs/func-notContains"
        },
        {
          "$ref": "#/$defs/func-endsWith"
        },
        {
          "$ref": "#/$defs/func-startsWith"
        },
        {
          "$ref": "#/$defs/func-commaContains"
        }
      ]
    },
    "number": {
      "title": "Any expression returning a number",
      "anyOf": [
        {
          "type": "null",
          "title": "Null/missing value"
        },
        {
          "$ref": "#/$defs/strict-number"
        },
        {
          "$ref": "#/$defs/func-if"
        },
        {
          "$ref": "#/$defs/strict-string",
          "description": "Numeric strings can be cast to numbers"
        }
      ]
    },
    "strict-number": {
      "title": "Any expression returning a number (strict)",
      "anyOf": [
        {
          "type": "number",
          "title": "Numeric constant"
        },
        {
          "$ref": "#/$defs/func-stringLength"
        }
      ]
    },
    "func-if": {
      "title": "If/else conditional expression",
      "description": "This function will evaluate and return the result of either branch. If else is not given, null will be returned instead.",
      "anyOf": [
        {
          "$ref": "#/$defs/func-if-with-else"
        },
        {
          "$ref": "#/$defs/func-if-without-else"
        }
      ]
    },
    "func-if-without-else": {
      "type": "array",
      "prefixItems": [
        {
          "const": "if"
        },
        {
          "$ref": "#/$defs/boolean"
        },
        {
          "$ref": "#/$defs/any"
        }
      ],
      "additionalItems": false
    },
    "func-if-with-else": {
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "if"
        },
        {
          "$ref": "#/$defs/boolean"
        },
        {
          "$ref": "#/$defs/any"
        },
        {
          "type": "string",
          "const": "else"
        },
        {
          "$ref": "#/$defs/any"
        }
      ],
      "additionalItems": false
    },
    "func-component": {
      "title": "Component value lookup function",
      "description": "This function will look up a nearby component and its value (only supports simpleBinding currently). Other components can be siblings, or siblings of parent groups.",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "component"
        },
        {
          "$ref": "#/$defs/string"
        }
      ],
      "additionalItems": false
    },
    "func-dataModel": {
      "title": "Data model lookup function",
      "description": "This function will look up a value in the data model, using the JSON dot notation for referencing the data model structure. Relative positioning inside repeating groups will be resolved automatically if no positional indexes are specified.",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "dataModel"
        },
        {
          "$ref": "#/$defs/string"
        }
      ],
      "additionalItems": false
    },
    "func-instanceContext": {
      "title": "Instance context lookup function",
      "description": "This function can be used to lookup a value from the instance context",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "instanceContext"
        },
        {
          "enum": [
            "appId",
            "instanceId",
            "instanceOwnerPartyId"
          ]
        }
      ],
      "additionalItems": false
    },
    "func-authContext": {
      "title": "Auth context lookup function",
      "description": "This function can be used to check the users permissions on the current process step.",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "authContext"
        },
        {
          "enum": [
            "read",
            "write",
            "instantiate",
            "confirm",
            "sign",
            "reject"
          ]
        }
      ],
      "additionalItems": false
    },
    "func-frontendSettings": {
      "title": "Frontend settings lookup function",
      "description": "This function can be used to lookup a value from frontendSettings (only supports scalar values, no objects or arrays)",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "frontendSettings"
        },
        {
          "$ref": "#/$defs/string"
        }
      ],
      "additionalItems": false
    },
    "func-concat": {
      "title": "String concatenation function",
      "description": "This function will concatenate strings or numbers, producing a final string as a result",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "concat"
        }
      ],
      "additionalItems": {
        "$ref": "#/$defs/string"
      }
    },
    "func-equals": {
      "title": "Equals function",
      "description": "This function compares two values (or expressions) for equality",
      "type": "array",
      "prefixItems": [
        {
          "const": "equals"
        },
        {
          "$ref": "#/$defs/any"
        },
        {
          "$ref": "#/$defs/any"
        }
      ],
      "additionalItems": false
    },
    "func-notEquals": {
      "title": "Not equals function",
      "description": "This function compares two values (or expressions) for inequality",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "notEquals"
        },
        {
          "$ref": "#/$defs/any"
        },
        {
          "$ref": "#/$defs/any"
        }
      ],
      "additionalItems": false
    },
    "func-not": {
      "title": "Not function",
      "description": "This function inverts a boolean, returning true if given false, and vice versa.",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "not"
        },
        {
          "$ref": "#/$defs/boolean"
        }
      ],
      "additionalItems": false
    },
    "func-greaterThan": {
      "title": "Greater than function",
      "description": "This function compares two values (or expressions), returning true if the first argument is greater than the second",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "greaterThan"
        },
        {
          "$ref": "#/$defs/number"
        },
        {
          "$ref": "#/$defs/number"
        }
      ],
      "additionalItems": false
    },
    "func-greaterThanEq": {
      "title": "Greater than or equals function",
      "description": "This function compares two values (or expressions), returning true if the first argument is greater than or equals the second",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "greaterThanEq"
        },
        {
          "$ref": "#/$defs/number"
        },
        {
          "$ref": "#/$defs/number"
        }
      ],
      "additionalItems": false
    },
    "func-lessThan": {
      "title": "Less than function",
      "description": "This function compares two values (or expressions), returning true if the first argument is less than the second",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "lessThan"
        },
        {
          "$ref": "#/$defs/number"
        },
        {
          "$ref": "#/$defs/number"
        }
      ],
      "additionalItems": false
    },
    "func-lessThanEq": {
      "title": "Less than or equals function",
      "description": "This function compares two values (or expressions), returning true if the first argument is less than or equals the second",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "lessThanEq"
        },
        {
          "$ref": "#/$defs/number"
        },
        {
          "$ref": "#/$defs/number"
        }
      ],
      "additionalItems": false
    },
    "func-and": {
      "title": "And combinator",
      "description": "This function returns true if all the arguments (or expressions) are true",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "and"
        },
        {
          "$ref": "#/$defs/boolean"
        }
      ],
      "additionalItems": {
        "$ref": "#/$defs/boolean"
      }
    },
    "func-or": {
      "title": "Or combinator",
      "description": "This function returns true if any of the arguments (or expressions) are true",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "or"
        },
        {
          "$ref": "#/$defs/boolean"
        }
      ],
      "additionalItems": {
        "$ref": "#/$defs/boolean"
      }
    },
    "func-round": {
      "title": "Round function",
      "description": "This function rounds a number to the nearest integer, or to the specified number of decimals",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "round"
        },
        {
          "$ref": "#/$defs/number"
        },
        {
          "$ref": "#/$defs/number"
        }
      ],
      "additionalItems": false
    },
    "func-text": {
      "title": "Text function",
      "description": "This function retrieves the value of a text resource key, or returns the key if no text resource is found",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "text"
        },
        {
          "$ref": "#/$defs/string"
        }
      ],
      "additionalItems": false
    },
    "func-language": {
      "title": "Language function",
      "description": "This function retrieves the current language (usually 'nb', 'nn' or 'en')",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "language"
        }
      ],
      "additionalItems": false
    },
    "func-contains": {
      "title": "Contains function",
      "description": "This function checks if the first string contains the second string",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "contains"
        },
        {
          "$ref": "#/$defs/string"
        },
        {
          "$ref": "#/$defs/string"
        }
      ],
      "additionalItems": false
    },
    "func-notContains": {
      "title": "Not contains function",
      "description": "This function checks if the first string does not contain the second string",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "notContains"
        },
        {
          "$ref": "#/$defs/string"
        },
        {
          "$ref": "#/$defs/string"
        }
      ],
      "additionalItems": false
    },
    "func-startsWith": {
      "title": "Starts with function",
      "description": "This function checks if the first string starts with the second string",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "startsWith"
        },
        {
          "$ref": "#/$defs/string"
        },
        {
          "$ref": "#/$defs/string"
        }
      ],
      "additionalItems": false
    },
    "func-endsWith": {
      "title": "Ends with function",
      "description": "This function checks if the first string ends with the second string",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "endsWith"
        },
        {
          "$ref": "#/$defs/string"
        },
        {
          "$ref": "#/$defs/string"
        }
      ],
      "additionalItems": false
    },
    "func-stringLength": {
      "title": "String length function",
      "description": "This function returns the length of a string",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "stringLength"
        },
        {
          "$ref": "#/$defs/string"
        }
      ],
      "additionalItems": false
    },
    "func-commaContains": {
      "title": "Comma contains function",
      "description": "This function checks if the first comma-separated string contains the second string",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "commaContains"
        },
        {
          "$ref": "#/$defs/string"
        },
        {
          "$ref": "#/$defs/string"
        }
      ],
      "additionalItems": false
    },
    "func-lowerCase": {
      "title": "Lower case function",
      "description": "This function converts a string to lower case",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "lowerCase"
        },
        {
          "$ref": "#/$defs/string"
        }
      ],
      "additionalItems": false
    },
    "func-upperCase": {
      "title": "Upper case function",
      "description": "This function converts a string to upper case",
      "type": "array",
      "prefixItems": [
        {
          "type": "string",
          "const": "upperCase"
        },
        {
          "$ref": "#/$defs/string"
        }
      ],
      "additionalItems": false
    }
  }
}
