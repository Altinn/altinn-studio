/*
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.1.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Altinn.Studio.Designer.RepositoryClient.Model
{
    /// <summary>
    /// CreateEmailOption options when creating email addresses
    /// </summary>
    [DataContract]
    public partial class CreateEmailOption : IEquatable<CreateEmailOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEmailOption" /> class.
        /// </summary>
        /// <param name="Emails">email addresses to add.</param>
        public CreateEmailOption(List<string> Emails = default(List<string>))
        {
            this.Emails = Emails;
        }

        /// <summary>
        /// The list of emails
        /// </summary>
        [DataMember(Name = "emails", EmitDefaultValue = false)]
        public List<string> Emails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateEmailOption {\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateEmailOption);
        }

        /// <summary>
        /// Returns true if CreateEmailOption instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateEmailOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateEmailOption input)
        {
            if (input == null)
            {
                return false;
            }

            return
                    this.Emails == input.Emails ||
                    (this.Emails != null &&
                    this.Emails.SequenceEqual(input.Emails));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // Overflow is fine, just wrap
            unchecked
            {
                int hashCode = 41;
                if (this.Emails != null)
                {
                    hashCode = (hashCode * 59) + this.Emails.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
