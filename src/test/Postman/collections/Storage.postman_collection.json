{
	"info": {
		"_postman_id": "cb9e79b1-cede-497a-9567-262efefef28e",
		"name": "Storage",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SetUp Cookies",
			"item": [
				{
					"name": "Authenticate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "405f0af9-b1dd-42cb-acad-8835c9f15dd3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4c59095-e73f-4b65-9290-a748b25c7357",
								"exec": [
									"const jar = pm.cookies.jar();",
									"var domain = pm.environment.get(\"envUrl\");",
									"jar.clear(domain, function (error){",
									"    if(error)",
									"    {",
									"        console.log(\"error\",error);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/hal+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\": \"{{testUserName}}\",\r\n    \"UserPassword\": \"{{testUserPassword}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{envUrl}}/api/authentication/authenticatewithpassword",
							"protocol": "https",
							"host": [
								"{{envUrl}}"
							],
							"path": [
								"api",
								"authentication",
								"authenticatewithpassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Runtime Cookie",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/authentication/api/v1/authentication?goto=https://{{org}}.apps.{{envUrl}}/{{org}}/{{app}}/",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"authentication",
								"api",
								"v1",
								"authentication"
							],
							"query": [
								{
									"key": "goto",
									"value": "https://{{org}}.apps.{{envUrl}}/{{org}}/{{app}}/"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Party Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6505cb59-4588-4d0c-af60-b5faa7dcb8c1",
								"exec": [
									"if(pm.response.code == 200)",
									"{",
									"    var jsonData = pm.response.json();",
									"    var partyId = jsonData.partyId;",
									"    pm.environment.set(\"instanceOwnerId\",partyId);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{org}}.apps.{{envUrl}}/{{org}}/{{app}}/api/v1/profile/user",
							"protocol": "https",
							"host": [
								"{{org}}",
								"apps",
								"{{envUrl}}"
							],
							"path": [
								"{{org}}",
								"{{app}}",
								"api",
								"v1",
								"profile",
								"user"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Applications",
			"item": [
				{
					"name": "POST Create App",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c41aa913-9f1a-4cc8-87dc-d896ef72317c",
								"exec": [
									"var current_timestamp = new Date();\r",
									"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1b3da8e9-45b9-477f-aef7-0e2ede88ed12",
								"exec": [
									"pm.test(\"Platform - Storage - Application - Create App - Not possible for a person - Status - 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{org}}/{{app}}\",\r\n    \"versionId\": \"1\",\r\n    \"org\": \"{{org}}\",\r\n    \"title\": {\r\n        \"nb\": \"{{app}}\"\r\n    },\r\n    \"validFrom\": \"{{current_timestamp}}\",\r\n    \"dataTypes\": [\r\n        {\r\n            \"id\": \"default\",\r\n            \"allowedContentTypes\": [\r\n                \"application/xml\"\r\n            ],\r\n            \"appLogic\": {\r\n                \"autoCreate\": true,\r\n                \"classRef\": \"Altinn.App.Models.flyttemelding\",\r\n                \"schemaRef\": null\r\n            },\r\n            \"taskId\": \"Task_1\",\r\n            \"maxCount\": 0,\r\n            \"minCount\": 0\r\n        },\r\n        {\r\n            \"id\": \"ref-data-as-pdf\",\r\n            \"allowedContentTypes\": [\r\n                \"application/pdf\"\r\n            ],\r\n            \"taskId\": \"Task_1\",\r\n            \"maxCount\": 1,\r\n            \"minCount\": 1\r\n        },\r\n        {\r\n            \"id\": \"attachment\",\r\n            \"allowedContentTypes\": [\r\n                \"application/octet-stream\"\r\n            ],\r\n            \"appLogic\": {\r\n                \"autoCreate\": false\r\n            },\r\n            \"taskId\": \"Task_1\",\r\n            \"maxCount\": 1,\r\n            \"minCount\": 0\r\n        }\r\n    ],\r\n    \"partyTypesAllowed\": {\r\n        \"bankruptcyEstate\": false,\r\n        \"organisation\": false,\r\n        \"person\": false,\r\n        \"subUnit\": false\r\n    },\r\n    \"created\": \"{{current_timestamp}}\",\r\n    \"lastChanged\": \"{{current_timestamp}}\"\r\n}"
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/applications?appId={{org}}/{{app}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"applications"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{org}}/{{app}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Apps",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce37f250-8e44-4034-9ec3-b9ee5feac332",
								"exec": [
									"pm.test(\"Platform - Storage - Applications - GET All Apps - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/applications/{{org}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"applications",
								"{{org}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET App by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce37f250-8e44-4034-9ec3-b9ee5feac332",
								"exec": [
									"pm.test(\"Platform - Storage - Applications - Get App by name - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Platform - Storage - Applications - Get App by name - Content - Matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var org = pm.environment.get(\"org\");\r",
									"    var app = pm.environment.get(\"app\");\r",
									"    var expectedAppName = org.toString() + '/' + app.toString();\r",
									"    pm.expect(jsonData.id).to.eql(expectedAppName);\r",
									"    var dataTypes = jsonData.dataTypes;\r",
									"    var dataTypesCount = dataTypes.length;\r",
									"    for(var i=0; i<dataTypesCount; i++){\r",
									"        if (dataTypes[i].id !== \"default\" && dataTypes[i].id !== \"ref-data-as-pdf\"){\r",
									"            pm.environment.set(\"attachmentElementType\", dataTypes[i].id);\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/applications/{{org}}/{{app}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"applications",
								"{{org}}",
								"{{app}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Edit App",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7762b309-0916-44bc-bb7c-5fb2dc8e639b",
								"exec": [
									"pm.test(\"Platform - Storage - Application - Edit  App - Not possible for a person - Status - 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{org}}/{{app}}\",\r\n    \"versionId\": \"2\",\r\n    \"org\": \"{{org}}\",\r\n    \"title\": {\r\n        \"nb\": \"{{app}}\"\r\n    },\r\n    \"validFrom\": \"{{current_timestamp}}\",\r\n    \"dataTypes\": [\r\n        {\r\n            \"id\": \"default\",\r\n            \"allowedContentTypes\": [\r\n                \"application/xml\"\r\n            ],\r\n            \"appLogic\": {\r\n                \"autoCreate\": true,\r\n                \"classRef\": \"Altinn.App.Models.flyttemelding\",\r\n                \"schemaRef\": null\r\n            },\r\n            \"taskId\": \"Task_1\",\r\n            \"maxCount\": 0,\r\n            \"minCount\": 0\r\n        },\r\n        {\r\n            \"id\": \"ref-data-as-pdf\",\r\n            \"allowedContentTypes\": [\r\n                \"application/pdf\"\r\n            ],\r\n            \"taskId\": \"Task_1\",\r\n            \"maxCount\": 1,\r\n            \"minCount\": 1\r\n        },\r\n        {\r\n            \"id\": \"attachment\",\r\n            \"allowedContentTypes\": [\r\n                \"application/octet-stream\"\r\n            ],\r\n            \"appLogic\": {\r\n                \"autoCreate\": false\r\n            },\r\n            \"taskId\": \"Task_1\",\r\n            \"maxCount\": 1,\r\n            \"minCount\": 0,\r\n            \"maxSize\": 2\r\n        }\r\n    ],\r\n    \"partyTypesAllowed\": {\r\n        \"bankruptcyEstate\": false,\r\n        \"organisation\": true,\r\n        \"person\": true,\r\n        \"subUnit\": false\r\n    },\r\n    \"created\": \"{{current_timestamp}}\",\r\n    \"lastChanged\": \"{{current_timestamp}}\"\r\n}"
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/applications/{{org}}/{{app}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"applications",
								"{{org}}",
								"{{app}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Instances",
			"item": [
				{
					"name": "POST App instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0c6b00b-4213-4095-8a83-f9cf7cc5769e",
								"exec": [
									"pm.test(\"Platform - Storage - Instances - Add app instance - Status - 201 \", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonData = pm.response.json();\r",
									"    if(pm.expect(jsonData.instanceOwnerId).not.eql(null))\r",
									"    {\r",
									"        var instanceId = jsonData.id;\r",
									"        instanceId = instanceId.toString();\r",
									"        instanceId = instanceId.split('/');\r",
									"        instanceId = instanceId[1];\r",
									"        pm.environment.set('instanceId',instanceId);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d7b24a19-9093-462e-9b6f-a6fd1d7df287",
								"exec": [
									"pm.environment.set(\"instanceId\",\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"instanceOwner\": {\n    \t\"partyId\": \"{{instanceOwnerId}}\"\n    },\n    \"appOwner\":{\n    \t\"labels\" : [ \"gr\", \"x2\" ]\n    },\n    \"appId\" : \"{{org}}/{{app}}\",\n    \"dueBefore\": \"2019-06-01T12:00:00Z\",\n    \"visibleAfter\": \"2019-05-20T00:00:00Z\",\n    \"title\": { \"nb\": \"Arbeidsmelding\" },\n    \"process\": {\n        \"started\": \"{{current_timestamp}}\",\n        \"startEvent\": \"StartEvent_1\",\n        \"currentTask\": {\n            \"flow\": 2,\n            \"started\": \"{{current_timestamp}}\",\n            \"elementId\": \"Task_1\",\n            \"name\": \"Utfylling\",\n            \"altinnTaskType\": \"data\",\n            \"ended\": null,\n            \"validated\": null\n        },\n        \"ended\": null,\n        \"endEvent\": null\n    }\n}"
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances?appId={{org}}/{{app}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{org}}/{{app}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46ea587-c309-4247-a8f5-4a36f278ff82",
								"exec": [
									"pm.test(\"Platform - Storage - Instances - Get All instances - Not allowed for instanceOwner - Status - 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Instances by InstanceOwnerID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46ea587-c309-4247-a8f5-4a36f278ff82",
								"exec": [
									"pm.test(\"Platform - Storage - Instances - Get Instance by onwerId - Not allowed for instanceOwner- Status - 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances?instanceOwner.partyId={{instanceOwnerId}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances"
							],
							"query": [
								{
									"key": "instanceOwner.partyId",
									"value": "{{instanceOwnerId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Instances with date filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46ea587-c309-4247-a8f5-4a36f278ff82",
								"exec": [
									"pm.test(\"Platform - Storage - Instances - Get Instances with Date filter - Not allowed for instanceOwner - Status - 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances?appId={{org}}/{{app}}&created=gt:{{current_timestamp}}&lastChanged=gte:2019-08-12T11:20:10.2003387Z",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{org}}/{{app}}"
								},
								{
									"key": "created",
									"value": "gt:{{current_timestamp}}"
								},
								{
									"key": "lastChanged",
									"value": "gte:2019-08-12T11:20:10.2003387Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Instances with process filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46ea587-c309-4247-a8f5-4a36f278ff82",
								"exec": [
									"pm.test(\"Platform - Storage - Instances - Get Instances with Process filter - Not allowed for instanceOwner - Status - 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances?appId={{org}}/{{app}}&process.currentTask={{processElementId}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{org}}/{{app}}"
								},
								{
									"key": "process.currentTask",
									"value": "{{processElementId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Edit App instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0c6b00b-4213-4095-8a83-f9cf7cc5769e",
								"exec": [
									"pm.test(\"Platform - Storage - Instances - Edit Instance - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"labels\" : [ \"gr\", \"asdf\" ],\r\n    \"appId\" : \"{{org}}/{{app}}\",\r\n    \"dueDateTime\": \"2019-06-01T12:00:00Z\",\r\n    \"visibleDateTime\": \"2019-05-20T00:00:00Z\",\r\n    \"presentationField\": { \"nb\": \"Arbeidsmelding\" }\r\n}"
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET App Instance by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0c6b00b-4213-4095-8a83-f9cf7cc5769e",
								"exec": [
									"pm.test(\"Platform - Storage - Instances - Get Instance by Id - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data",
			"item": [
				{
					"name": "POST Add Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e0a8157-5f87-46a5-8df1-f3097c021797",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Data - Add Instance Data - Status - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.environment.set(\"dataGuid\",pm.response.json().id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "864b3eba-7a74-4650-9406-35b0797e1b4a",
								"exec": [
									"pm.environment.set(\"dataGuid\",\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/data?dataType=default",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"data"
							],
							"query": [
								{
									"key": "dataType",
									"value": "default"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Instance Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7a4e821-33f0-4c30-b93b-d8b0b0a2b53a",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Data - Get Instance Data - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    if(pm.expect(jsonData[0].id).not.eql(null))\r",
									"    {\r",
									"        pm.environment.set('dataId',jsonData[0].id);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/dataelements",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"dataelements"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Change data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62cd01a6-9c8c-4d36-8134-f51512efb018",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Data - Edit Instance Data - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/data/{{dataGuid}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"data",
								"{{dataGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Instance Data by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62cd01a6-9c8c-4d36-8134-f51512efb018",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Data - Get Instance Data by ID - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/data/{{dataGuid}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"data",
								"{{dataGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE instance data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc714784-7a38-4224-aad8-11d36fe6c540",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Data - Delete Instance Data - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/data/{{dataGuid}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"data",
								"{{dataGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Add attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e0a8157-5f87-46a5-8df1-f3097c021797",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Data - Add attachment - Status - 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"     var jsonData = pm.response.json();\r",
									"    if(pm.expect(jsonData.id).not.eql(null))\r",
									"    {\r",
									"        pm.environment.set('dataGuid',jsonData.id);\r",
									"    }\r",
									"    pm.expect(jsonData.refs.length).to.equal(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "74e5cd5e-6bcf-41be-98dd-6c142716bcdf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"value": "attachment; filename=test.pdf",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "test_file_pdf.pdf"
							}
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/data?dataType={{attachmentElementType}}&refs={{dataGuid}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"data"
							],
							"query": [
								{
									"key": "dataType",
									"value": "{{attachmentElementType}}"
								},
								{
									"key": "refs",
									"value": "{{dataGuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Attachment Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62cd01a6-9c8c-4d36-8134-f51512efb018",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Data - Get Attachment Data - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/data/{{dataGuid}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"data",
								"{{dataGuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Attachment Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc714784-7a38-4224-aad8-11d36fe6c540",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Data - Delete Attachment Data - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/data/{{dataGuid}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"data",
								"{{dataGuid}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Add instance event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59eb307d-9e00-43b3-a209-0b3b02ead6a8",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Event - Add Instance Event - Status - 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Platform - Storage - Instance Event - Add Instance Event - Content - Matches\", function () {",
									"    var jsonData = pm.response.json();",
									"    if(pm.expect(jsonData.id).not.eql(null))",
									"    {",
									"        pm.environment.set('EventId', jsonData.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "86d4fdf9-388d-4841-bbeb-3ad6cecf94a1",
								"exec": [
									"pm.environment.set(\"EventId\",\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{    \n   \"instanceOwnerId\": \"{{instanceOwnerId}}\",\n   \"instanceId\": \"{{instanceOwnerId}}/{{instanceId}}\",\n   \"eventType\": \"created\",\n   \"userId\": 3,\n   \"authenticationLevel\": 1,\n   \"workflowStep\": \"8\",\n   \"enduserSystemId\": 2\n}"
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/events",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Event by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "357288ce-372f-4b00-9b7a-42dc94990430",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Event - Get Instance Event by ID- Status - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/events/{{EventId}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"events",
								"{{EventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "357288ce-372f-4b00-9b7a-42dc94990430",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Event - Get Instance Events - Status - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Platform - Storage - Instance Event - Get Instance Events - Content - New Id found\", function () {",
									"    var jsonData = pm.response.json();",
									"    var eventIdFound = 'false';",
									"    for(var i =0; i<jsonData.length; i++)",
									"    {",
									"        var createdEventId = pm.environment.get(\"EventId\");",
									"        if(jsonData[i].id == createdEventId)",
									"        {",
									"            eventIdFound = 'true';",
									"            break;",
									"        }",
									"    }",
									"    if(eventIdFound != 'true')",
									"    {",
									"        pm.expect(eventIdFound).to.equal(true);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/events",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Events with type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04584cdf-bdf6-45e3-85f2-e5768b49208a",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Event - Get Instance Events by type - Content - Created type events found\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    var eventTypeCreated = 'true';",
									"    for(var i =0; i<jsonData.length; i++)",
									"    {",
									"        if(jsonData[i].eventType != 'created')",
									"        {",
									"            eventTypeCreated = 'false';",
									"            break;    ",
									"        }",
									"    }",
									"    if(eventTypeCreated != 'true')",
									"    {",
									"        pm.expect(eventIdFound).to.equal(true);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/events/?eventTypes=created",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"events",
								""
							],
							"query": [
								{
									"key": "eventTypes",
									"value": "created"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Events not retrieved by wrong time",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "546d0678-0ca9-44bd-a160-ebfc385882e7",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Event - No Instance Events - Status - 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Platform - Storage - Instance Event - No Instance Events - Content - Matches\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Did not find any instance events\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8aa76d9e-95b4-4db6-a5d0-4b13afe1339d",
								"exec": [
									"var currentDate = new Date();",
									"var hoursToMinus = currentDate.getHours() - 1;",
									"currentDate.setHours(hoursToMinus);",
									"pm.environment.set(\"fromDate\", currentDate);",
									"var currentDate1 = new Date();",
									"var hoursToAdd = currentDate1.getHours() + 5;",
									"currentDate1.setHours(hoursToAdd);",
									"pm.environment.set(\"toDate\", currentDate1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/events/?from=2018-05-22T08:42:53&to=2018-06-22T08:42:53",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"events",
								""
							],
							"query": [
								{
									"key": "from",
									"value": "2018-05-22T08:42:53"
								},
								{
									"key": "to",
									"value": "2018-06-22T08:42:53"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "686160fc-c6de-4c3f-904a-fe9528f346a7",
								"exec": [
									"pm.test(\"Platform - Storage - Instance Event - Delete Instance Events - Status - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Platform - Storage - Instance Event - Delete Instance Events - Content - Matches\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"succesfully deleted\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}/events",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"events"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "SBL",
			"item": [
				{
					"name": "POST Add instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73bb7aa7-5269-42fc-ae97-b51511a8d97e",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"if(pm.response.code == 201)\r",
									"{\r",
									"    var instanceId = jsonData.id;\r",
									"    instanceId = instanceId.toString();\r",
									"    instanceId = instanceId.split('/');\r",
									"    instanceId = instanceId[1];\r",
									"    pm.environment.set('instanceId',instanceId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e1f629f2-d9d1-4cc5-9698-9c83bf385f43",
								"exec": [
									"pm.environment.set(\"instanceId\",\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"instanceOwner\": {\n    \t\"partyId\": \"{{instanceOwnerId}}\"\n    },\n    \"appOwner\":{\n    \t\"labels\" : [ \"gr\", \"x2\" ]\n    },\n    \"appId\" : \"{{org}}/{{app}}\",\n    \"dueBefore\": \"2019-06-01T12:00:00Z\",\n    \"visibleAfter\": \"2019-05-20T00:00:00Z\",\n    \"title\": { \"nb\": \"Arbeidsmelding\" },\n    \"process\": {\n        \"started\": \"{{current_timestamp}}\",\n        \"startEvent\": \"StartEvent_1\",\n        \"currentTask\": {\n            \"flow\": 2,\n            \"started\": \"{{current_timestamp}}\",\n            \"elementId\": \"Task_1\",\n            \"name\": \"Utfylling\",\n            \"altinnTaskType\": \"data\",\n            \"ended\": null,\n            \"validated\": null\n        },\n        \"ended\": null,\n        \"endEvent\": null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances?appId={{org}}/{{app}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{org}}/{{app}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST visibleDate in the future",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4081c1b5-a9a1-4b52-95b3-6b89964d2fb6",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"if(pm.response.code == 201)\r",
									"{\r",
									"    var instanceId = jsonData.id;\r",
									"    instanceId = instanceId.toString();\r",
									"    instanceId = instanceId.split('/');\r",
									"    instanceId = instanceId[1];\r",
									"    pm.environment.set('FutureDateinstanceId',instanceId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4ead76e4-8ea2-4551-81ed-2dc459e8f380",
								"exec": [
									"pm.environment.set(\"FutureDateinstanceId\",\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"instanceOwner\": {\n    \t\"partyId\": \"{{instanceOwnerId}}\"\n    },\n    \"appOwner\":{\n    \t\"labels\" : [ \"gr\", \"x2\" ]\n    },\n    \"appId\" : \"{{org}}/{{app}}\",\n    \"dueBefore\": \"2019-06-01T12:00:00Z\",\n    \"visibleAfter\": \"2021-05-20T00:00:00Z\",\n    \"title\": { \"nb\": \"Arbeidsmelding\" },\n    \"process\": {\n        \"started\": \"{{current_timestamp}}\",\n        \"startEvent\": \"StartEvent_1\",\n        \"currentTask\": {\n            \"flow\": 2,\n            \"started\": \"{{current_timestamp}}\",\n            \"elementId\": \"Task_1\",\n            \"name\": \"Utfylling\",\n            \"altinnTaskType\": \"data\",\n            \"ended\": null,\n            \"validated\": null\n        },\n        \"ended\": null,\n        \"endEvent\": null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances?appId={{org}}/{{app}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances"
							],
							"query": [
								{
									"key": "appId",
									"value": "{{org}}/{{app}}"
								}
							]
						},
						"description": "Should be able to GET instances with visibleDate set in the future"
					},
					"response": []
				},
				{
					"name": "GET All instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86592b19-cde0-42f1-8b7c-297eaee24071",
								"exec": [
									"pm.test(\"Platform - Storage - SBL - Get Instances for SBL - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Platform - Storage - SBL - GET Instances for SBL - Content - Does not contain future visible instances\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.not.contain(pm.environment.get(\"FutureDateinstanceId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/sbl/instances/{{instanceOwnerId}}?state=active&language=nb",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"sbl",
								"instances",
								"{{instanceOwnerId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "active"
								},
								{
									"key": "language",
									"value": "nb"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Soft Delete Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0c6b00b-4213-4095-8a83-f9cf7cc5769e",
								"exec": [
									"pm.test(\"Platform - Storage - SBL - Soft Delete Instance - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Platform - Storage - SBL - Soft Delete Instance - Content - Matches\", function () {\r",
									"    pm.expect(pm.response.text()).equal('true');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/sbl/instances/{{instanceOwnerId}}/{{instanceId}}?hard=false",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"sbl",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}"
							],
							"query": [
								{
									"key": "hard",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Restore Deleted message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72cf897c-1a3c-46e3-9d9c-67c1159588c8",
								"exec": [
									"pm.test(\"Platform - Storage - SBL - Restore Instance - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.text()).equal('true');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/sbl/instances/{{instanceOwnerId}}/{{instanceId}}/undelete",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"sbl",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"undelete"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Instance by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0967cde0-022c-4148-b82d-5d490cd417e5",
								"exec": [
									"pm.test(\"Platform - Storage - SBL - Get Instance by id for SBL - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Platform - Storage - SBL - Get Instance by id for SBL - Verify - Restored Instance\", function () {\r",
									"    var instanceId = pm.environment.get('instanceId');\r",
									"    pm.expect(pm.response.json().id).equal(instanceId);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/sbl/instances/{{instanceOwnerId}}/{{instanceId}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"sbl",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Instance Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0967cde0-022c-4148-b82d-5d490cd417e5",
								"exec": [
									"pm.test(\"Platform - Storage - SBL - Get Instance events - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Platform - Storage - SBL - Get Instance Events for SBL - Status - Content\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    var eventsCount = jsonData.length;\r",
									"    pm.expect(eventsCount).to.equal(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/sbl/instances/{{instanceOwnerId}}/{{instanceId}}/events",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"sbl",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Hard Delete Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0c6b00b-4213-4095-8a83-f9cf7cc5769e",
								"exec": [
									"pm.test(\"Platform - Storage - Instance - Delete Instance - Status - 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.text()).equal('true');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/sbl/instances/{{instanceOwnerId}}/{{instanceId}}?hard=true",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"sbl",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}"
							],
							"query": [
								{
									"key": "hard",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Hard Delete future Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0c6b00b-4213-4095-8a83-f9cf7cc5769e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/sbl/instances/{{instanceOwnerId}}/{{FutureDateinstanceId}}?hard=true",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"sbl",
								"instances",
								"{{instanceOwnerId}}",
								"{{FutureDateinstanceId}}"
							],
							"query": [
								{
									"key": "hard",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Restore Hard Deleted message - negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d1598d9-8cc0-418f-9171-22db9db7659c",
								"exec": [
									"pm.test(\"Platform - Storage - SBL - Restore Instance - Status - 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.text()).to.include(\"Instance was permanently deleted and cannot be restored\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/sbl/instances/{{instanceOwnerId}}/{{instanceId}}/undelete",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"sbl",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}",
								"undelete"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "CleanUp",
			"item": [
				{
					"name": "GET Instances by InstanceOwnerID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46ea587-c309-4247-a8f5-4a36f278ff82",
								"exec": [
									"if (pm.response.code == 200)",
									"{",
									"    var jsonData = pm.response.json();",
									"    var instanceCount = jsonData.length;",
									"    if (instanceCount !== 0)",
									"    {",
									"        var instanceId = jsonData[0].id;",
									"        instanceId = instanceId.split('/');",
									"        instanceId = instanceId[1];",
									"        pm.environment.set('instanceId', instanceId);",
									"    }",
									"    else",
									"    {",
									"        postman.setNextRequest(\"DELETE App\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanUp App instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0c6b00b-4213-4095-8a83-f9cf7cc5769e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}/{{instanceId}}?hard=true",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}",
								"{{instanceId}}"
							],
							"query": [
								{
									"key": "hard",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check for more instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d46ea587-c309-4247-a8f5-4a36f278ff82",
								"exec": [
									"if (pm.response.code == 200)",
									"    {",
									"    var jsonData = pm.response.json();",
									"    var instanceCount = jsonData.length;",
									"    if (instanceCount !== 0)",
									"    {",
									"        var instanceId = jsonData[0].id;",
									"        instanceId = instanceId.split('/');",
									"        instanceId = instanceId[1];",
									"        pm.environment.set('instanceId', instanceId);",
									"        postman.setNextRequest(\"CleanUp App instances\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/hal+json"
							}
						],
						"url": {
							"raw": "https://platform.{{envUrl}}/storage/api/v1/instances/{{instanceOwnerId}}",
							"protocol": "https",
							"host": [
								"platform",
								"{{envUrl}}"
							],
							"path": [
								"storage",
								"api",
								"v1",
								"instances",
								"{{instanceOwnerId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "DELETE App",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c9b3b6a7-ab5e-4f32-a63c-3e0150654efb",
						"exec": [
							"pm.test(\"Platform - Storage - Applications - Delete App - Not possible for an user - Status - 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://platform.{{envUrl}}/storage/api/v1/applications/{{org}}/{{app}}?hard=true",
					"protocol": "https",
					"host": [
						"platform",
						"{{envUrl}}"
					],
					"path": [
						"storage",
						"api",
						"v1",
						"applications",
						"{{org}}",
						"{{app}}"
					],
					"query": [
						{
							"key": "hard",
							"value": "true"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}