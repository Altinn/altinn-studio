pool:
  name: altinn-vmss-testagent

name: $(environment)_Usecases_$(Date:ddMMyyyy)_$(Date:HHmm)

trigger: none

pr: none

schedules:
- cron: "*/15 * * * *"
  displayName: Bruksm√∏nster
  branches:
    include:
    - master
  always: true

steps:
- task: DeleteFiles@1
  displayName: 'Delete test results'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
      *.xml
      result.txt
      /src/test/K6/src/reports/*
  condition: succeededOrFailed()

- script: |
   mkdir -p $(pwd)/src/reports
   
  workingDirectory: '$(Build.SourcesDirectory)/src/test/K6'
  displayName: 'Create reports folder'
  continueOnError: true

- script: |
   k6 run --quiet --logformat raw --console-output=$(Build.SourcesDirectory)/result.txt $(Build.SourcesDirectory)/src/test/K6/src/availability.js -e env=$(environment)
   
   cat result.txt
   
   echo "##vso[task.setvariable variable=availability;]`cat result.txt`"
  
  workingDirectory: '$(Build.SourcesDirectory)'   
  displayName: 'Check availability'

- script: |   
   k6 run  --quiet $(pwd)/src/tests/platform/authentication/authentication.js -e env=$(environment) -e username=$(level2user) -e userpwd=$(userpwd) -e appsaccesskey=$(appsAccessSubsKey)
   
  workingDirectory: '$(Build.SourcesDirectory)/src/test/K6'
  displayName: 'Authentication'
  continueOnError: false
  condition: and(succeeded(), eq(variables['availability'], 'up'))

- script: |
   k6 run  --quiet $(pwd)/src/tests/app/portalsimulation.js -e env=$(environment) -e org=$(org) -e level2app=$(level2app) -e username=$(level2user) -e userpwd=$(userpwd) -e appsaccesskey=$(appsAccessSubsKey) -e sblaccesskey=$(sblAccessSubsKey)

   k6 run  --quiet $(pwd)/src/tests/app/multipartdata.js -e env=$(environment) -e org=$(org) -e level2app=$(level2app) -e username=$(level2user) -e userpwd=$(userpwd) -e appsaccesskey=$(appsAccessSubsKey) -e sblaccesskey=$(sblAccessSubsKey)
   
  workingDirectory: '$(Build.SourcesDirectory)/src/test/K6'
  displayName: 'App'
  continueOnError: true
  condition: and(succeeded(), eq(variables['availability'], 'up'))

- script: |
   k6 run  --quiet $(pwd)/src/tests/platform/storage/messageboxinstances.js -e env=$(environment) -e org=$(org) -e level2app=$(level2app) -e username=$(level2user) -e userpwd=$(userpwd) -e appsaccesskey=$(appsAccessSubsKey) -e sblaccesskey=$(sblAccessSubsKey)
   
   k6 run  --quiet $(pwd)/src/tests/platform/receipt/receipt.js -e env=$(environment) -e org=$(org) -e level2app=$(level2app) -e username=$(level2user) -e userpwd=$(userpwd) -e appsaccesskey=$(appsAccessSubsKey)
   
  workingDirectory: '$(Build.SourcesDirectory)/src/test/K6'
  displayName: 'Platform'
  continueOnError: true
  condition: and(succeeded(), eq(variables['availability'], 'up'))

- script: |   
   k6 run  --quiet $(pwd)/src/tests/platform/storage/deleteinstances.js -e env=$(environment) -e org=$(org) -e level2app=$(level2app) -e username=$(level2user) -e userpwd=$(userpwd) -e appsaccesskey=$(appsAccessSubsKey) -e sblaccesskey=$(sblAccessSubsKey)
   
  workingDirectory: '$(Build.SourcesDirectory)/src/test/K6'
  displayName: 'Cleanup'
  continueOnError: true
  condition: and(succeeded(), eq(variables['availability'], 'up'))

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFiles: |
     *.xml
     **/src/test/K6/src/reports/*.xml
    searchFolder: '$(Build.SourcesDirectory)'
    mergeTestResults: true
    failTaskOnFailedTests: true
    testRunTitle: '$(environment)_use_cases'
  condition: and(succeededOrFailed(), eq(variables['availability'], 'up'))
