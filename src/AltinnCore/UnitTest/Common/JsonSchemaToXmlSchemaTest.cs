using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using AltinnCore.Common.Factories.ModelFactory;
using AltinnCore.Common.Services.Interfaces;
using AltinnCore.ServiceLibrary.ServiceMetadata;
using Manatee.Json;
using Manatee.Json.Schema;
using Manatee.Json.Serialization;
using Microsoft.XmlDiffPatch;
using Moq;
using NUnit.Framework;
using Xunit;

namespace AltinnCore.UnitTest.Common
{
    /// <summary>
    ///  jo know for test
    /// </summary>
    public class JsonSchemaToXmlSchemaTest
    {
        /// <summary>
        /// Converting edag Json Schema to XSD
        /// </summary>
        [Fact]
        public void ConvertJsonSchemaToXsd()
        {
            string schemaText = File.ReadAllText("Common/edag.schema.json");
            JsonValue schemaJson = JsonValue.Parse(schemaText);
            JsonSchema schema = new JsonSerializer().Deserialize<JsonSchema>(schemaJson);

            JsonSchemaToXsd converter = new JsonSchemaToXsd();

            XmlSchema xmlSchema = converter.CreateXsd(schema);

            SaveXmlSchema(xmlSchema, "edag.generated.xsd");
        }

        /// <summary>
        ///   convert from json schema which is autogenerated with xsdToJsonSchema parser
        /// </summary>
        [Fact]
        public void ConvertFromAutogeneratedJsonSchemaToXsd()
        {
            string schemaText = File.ReadAllText("Common/melding.schema.json");
            JsonValue schemaJson = JsonValue.Parse(schemaText);
            JsonSchema schema = new JsonSerializer().Deserialize<JsonSchema>(schemaJson);

            JsonSchemaToXsd converter = new JsonSchemaToXsd();
            XmlSchema xmlSchema = converter.CreateXsd(schema);

            SaveXmlSchema(xmlSchema, "melding.generated.xsd");
        }

        private static void SaveXmlSchema(XmlSchema xmlSchema, string fileName)
        {
            FileStream file = new FileStream(fileName, FileMode.Create, FileAccess.ReadWrite);
            XmlTextWriter xwriter = new XmlTextWriter(file, new UTF8Encoding())
            {
                Formatting = Formatting.Indented,
            };
            xmlSchema.Write(xwriter);

            xwriter.Close();
            file.Close();
        }

        /// <summary>
        /// diff to xml files
        /// </summary>
        /// <param name="schema1">the first schema file</param>
        /// <param name="schema2">the second schema file</param>
        /// <returns>a bool indicating that if the two files are equal</returns>
        public static bool XmlDiff(string schema1, string schema2)
        {
            XmlDiff xmlDiff = new XmlDiff(XmlDiffOptions.IgnoreChildOrder | XmlDiffOptions.IgnoreNamespaces | XmlDiffOptions.IgnorePrefixes);
            MemoryStream ms = new MemoryStream();

            bool identical = xmlDiff.Compare(schema1, schema2, false);

            if (!identical)
            {
                string diffFile = schema1.Split("_")[0] + "-" + schema2.Split("_")[0] + schema1.Split("_")[1] + "_diff.xml";
                XmlWriter diffgramWriter = XmlWriter.Create(diffFile);

                xmlDiff.Compare(schema1, schema2, false, diffgramWriter);
                diffgramWriter.Flush();
                diffgramWriter.Close();
            }

            return identical;
        }

        private static void SaveJsonSchema(JsonSchema jsonSchema, string filename)
        {
            JsonSerializer serializer = new JsonSerializer();
            JsonValue json = serializer.Serialize(jsonSchema);
            File.WriteAllText(filename, json.GetIndentedString());
        }

        private static bool JsonDiff(JsonSchema schema1, JsonSchema schema2)
        {
            JsonValue jsonSchema1 = new JsonSerializer().Serialize(schema1);
            JsonValue jsonSchema2 = new JsonSerializer().Serialize(schema2);

            bool difference = jsonSchema1.Object.Equals(jsonSchema2.Object);

            return difference;
        }

        [Fact]
        private void FromXsdToJsdAndBack()
        {
            int failCount = 0;
            int equalityCount = 0;
            
            string[] files = Directory.GetFiles("Common/xsd/", "*.xsd", SearchOption.AllDirectories);            

            foreach (string filePath in files)
            {
                Debug.WriteLine("Testing file " + filePath);

                JsonSchema jsonSchema1 = null, jsonSchema2 = null;
                XmlSchema xmlSchema2 = null, xmlSchema3 = null;

                string fileName = filePath.Substring(filePath.LastIndexOf("/") + 1).Split(".")[0];
                string jsd1FileName = "jsd1_" + fileName + ".schema.json";
                string jsd2FileName = "jsd2_" + fileName + ".schema.json";
                string xsd2FileName = "xsd2_" + fileName + ".xsd";
                string xsd3FileName = "xsd3_" + fileName + ".xsd";

                try
                {                
                    XsdToJsonSchema converter = new XsdToJsonSchema(new XmlTextReader(filePath), TestLogger.Create<XsdToJsonSchema>());
                    jsonSchema1 = converter.AsJsonSchema();

                    SaveJsonSchema(jsonSchema1, jsd1FileName);
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Failed XsdToJsd conversion: " + filePath + " Reason: " + e.Message);
                    failCount++;
                }                

                xmlSchema2 = ConvertFromJsdToXsd(jsonSchema1, xsd2FileName);
                jsonSchema2 = ConvertFromXsdToJsd(xmlSchema2, jsd2FileName);
                xmlSchema3 = ConvertFromJsdToXsd(jsonSchema2, xsd3FileName);
                     
                try
                {
                    Assert.True(XmlDiff(xsd2FileName, xsd3FileName), "xsd2 != xsd3");
                    Assert.True(JsonDiff(jsonSchema1, jsonSchema2), "jsd1 != jsd2");
                }
                catch (Exception e)
                {
                    Debug.WriteLine("Failed equality test " + e.Message);
                    equalityCount++;
                }                
            }

            Assert.Equal(0, equalityCount);
            Assert.Equal(0, failCount);
        }

        private static JsonSchema ConvertFromXsdToJsd(XmlSchema xmlSchema2, string fileName)
        {
            try
            {
                XsdToJsonSchema xsdConverter2 = new XsdToJsonSchema(xmlSchema2, TestLogger.Create<XsdToJsonSchema>());
                JsonSchema jsonSchema2 = xsdConverter2.AsJsonSchema();
                SaveJsonSchema(jsonSchema2, fileName);

                return jsonSchema2;
            }
            catch (Exception e)
            {
                Debug.WriteLine("Failed XsdToJsd conversion: " + fileName + " Reason: " + e.Message);
            }

            return null;
        }

        private static XmlSchema ConvertFromJsdToXsd(JsonSchema jsonSchema1, string fileName)
        {
            XmlSchema xmlSchema2;
            JsonSchemaToXsd jsonConverter1 = new JsonSchemaToXsd();
            xmlSchema2 = jsonConverter1.CreateXsd(jsonSchema1);
            SaveXmlSchema(xmlSchema2, fileName);
            return xmlSchema2;
        }
    }       
 }
