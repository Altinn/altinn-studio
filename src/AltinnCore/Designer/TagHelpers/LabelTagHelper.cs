// <auto-generated />
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Threading.Tasks;
using AltinnCore.Common.Helpers;
using AltinnCore.ServiceLibrary;
using AltinnCore.ServiceLibrary.ServiceMetadata;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.TagHelpers;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.AspNetCore.Razor.TagHelpers;

namespace AltinnCore.Designer.TagHelpers
{
    /// <summary>
    /// <see cref="ITagHelper"/> implementation targeting &lt;label&gt; elements with an <c>asp-for</c> attribute.
    /// </summary>
    [HtmlTargetElement("label", Attributes = ForAttributeName)]
    public class LabelTagHelper : TagHelper
    {
        private const string ForAttributeName = "altinn-for";

        private const string AltinnTextKeyAttributeName = "altinn-text";

        /// <summary>
        /// Creates a new <see cref="LabelTagHelper"/>.
        /// </summary>
        /// <param name="generator">The <see cref="IHtmlGenerator"/>.</param>
        public LabelTagHelper(IHtmlGenerator generator)
        {
            Generator = generator;
        }

        /// <inheritdoc />
        public override int Order
        {
            get
            {
                return -1000;
            }
        }

        [HtmlAttributeNotBound]
        [ViewContext]
        public ViewContext ViewContext { get; set; }
        
        /// <summary>
        /// An expression to be evaluated against the current model.
        /// </summary>
        [HtmlAttributeName(ForAttributeName)]
        public ModelExpression For { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [HtmlAttributeName(AltinnTextKeyAttributeName)]
        public string AltinnTextKey { get; set; }

        protected IHtmlGenerator Generator { get; }

        /// <inheritdoc />
        /// <remarks>Does nothing if <see cref="For"/> is <c>null</c>.</remarks>
        public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output)
        {
            if (context == null)
            {
                throw new ArgumentNullException(nameof(context));
            }

            if (output == null)
            {
                throw new ArgumentNullException(nameof(output));
            }

            var tagBuilder = Generator.GenerateLabel(
                ViewContext,
                For.ModelExplorer,
                For.Name,
                labelText: null,
                htmlAttributes: null);

            if (tagBuilder != null)
            {
                output.MergeAttributes(tagBuilder);

                ServiceContext serviceContext = ViewContext.ViewBag.ServiceContext;
                RequestContext requestContext = ViewContext.ViewBag.RequestContext;

                // We check for whitespace to detect scenarios such as:
                // <label for="Name">
                // </label>
                if (!output.IsContentModified)
                {
                    var childContent = await output.GetChildContentAsync();

                    string labelText = string.Empty;
                    string modelpath = serviceContext.RootName + "." + ModelHelper.GetMetadataModelPath(For.Name);

                    bool textSet = false;

                    // Check if specific Text key is used (for reuse of textkey)
                    if (!string.IsNullOrEmpty(AltinnTextKey))
                    {
                        if (serviceContext.ServiceText.ContainsKey(AltinnTextKey)
                            && serviceContext.ServiceText[AltinnTextKey].ContainsKey(serviceContext.CurrentCulture))
                        {
                            output.Content.SetHtmlContent(serviceContext.ServiceText[AltinnTextKey][serviceContext.CurrentCulture]);
                            textSet = true;                          
                        }
                    }
                    
                    // First see if the text is defined in the Service Metadata
                    if (!textSet && serviceContext.ServiceMetaData?.Elements?.ContainsKey(modelpath) == true)
                    {
                        ElementMetadata elementMetaData = serviceContext.ServiceMetaData?.Elements[modelpath];
                        if (elementMetaData.Texts?.ContainsKey(TextCategoryType.Label.ToString()) == true)
                        {
                            string textKey = elementMetaData.Texts[TextCategoryType.Label.ToString()];

                            if (serviceContext.ServiceText.ContainsKey(serviceContext.CurrentCulture)
                           && serviceContext.ServiceText[serviceContext.CurrentCulture].ContainsKey(textKey))
                            {
                                output.Content.SetHtmlContent(ServiceTextHelper.SetTextParams(serviceContext.ServiceText[serviceContext.CurrentCulture][textKey], requestContext, serviceContext));
                                textSet = true;
                            }
                        }
                        else
                        {
                            // Try to collect the text from model path
                            string textKey = TextCategoryType.Label + "." + modelpath;
                            if (serviceContext.ServiceText.ContainsKey(serviceContext.CurrentCulture)
                             && serviceContext.ServiceText[serviceContext.CurrentCulture].ContainsKey(textKey))
                            {
                                output.Content.SetHtmlContent(ServiceTextHelper.SetTextParams(serviceContext.ServiceText[serviceContext.CurrentCulture][textKey], requestContext, serviceContext));
                                textSet = true;
                            }
                        }
                    }
                   
                    if (!textSet)
                    {
                        if (childContent.IsEmptyOrWhiteSpace)
                        {
                            // Provide default label text since there was nothing useful in the Razor source.
                            output.Content.SetHtmlContent(tagBuilder.InnerHtml);
                        }
                        else
                        {
                            output.Content.SetHtmlContent(childContent);
                        }
                    }
                }
            }
        }
    }
}