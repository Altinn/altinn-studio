/*
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.1.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Altinn.Studio.Designer.RepositoryClient.Client;
using Altinn.Studio.Designer.RepositoryClient.Model;
using RestSharp;

namespace Altinn.Studio.Designer.RepositoryClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Create a repository
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Repository</returns>
        Altinn.Studio.Designer.RepositoryClient.Model.Repository CreateCurrentUserRepo(CreateRepoOption body = null);

        /// <summary>
        /// Create a repository
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Repository</returns>
        ApiResponse<Altinn.Studio.Designer.RepositoryClient.Model.Repository> CreateCurrentUserRepoWithHttpInfo(CreateRepoOption body = null);

        /// <summary>
        /// Add email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;Email&gt;</returns>
        List<Email> UserAddEmail(CreateEmailOption body = null);

        /// <summary>
        /// Add email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Email&gt;</returns>
        ApiResponse<List<Email>> UserAddEmailWithHttpInfo(CreateEmailOption body = null);

        /// <summary>
        /// Check if one user is following another user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="follower">username of following user</param>
        /// <param name="followee">username of followed user</param>
        void UserCheckFollowing(string follower, string followee);

        /// <summary>
        /// Check if one user is following another user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="follower">username of following user</param>
        /// <param name="followee">username of followed user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UserCheckFollowingWithHttpInfo(string follower, string followee);

        /// <summary>
        /// Create an access token
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="name"> (optional)</param>
        void UserCreateToken(string name = null);

        /// <summary>
        /// Create an access token
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UserCreateTokenWithHttpInfo(string name = null);

        /// <summary>
        /// Check whether a user is followed by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="followee">username of followed user</param>
        void UserCurrentCheckFollowing(string followee);

        /// <summary>
        /// Check whether a user is followed by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="followee">username of followed user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UserCurrentCheckFollowingWithHttpInfo(string followee);

        /// <summary>
        /// Whether the authenticated is starring the repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        void UserCurrentCheckStarring(string owner, string repo);

        /// <summary>
        /// Whether the authenticated is starring the repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UserCurrentCheckStarringWithHttpInfo(string owner, string repo);

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to unfollow</param>
        void UserCurrentDeleteFollow(string username);

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to unfollow</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UserCurrentDeleteFollowWithHttpInfo(string username);

        /// <summary>
        /// Remove a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        void UserCurrentDeleteGPGKey(int? id);

        /// <summary>
        /// Remove a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UserCurrentDeleteGPGKeyWithHttpInfo(int? id);

        /// <summary>
        /// Delete a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        void UserCurrentDeleteKey(int? id);

        /// <summary>
        /// Delete a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UserCurrentDeleteKeyWithHttpInfo(int? id);

        /// <summary>
        /// Unstar the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        void UserCurrentDeleteStar(string owner, string repo);

        /// <summary>
        /// Unstar the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UserCurrentDeleteStarWithHttpInfo(string owner, string repo);

        /// <summary>
        /// Get a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>GPGKey</returns>
        GPGKey UserCurrentGetGPGKey(int? id);

        /// <summary>
        /// Get a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>ApiResponse of GPGKey</returns>
        ApiResponse<GPGKey> UserCurrentGetGPGKeyWithHttpInfo(int? id);

        /// <summary>
        /// Get a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>PublicKey</returns>
        PublicKey UserCurrentGetKey(int? id);

        /// <summary>
        /// Get a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>ApiResponse of PublicKey</returns>
        ApiResponse<PublicKey> UserCurrentGetKeyWithHttpInfo(int? id);

        /// <summary>
        /// List the authenticated user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserCurrentListFollowers();

        /// <summary>
        /// List the authenticated user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserCurrentListFollowersWithHttpInfo();

        /// <summary>
        /// List the users that the authenticated user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserCurrentListFollowing();

        /// <summary>
        /// List the users that the authenticated user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserCurrentListFollowingWithHttpInfo();

        /// <summary>
        /// List the authenticated user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;GPGKey&gt;</returns>
        List<GPGKey> UserCurrentListGPGKeys();

        /// <summary>
        /// List the authenticated user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;GPGKey&gt;</returns>
        ApiResponse<List<GPGKey>> UserCurrentListGPGKeysWithHttpInfo();

        /// <summary>
        /// List the authenticated user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;PublicKey&gt;</returns>
        List<PublicKey> UserCurrentListKeys();

        /// <summary>
        /// List the authenticated user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;PublicKey&gt;</returns>
        ApiResponse<List<PublicKey>> UserCurrentListKeysWithHttpInfo();

        /// <summary>
        /// List the repos that the authenticated user owns or has access to
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;Repository&gt;</returns>
        List<Altinn.Studio.Designer.RepositoryClient.Model.Repository> UserCurrentListRepos();

        /// <summary>
        /// List the repos that the authenticated user owns or has access to
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserCurrentListReposWithHttpInfo();

        /// <summary>
        /// The repos that the authenticated user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;Repository&gt;</returns>
        List<Altinn.Studio.Designer.RepositoryClient.Model.Repository> UserCurrentListStarred();

        /// <summary>
        /// The repos that the authenticated user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserCurrentListStarredWithHttpInfo();

        /// <summary>
        /// List repositories watched by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;Repository&gt;</returns>
        List<Model.Repository> UserCurrentListSubscriptions();

        /// <summary>
        /// List repositories watched by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        ApiResponse<List<Model.Repository>> UserCurrentListSubscriptionsWithHttpInfo();

        /// <summary>
        /// Create a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="form"> (optional)</param>
        /// <returns>GPGKey</returns>
        GPGKey UserCurrentPostGPGKey(CreateGPGKeyOption form = null);

        /// <summary>
        /// Create a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="form"> (optional)</param>
        /// <returns>ApiResponse of GPGKey</returns>
        ApiResponse<GPGKey> UserCurrentPostGPGKeyWithHttpInfo(CreateGPGKeyOption form = null);

        /// <summary>
        /// Create a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>PublicKey</returns>
        PublicKey UserCurrentPostKey(CreateKeyOption body = null);

        /// <summary>
        /// Create a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PublicKey</returns>
        ApiResponse<PublicKey> UserCurrentPostKeyWithHttpInfo(CreateKeyOption body = null);

        /// <summary>
        /// Follow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to follow</param>
        void UserCurrentPutFollow(string username);

        /// <summary>
        /// Follow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to follow</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UserCurrentPutFollowWithHttpInfo(string username);

        /// <summary>
        /// Star the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        void UserCurrentPutStar(string owner, string repo);

        /// <summary>
        /// Star the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UserCurrentPutStarWithHttpInfo(string owner, string repo);

        /// <summary>
        /// List the current user&#39;s tracked times
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;TrackedTime&gt;</returns>
        List<TrackedTime> UserCurrentTrackedTimes();

        /// <summary>
        /// List the current user&#39;s tracked times
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;TrackedTime&gt;</returns>
        ApiResponse<List<TrackedTime>> UserCurrentTrackedTimesWithHttpInfo();

        /// <summary>
        /// Delete email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        void UserDeleteEmail(DeleteEmailOption body = null);

        /// <summary>
        /// Delete email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UserDeleteEmailWithHttpInfo(DeleteEmailOption body = null);

        /// <summary>
        /// Get a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to get</param>
        /// <returns>User</returns>
        User UserGet(string username);

        /// <summary>
        /// Get a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to get</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UserGetWithHttpInfo(string username);

        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>User</returns>
        User UserGetCurrent();

        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UserGetCurrentWithHttpInfo();

        /// <summary>
        /// List the authenticated user&#39;s access tokens
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        void UserGetTokens();

        /// <summary>
        /// List the authenticated user&#39;s access tokens
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UserGetTokensWithHttpInfo();

        /// <summary>
        /// List the authenticated user&#39;s email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;Email&gt;</returns>
        List<Email> UserListEmails();

        /// <summary>
        /// List the authenticated user&#39;s email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;Email&gt;</returns>
        ApiResponse<List<Email>> UserListEmailsWithHttpInfo();

        /// <summary>
        /// List the given user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserListFollowers(string username);

        /// <summary>
        /// List the given user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserListFollowersWithHttpInfo(string username);

        /// <summary>
        /// List the users that the given user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserListFollowing(string username);

        /// <summary>
        /// List the users that the given user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserListFollowingWithHttpInfo(string username);

        /// <summary>
        /// List the given user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>List&lt;GPGKey&gt;</returns>
        List<GPGKey> UserListGPGKeys(string username);

        /// <summary>
        /// List the given user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>ApiResponse of List&lt;GPGKey&gt;</returns>
        ApiResponse<List<GPGKey>> UserListGPGKeysWithHttpInfo(string username);

        /// <summary>
        /// List the given user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>List&lt;PublicKey&gt;</returns>
        List<PublicKey> UserListKeys(string username);

        /// <summary>
        /// List the given user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>ApiResponse of List&lt;PublicKey&gt;</returns>
        ApiResponse<List<PublicKey>> UserListKeysWithHttpInfo(string username);

        /// <summary>
        /// List the repos owned by the given user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>List&lt;Repository&gt;</returns>
        List<Altinn.Studio.Designer.RepositoryClient.Model.Repository> UserListRepos(string username);

        /// <summary>
        /// List the repos owned by the given user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserListReposWithHttpInfo(string username);

        /// <summary>
        /// The repos that the given user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>List&lt;Repository&gt;</returns>
        List<Altinn.Studio.Designer.RepositoryClient.Model.Repository> UserListStarred(string username);

        /// <summary>
        /// The repos that the given user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserListStarredWithHttpInfo(string username);

        /// <summary>
        /// List the repositories watched by a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of the user</param>
        /// <returns>List&lt;Repository&gt;</returns>
        List<Altinn.Studio.Designer.RepositoryClient.Model.Repository> UserListSubscriptions(string username);

        /// <summary>
        /// List the repositories watched by a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of the user</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserListSubscriptionsWithHttpInfo(string username);

        /// <summary>
        /// Search for users
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="q">keyword (optional)</param>
        /// <param name="limit">maximum number of users to return (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UserSearch(string q = null, int? limit = null);

        /// <summary>
        /// Search for users
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="q">keyword (optional)</param>
        /// <param name="limit">maximum number of users to return (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UserSearchWithHttpInfo(string q = null, int? limit = null);

        /// <summary>
        /// List a user&#39;s tracked times in a repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>List&lt;TrackedTime&gt;</returns>
        List<TrackedTime> UserTrackedTimes(string owner, string repo, string user);

        /// <summary>
        /// List a user&#39;s tracked times in a repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>ApiResponse of List&lt;TrackedTime&gt;</returns>
        ApiResponse<List<TrackedTime>> UserTrackedTimesWithHttpInfo(string owner, string repo, string user);
        #endregion Synchronous Operations
        #region Asynchronous Operations

        /// <summary>
        /// Create a repository
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Repository</returns>
        System.Threading.Tasks.Task<Altinn.Studio.Designer.RepositoryClient.Model.Repository> CreateCurrentUserRepoAsync(CreateRepoOption body = null);

        /// <summary>
        /// Create a repository
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        System.Threading.Tasks.Task<ApiResponse<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> CreateCurrentUserRepoAsyncWithHttpInfo(CreateRepoOption body = null);

        /// <summary>
        /// Add email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;Email&gt;</returns>
        System.Threading.Tasks.Task<List<Email>> UserAddEmailAsync(CreateEmailOption body = null);

        /// <summary>
        /// Add email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Email&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Email>>> UserAddEmailAsyncWithHttpInfo(CreateEmailOption body = null);

        /// <summary>
        /// Check if one user is following another user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="follower">username of following user</param>
        /// <param name="followee">username of followed user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCheckFollowingAsync(string follower, string followee);

        /// <summary>
        /// Check if one user is following another user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="follower">username of following user</param>
        /// <param name="followee">username of followed user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UserCheckFollowingAsyncWithHttpInfo(string follower, string followee);

        /// <summary>
        /// Create an access token
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="name"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCreateTokenAsync(string name = null);

        /// <summary>
        /// Create an access token
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="name"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UserCreateTokenAsyncWithHttpInfo(string name = null);

        /// <summary>
        /// Check whether a user is followed by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="followee">username of followed user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentCheckFollowingAsync(string followee);

        /// <summary>
        /// Check whether a user is followed by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="followee">username of followed user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentCheckFollowingAsyncWithHttpInfo(string followee);

        /// <summary>
        /// Whether the authenticated is starring the repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentCheckStarringAsync(string owner, string repo);

        /// <summary>
        /// Whether the authenticated is starring the repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentCheckStarringAsyncWithHttpInfo(string owner, string repo);

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to unfollow</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentDeleteFollowAsync(string username);

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to unfollow</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentDeleteFollowAsyncWithHttpInfo(string username);

        /// <summary>
        /// Remove a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentDeleteGPGKeyAsync(int? id);

        /// <summary>
        /// Remove a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentDeleteGPGKeyAsyncWithHttpInfo(int? id);

        /// <summary>
        /// Delete a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentDeleteKeyAsync(int? id);

        /// <summary>
        /// Delete a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentDeleteKeyAsyncWithHttpInfo(int? id);

        /// <summary>
        /// Unstar the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentDeleteStarAsync(string owner, string repo);

        /// <summary>
        /// Unstar the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentDeleteStarAsyncWithHttpInfo(string owner, string repo);

        /// <summary>
        /// Get a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>Task of GPGKey</returns>
        System.Threading.Tasks.Task<GPGKey> UserCurrentGetGPGKeyAsync(int? id);

        /// <summary>
        /// Get a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>Task of ApiResponse (GPGKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<GPGKey>> UserCurrentGetGPGKeyAsyncWithHttpInfo(int? id);

        /// <summary>
        /// Get a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>Task of PublicKey</returns>
        System.Threading.Tasks.Task<PublicKey> UserCurrentGetKeyAsync(int? id);

        /// <summary>
        /// Get a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>Task of ApiResponse (PublicKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicKey>> UserCurrentGetKeyAsyncWithHttpInfo(int? id);

        /// <summary>
        /// List the authenticated user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserCurrentListFollowersAsync();

        /// <summary>
        /// List the authenticated user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserCurrentListFollowersAsyncWithHttpInfo();

        /// <summary>
        /// List the users that the authenticated user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserCurrentListFollowingAsync();

        /// <summary>
        /// List the users that the authenticated user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserCurrentListFollowingAsyncWithHttpInfo();

        /// <summary>
        /// List the authenticated user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;GPGKey&gt;</returns>
        System.Threading.Tasks.Task<List<GPGKey>> UserCurrentListGPGKeysAsync();

        /// <summary>
        /// List the authenticated user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;GPGKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GPGKey>>> UserCurrentListGPGKeysAsyncWithHttpInfo();

        /// <summary>
        /// List the authenticated user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;PublicKey&gt;</returns>
        System.Threading.Tasks.Task<List<PublicKey>> UserCurrentListKeysAsync();

        /// <summary>
        /// List the authenticated user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;PublicKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PublicKey>>> UserCurrentListKeysAsyncWithHttpInfo();

        /// <summary>
        /// List the repos that the authenticated user owns or has access to
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;Repository&gt;</returns>
        System.Threading.Tasks.Task<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserCurrentListReposAsync();

        /// <summary>
        /// List the repos that the authenticated user owns or has access to
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>> UserCurrentListReposAsyncWithHttpInfo();

        /// <summary>
        /// The repos that the authenticated user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;Repository&gt;</returns>
        System.Threading.Tasks.Task<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserCurrentListStarredAsync();

        /// <summary>
        /// The repos that the authenticated user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>> UserCurrentListStarredAsyncWithHttpInfo();

        /// <summary>
        /// List repositories watched by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;Repository&gt;</returns>
        System.Threading.Tasks.Task<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserCurrentListSubscriptionsAsync();

        /// <summary>
        /// List repositories watched by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>> UserCurrentListSubscriptionsAsyncWithHttpInfo();

        /// <summary>
        /// Create a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="form"> (optional)</param>
        /// <returns>Task of GPGKey</returns>
        System.Threading.Tasks.Task<GPGKey> UserCurrentPostGPGKeyAsync(CreateGPGKeyOption form = null);

        /// <summary>
        /// Create a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="form"> (optional)</param>
        /// <returns>Task of ApiResponse (GPGKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<GPGKey>> UserCurrentPostGPGKeyAsyncWithHttpInfo(CreateGPGKeyOption form = null);

        /// <summary>
        /// Create a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PublicKey</returns>
        System.Threading.Tasks.Task<PublicKey> UserCurrentPostKeyAsync(CreateKeyOption body = null);

        /// <summary>
        /// Create a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PublicKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicKey>> UserCurrentPostKeyAsyncWithHttpInfo(CreateKeyOption body = null);

        /// <summary>
        /// Follow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to follow</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentPutFollowAsync(string username);

        /// <summary>
        /// Follow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to follow</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentPutFollowAsyncWithHttpInfo(string username);

        /// <summary>
        /// Star the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserCurrentPutStarAsync(string owner, string repo);

        /// <summary>
        /// Star the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentPutStarAsyncWithHttpInfo(string owner, string repo);

        /// <summary>
        /// List the current user&#39;s tracked times
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;TrackedTime&gt;</returns>
        System.Threading.Tasks.Task<List<TrackedTime>> UserCurrentTrackedTimesAsync();

        /// <summary>
        /// List the current user&#39;s tracked times
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;TrackedTime&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackedTime>>> UserCurrentTrackedTimesAsyncWithHttpInfo();

        /// <summary>
        /// Delete email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserDeleteEmailAsync(DeleteEmailOption body = null);

        /// <summary>
        /// Delete email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UserDeleteEmailAsyncWithHttpInfo(DeleteEmailOption body = null);

        /// <summary>
        /// Get a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to get</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UserGetAsync(string username);

        /// <summary>
        /// Get a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to get</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UserGetAsyncWithHttpInfo(string username);

        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UserGetCurrentAsync();

        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UserGetCurrentAsyncWithHttpInfo();

        /// <summary>
        /// List the authenticated user&#39;s access tokens
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserGetTokensAsync();

        /// <summary>
        /// List the authenticated user&#39;s access tokens
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UserGetTokensAsyncWithHttpInfo();

        /// <summary>
        /// List the authenticated user&#39;s email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;Email&gt;</returns>
        System.Threading.Tasks.Task<List<Email>> UserListEmailsAsync();

        /// <summary>
        /// List the authenticated user&#39;s email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;Email&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Email>>> UserListEmailsAsyncWithHttpInfo();

        /// <summary>
        /// List the given user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserListFollowersAsync(string username);

        /// <summary>
        /// List the given user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserListFollowersAsyncWithHttpInfo(string username);

        /// <summary>
        /// List the users that the given user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserListFollowingAsync(string username);

        /// <summary>
        /// List the users that the given user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserListFollowingAsyncWithHttpInfo(string username);

        /// <summary>
        /// List the given user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of List&lt;GPGKey&gt;</returns>
        System.Threading.Tasks.Task<List<GPGKey>> UserListGPGKeysAsync(string username);

        /// <summary>
        /// List the given user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;GPGKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GPGKey>>> UserListGPGKeysAsyncWithHttpInfo(string username);

        /// <summary>
        /// List the given user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of List&lt;PublicKey&gt;</returns>
        System.Threading.Tasks.Task<List<PublicKey>> UserListKeysAsync(string username);

        /// <summary>
        /// List the given user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;PublicKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PublicKey>>> UserListKeysAsyncWithHttpInfo(string username);

        /// <summary>
        /// List the repos owned by the given user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        System.Threading.Tasks.Task<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserListReposAsync(string username);

        /// <summary>
        /// List the repos owned by the given user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>> UserListReposAsyncWithHttpInfo(string username);

        /// <summary>
        /// The repos that the given user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        System.Threading.Tasks.Task<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserListStarredAsync(string username);

        /// <summary>
        /// The repos that the given user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>> UserListStarredAsyncWithHttpInfo(string username);

        /// <summary>
        /// List the repositories watched by a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of the user</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        System.Threading.Tasks.Task<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserListSubscriptionsAsync(string username);

        /// <summary>
        /// List the repositories watched by a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of the user</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>> UserListSubscriptionsAsyncWithHttpInfo(string username);

        /// <summary>
        /// Search for users
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="q">keyword (optional)</param>
        /// <param name="limit">maximum number of users to return (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UserSearchAsync(string q = null, int? limit = null);

        /// <summary>
        /// Search for users
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="q">keyword (optional)</param>
        /// <param name="limit">maximum number of users to return (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UserSearchAsyncWithHttpInfo(string q = null, int? limit = null);

        /// <summary>
        /// List a user&#39;s tracked times in a repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>Task of List&lt;TrackedTime&gt;</returns>
        System.Threading.Tasks.Task<List<TrackedTime>> UserTrackedTimesAsync(string owner, string repo, string user);

        /// <summary>
        /// List a user&#39;s tracked times in a repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;TrackedTime&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TrackedTime>>> UserTrackedTimesAsyncWithHttpInfo(string owner, string repo, string user);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    [SuppressMessage("Microsoft.StyleCop.CSharp.DocumentationRules", "CS1574:XML comment has cref attribute '{0}' that could not be resolved", Justification = "Justification")]
    public partial class UserApi : IUserApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <param name="basePath">base path for the user api</param>
        public UserApi(string basePath)
        {
            this.Configuration = new Client.Configuration { BasePath = basePath };

            ExceptionFactory = Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        public UserApi(Client.Configuration configuration = null)
        {
            // use the default one in Configuration
            if (configuration == null)
            {
                this.Configuration = Client.Configuration.Default;
            }
            else
            {
                this.Configuration = configuration;
            }

            ExceptionFactory = Altinn.Studio.Designer.RepositoryClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        /// <returns>the base path</returns>
        public string GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">the base path for th user api</param>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Altinn.Studio.Designer.RepositoryClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return _exceptionFactory;
            }

            set
            {
                _exceptionFactory = value;
            }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a repository
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Repository</returns>
        public Model.Repository CreateCurrentUserRepo(CreateRepoOption body = null)
        {
             ApiResponse<Altinn.Studio.Designer.RepositoryClient.Model.Repository> localVarResponse = CreateCurrentUserRepoWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a repository
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Repository</returns>
        public ApiResponse<Altinn.Studio.Designer.RepositoryClient.Model.Repository> CreateCurrentUserRepoWithHttpInfo(CreateRepoOption body = null)
        {
            var localVarPath = "/user/repos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCurrentUserRepo", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Altinn.Studio.Designer.RepositoryClient.Model.Repository>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model.Repository)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model.Repository)));
        }

        /// <summary>
        /// Create a repository
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of Repository</returns>
        public async System.Threading.Tasks.Task<Altinn.Studio.Designer.RepositoryClient.Model.Repository> CreateCurrentUserRepoAsync(CreateRepoOption body = null)
        {
             ApiResponse<Altinn.Studio.Designer.RepositoryClient.Model.Repository> localVarResponse = await CreateCurrentUserRepoAsyncWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a repository
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> CreateCurrentUserRepoAsyncWithHttpInfo(CreateRepoOption body = null)
        {
            var localVarPath = "/user/repos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCurrentUserRepo", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<Altinn.Studio.Designer.RepositoryClient.Model.Repository>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model.Repository)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model.Repository)));
        }

        /// <summary>
        /// Add email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;Email&gt;</returns>
        public List<Email> UserAddEmail(CreateEmailOption body = null)
        {
             ApiResponse<List<Email>> localVarResponse = UserAddEmailWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Email&gt;</returns>
        public ApiResponse<List<Email>> UserAddEmailWithHttpInfo(CreateEmailOption body = null)
        {
            var localVarPath = "/user/emails";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserAddEmail", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Email>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Email>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Email>)));
        }

        /// <summary>
        /// Add email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;Email&gt;</returns>
        public async System.Threading.Tasks.Task<List<Email>> UserAddEmailAsync(CreateEmailOption body = null)
        {
             ApiResponse<List<Email>> localVarResponse = await UserAddEmailAsyncWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Email&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Email>>> UserAddEmailAsyncWithHttpInfo(CreateEmailOption body = null)
        {
            var localVarPath = "/user/emails";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserAddEmail", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Email>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Email>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Email>)));
        }

        /// <summary>
        /// Check if one user is following another user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="follower">username of following user</param>
        /// <param name="followee">username of followed user</param>
        public void UserCheckFollowing(string follower, string followee)
        {
             UserCheckFollowingWithHttpInfo(follower, followee);
        }

        /// <summary>
        /// Check if one user is following another user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="follower">username of following user</param>
        /// <param name="followee">username of followed user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UserCheckFollowingWithHttpInfo(string follower, string followee)
        {
            // verify the required parameter 'follower' is set
            if (follower == null)
            {
                throw new ApiException(400, "Missing required parameter 'follower' when calling UserApi->UserCheckFollowing");
            }

            // verify the required parameter 'followee' is set
            if (followee == null)
            {
                throw new ApiException(400, "Missing required parameter 'followee' when calling UserApi->UserCheckFollowing");
            }

            var localVarPath = "/users/{follower}/following/{followee}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (follower != null)
            {
                localVarPathParams.Add("follower", Configuration.ApiClient.ParameterToString(follower)); // path parameter
            }

            if (followee != null)
            {
                localVarPathParams.Add("followee", Configuration.ApiClient.ParameterToString(followee)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCheckFollowing", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check if one user is following another user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="follower">username of following user</param>
        /// <param name="followee">username of followed user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCheckFollowingAsync(string follower, string followee)
        {
             await UserCheckFollowingAsyncWithHttpInfo(follower, followee);
        }

        /// <summary>
        /// Check if one user is following another user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="follower">username of following user</param>
        /// <param name="followee">username of followed user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UserCheckFollowingAsyncWithHttpInfo(string follower, string followee)
        {
            // verify the required parameter 'follower' is set
            if (follower == null)
            {
                throw new ApiException(400, "Missing required parameter 'follower' when calling UserApi->UserCheckFollowing");
            }

            // verify the required parameter 'followee' is set
            if (followee == null)
            {
                throw new ApiException(400, "Missing required parameter 'followee' when calling UserApi->UserCheckFollowing");
            }

            var localVarPath = "/users/{follower}/following/{followee}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (follower != null)
            {
                localVarPathParams.Add("follower", Configuration.ApiClient.ParameterToString(follower)); // path parameter
            }

            if (followee != null)
            {
                localVarPathParams.Add("followee", Configuration.ApiClient.ParameterToString(followee)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCheckFollowing", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create an access token
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="name"> (optional)</param>
        public void UserCreateToken(string name = null)
        {
             UserCreateTokenWithHttpInfo(name);
        }

        /// <summary>
        /// Create an access token
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UserCreateTokenWithHttpInfo(string name = null)
        {
            var localVarPath = "/users/{username}/tokens";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (name != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "name", name)); // query parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCreateToken", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create an access token
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="name"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCreateTokenAsync(string name = null)
        {
             await UserCreateTokenAsyncWithHttpInfo(name);
        }

        /// <summary>
        /// Create an access token
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="name"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UserCreateTokenAsyncWithHttpInfo(string name = null)
        {
            var localVarPath = "/users/{username}/tokens";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (name != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "name", name)); // query parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCreateToken", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check whether a user is followed by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="followee">username of followed user</param>
        public void UserCurrentCheckFollowing(string followee)
        {
             UserCurrentCheckFollowingWithHttpInfo(followee);
        }

        /// <summary>
        /// Check whether a user is followed by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="followee">username of followed user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UserCurrentCheckFollowingWithHttpInfo(string followee)
        {
            // verify the required parameter 'followee' is set
            if (followee == null)
            {
                throw new ApiException(400, "Missing required parameter 'followee' when calling UserApi->UserCurrentCheckFollowing");
            }

            var localVarPath = "/user/following/{followee}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (followee != null)
            {
                localVarPathParams.Add("followee", Configuration.ApiClient.ParameterToString(followee)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentCheckFollowing", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check whether a user is followed by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="followee">username of followed user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentCheckFollowingAsync(string followee)
        {
             await UserCurrentCheckFollowingAsyncWithHttpInfo(followee);
        }

        /// <summary>
        /// Check whether a user is followed by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="followee">username of followed user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentCheckFollowingAsyncWithHttpInfo(string followee)
        {
            // verify the required parameter 'followee' is set
            if (followee == null)
            {
                throw new ApiException(400, "Missing required parameter 'followee' when calling UserApi->UserCurrentCheckFollowing");
            }

            var localVarPath = "/user/following/{followee}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (followee != null)
            {
                localVarPathParams.Add("followee", Configuration.ApiClient.ParameterToString(followee)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentCheckFollowing", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Whether the authenticated is starring the repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        public void UserCurrentCheckStarring(string owner, string repo)
        {
             UserCurrentCheckStarringWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Whether the authenticated is starring the repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UserCurrentCheckStarringWithHttpInfo(string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserCurrentCheckStarring");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserCurrentCheckStarring");
            }

            var localVarPath = "/user/starred/{owner}/{repo}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (owner != null)
            {
                localVarPathParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // path parameter
            }

            if (repo != null)
            {
                localVarPathParams.Add("repo", Configuration.ApiClient.ParameterToString(repo)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentCheckStarring", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Whether the authenticated is starring the repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentCheckStarringAsync(string owner, string repo)
        {
             await UserCurrentCheckStarringAsyncWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Whether the authenticated is starring the repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentCheckStarringAsyncWithHttpInfo(string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserCurrentCheckStarring");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserCurrentCheckStarring");
            }

            var localVarPath = "/user/starred/{owner}/{repo}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (owner != null)
            {
                localVarPathParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // path parameter
            }

            if (repo != null)
            {
                localVarPathParams.Add("repo", Configuration.ApiClient.ParameterToString(repo)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentCheckStarring", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to unfollow</param>
        public void UserCurrentDeleteFollow(string username)
        {
             UserCurrentDeleteFollowWithHttpInfo(username);
        }

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to unfollow</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UserCurrentDeleteFollowWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCurrentDeleteFollow");
            }

            var localVarPath = "/user/following/{username}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.DELETE,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentDeleteFollow", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to unfollow</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentDeleteFollowAsync(string username)
        {
             await UserCurrentDeleteFollowAsyncWithHttpInfo(username);
        }

        /// <summary>
        /// Unfollow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to unfollow</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentDeleteFollowAsyncWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCurrentDeleteFollow");
            }

            var localVarPath = "/user/following/{username}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.DELETE,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentDeleteFollow", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        public void UserCurrentDeleteGPGKey(int? id)
        {
             UserCurrentDeleteGPGKeyWithHttpInfo(id);
        }

        /// <summary>
        /// Remove a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UserCurrentDeleteGPGKeyWithHttpInfo(int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserCurrentDeleteGPGKey");
            }

            var localVarPath = "/user/gpg_keys/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.DELETE,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentDeleteGPGKey", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentDeleteGPGKeyAsync(int? id)
        {
             await UserCurrentDeleteGPGKeyAsyncWithHttpInfo(id);
        }

        /// <summary>
        /// Remove a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentDeleteGPGKeyAsyncWithHttpInfo(int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserCurrentDeleteGPGKey");
            }

            var localVarPath = "/user/gpg_keys/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.DELETE,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentDeleteGPGKey", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        public void UserCurrentDeleteKey(int? id)
        {
             UserCurrentDeleteKeyWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UserCurrentDeleteKeyWithHttpInfo(int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserCurrentDeleteKey");
            }

            var localVarPath = "/user/keys/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.DELETE,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentDeleteKey", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentDeleteKeyAsync(int? id)
        {
             await UserCurrentDeleteKeyAsyncWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentDeleteKeyAsyncWithHttpInfo(int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserCurrentDeleteKey");
            }

            var localVarPath = "/user/keys/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.DELETE,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentDeleteKey", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unstar the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        public void UserCurrentDeleteStar(string owner, string repo)
        {
             UserCurrentDeleteStarWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Unstar the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UserCurrentDeleteStarWithHttpInfo(string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserCurrentDeleteStar");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserCurrentDeleteStar");
            }

            var localVarPath = "/user/starred/{owner}/{repo}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (owner != null)
            {
                localVarPathParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // path parameter
            }

            if (repo != null)
            {
                localVarPathParams.Add("repo", Configuration.ApiClient.ParameterToString(repo)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.DELETE,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentDeleteStar", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unstar the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentDeleteStarAsync(string owner, string repo)
        {
             await UserCurrentDeleteStarAsyncWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Unstar the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to unstar</param>
        /// <param name="repo">name of the repo to unstar</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentDeleteStarAsyncWithHttpInfo(string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserCurrentDeleteStar");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserCurrentDeleteStar");
            }

            var localVarPath = "/user/starred/{owner}/{repo}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (owner != null)
            {
                localVarPathParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // path parameter
            }

            if (repo != null)
            {
                localVarPathParams.Add("repo", Configuration.ApiClient.ParameterToString(repo)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.DELETE,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentDeleteStar", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>GPGKey</returns>
        public GPGKey UserCurrentGetGPGKey(int? id)
        {
             ApiResponse<GPGKey> localVarResponse = UserCurrentGetGPGKeyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>ApiResponse of GPGKey</returns>
        public ApiResponse<GPGKey> UserCurrentGetGPGKeyWithHttpInfo(int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserCurrentGetGPGKey");
            }

            var localVarPath = "/user/gpg_keys/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentGetGPGKey", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<GPGKey>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GPGKey)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GPGKey)));
        }

        /// <summary>
        /// Get a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>Task of GPGKey</returns>
        public async System.Threading.Tasks.Task<GPGKey> UserCurrentGetGPGKeyAsync(int? id)
        {
             ApiResponse<GPGKey> localVarResponse = await UserCurrentGetGPGKeyAsyncWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>Task of ApiResponse (GPGKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GPGKey>> UserCurrentGetGPGKeyAsyncWithHttpInfo(int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserCurrentGetGPGKey");
            }

            var localVarPath = "/user/gpg_keys/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentGetGPGKey", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<GPGKey>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GPGKey)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GPGKey)));
        }

        /// <summary>
        /// Get a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>PublicKey</returns>
        public PublicKey UserCurrentGetKey(int? id)
        {
             ApiResponse<PublicKey> localVarResponse = UserCurrentGetKeyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>ApiResponse of PublicKey</returns>
        public ApiResponse<PublicKey> UserCurrentGetKeyWithHttpInfo(int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserCurrentGetKey");
            }

            var localVarPath = "/user/keys/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentGetKey", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<PublicKey>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicKey)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicKey)));
        }

        /// <summary>
        /// Get a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>Task of PublicKey</returns>
        public async System.Threading.Tasks.Task<PublicKey> UserCurrentGetKeyAsync(int? id)
        {
             ApiResponse<PublicKey> localVarResponse = await UserCurrentGetKeyAsyncWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="id">id of key to get</param>
        /// <returns>Task of ApiResponse (PublicKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicKey>> UserCurrentGetKeyAsyncWithHttpInfo(int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, "Missing required parameter 'id' when calling UserApi->UserCurrentGetKey");
            }

            var localVarPath = "/user/keys/{id}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (id != null)
            {
                localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentGetKey", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<PublicKey>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicKey)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicKey)));
        }

        /// <summary>
        /// List the authenticated user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserCurrentListFollowers()
        {
             ApiResponse<List<User>> localVarResponse = UserCurrentListFollowersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> UserCurrentListFollowersWithHttpInfo()
        {
            var localVarPath = "/user/followers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListFollowers", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<User>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List the authenticated user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserCurrentListFollowersAsync()
        {
             ApiResponse<List<User>> localVarResponse = await UserCurrentListFollowersAsyncWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UserCurrentListFollowersAsyncWithHttpInfo()
        {
            var localVarPath = "/user/followers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListFollowers", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<User>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List the users that the authenticated user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserCurrentListFollowing()
        {
             ApiResponse<List<User>> localVarResponse = UserCurrentListFollowingWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the users that the authenticated user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> UserCurrentListFollowingWithHttpInfo()
        {
            var localVarPath = "/user/following";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListFollowing", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<User>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List the users that the authenticated user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserCurrentListFollowingAsync()
        {
             ApiResponse<List<User>> localVarResponse = await UserCurrentListFollowingAsyncWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the users that the authenticated user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UserCurrentListFollowingAsyncWithHttpInfo()
        {
            var localVarPath = "/user/following";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListFollowing", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<User>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List the authenticated user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;GPGKey&gt;</returns>
        public List<GPGKey> UserCurrentListGPGKeys()
        {
             ApiResponse<List<GPGKey>> localVarResponse = UserCurrentListGPGKeysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;GPGKey&gt;</returns>
        public ApiResponse<List<GPGKey>> UserCurrentListGPGKeysWithHttpInfo()
        {
            var localVarPath = "/user/gpg_keys";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListGPGKeys", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<GPGKey>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GPGKey>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GPGKey>)));
        }

        /// <summary>
        /// List the authenticated user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;GPGKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<GPGKey>> UserCurrentListGPGKeysAsync()
        {
             ApiResponse<List<GPGKey>> localVarResponse = await UserCurrentListGPGKeysAsyncWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;GPGKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GPGKey>>> UserCurrentListGPGKeysAsyncWithHttpInfo()
        {
            var localVarPath = "/user/gpg_keys";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListGPGKeys", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<GPGKey>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GPGKey>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GPGKey>)));
        }

        /// <summary>
        /// List the authenticated user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;PublicKey&gt;</returns>
        public List<PublicKey> UserCurrentListKeys()
        {
             ApiResponse<List<PublicKey>> localVarResponse = UserCurrentListKeysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;PublicKey&gt;</returns>
        public ApiResponse<List<PublicKey>> UserCurrentListKeysWithHttpInfo()
        {
            var localVarPath = "/user/keys";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListKeys", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<PublicKey>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PublicKey>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PublicKey>)));
        }

        /// <summary>
        /// List the authenticated user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;PublicKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<PublicKey>> UserCurrentListKeysAsync()
        {
             ApiResponse<List<PublicKey>> localVarResponse = await UserCurrentListKeysAsyncWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;PublicKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PublicKey>>> UserCurrentListKeysAsyncWithHttpInfo()
        {
            var localVarPath = "/user/keys";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListKeys", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<PublicKey>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PublicKey>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PublicKey>)));
        }

        /// <summary>
        /// List the repos that the authenticated user owns or has access to
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;Repository&gt;</returns>
        public List<Altinn.Studio.Designer.RepositoryClient.Model.Repository> UserCurrentListRepos()
        {
             ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> localVarResponse = UserCurrentListReposWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the repos that the authenticated user owns or has access to
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        public ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserCurrentListReposWithHttpInfo()
        {
            var localVarPath = "/user/repos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListRepos", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)));
        }

        /// <summary>
        /// List the repos that the authenticated user owns or has access to
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;Repository&gt;</returns>
        public async System.Threading.Tasks.Task<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserCurrentListReposAsync()
        {
             ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> localVarResponse = await UserCurrentListReposAsyncWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the repos that the authenticated user owns or has access to
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>> UserCurrentListReposAsyncWithHttpInfo()
        {
            var localVarPath = "/user/repos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListRepos", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)));
        }

        /// <summary>
        /// The repos that the authenticated user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;Repository&gt;</returns>
        public List<Altinn.Studio.Designer.RepositoryClient.Model.Repository> UserCurrentListStarred()
        {
             ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> localVarResponse = UserCurrentListStarredWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// The repos that the authenticated user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        public ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserCurrentListStarredWithHttpInfo()
        {
            var localVarPath = "/user/starred";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListStarred", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)));
        }

        /// <summary>
        /// The repos that the authenticated user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;Repository&gt;</returns>
        public async System.Threading.Tasks.Task<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserCurrentListStarredAsync()
        {
             ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> localVarResponse = await UserCurrentListStarredAsyncWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// The repos that the authenticated user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>> UserCurrentListStarredAsyncWithHttpInfo()
        {
            var localVarPath = "/user/starred";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListStarred", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)));
        }

        /// <summary>
        /// List repositories watched by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;Repository&gt;</returns>
        public List<Altinn.Studio.Designer.RepositoryClient.Model.Repository> UserCurrentListSubscriptions()
        {
             ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> localVarResponse = UserCurrentListSubscriptionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List repositories watched by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        public ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserCurrentListSubscriptionsWithHttpInfo()
        {
            var localVarPath = "/user/subscriptions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListSubscriptions", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)));
        }

        /// <summary>
        /// List repositories watched by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;Repository&gt;</returns>
        public async System.Threading.Tasks.Task<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserCurrentListSubscriptionsAsync()
        {
             ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> localVarResponse = await UserCurrentListSubscriptionsAsyncWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List repositories watched by the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>> UserCurrentListSubscriptionsAsyncWithHttpInfo()
        {
            var localVarPath = "/user/subscriptions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentListSubscriptions", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)));
        }

        /// <summary>
        /// Create a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="form"> (optional)</param>
        /// <returns>GPGKey</returns>
        public GPGKey UserCurrentPostGPGKey(CreateGPGKeyOption form = null)
        {
             ApiResponse<GPGKey> localVarResponse = UserCurrentPostGPGKeyWithHttpInfo(form);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="form"> (optional)</param>
        /// <returns>ApiResponse of GPGKey</returns>
        public ApiResponse<GPGKey> UserCurrentPostGPGKeyWithHttpInfo(CreateGPGKeyOption form = null)
        {
            var localVarPath = "/user/gpg_keys";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (form != null && form.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(form); // http body (model) parameter
            }
            else
            {
                localVarPostBody = form; // byte array
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentPostGPGKey", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<GPGKey>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GPGKey)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GPGKey)));
        }

        /// <summary>
        /// Create a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="form"> (optional)</param>
        /// <returns>Task of GPGKey</returns>
        public async System.Threading.Tasks.Task<GPGKey> UserCurrentPostGPGKeyAsync(CreateGPGKeyOption form = null)
        {
             ApiResponse<GPGKey> localVarResponse = await UserCurrentPostGPGKeyAsyncWithHttpInfo(form);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a GPG key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="form"> (optional)</param>
        /// <returns>Task of ApiResponse (GPGKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GPGKey>> UserCurrentPostGPGKeyAsyncWithHttpInfo(CreateGPGKeyOption form = null)
        {
            var localVarPath = "/user/gpg_keys";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (form != null && form.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(form); // http body (model) parameter
            }
            else
            {
                localVarPostBody = form; // byte array
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentPostGPGKey", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<GPGKey>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GPGKey)Configuration.ApiClient.Deserialize(localVarResponse, typeof(GPGKey)));
        }

        /// <summary>
        /// Create a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>PublicKey</returns>
        public PublicKey UserCurrentPostKey(CreateKeyOption body = null)
        {
             ApiResponse<PublicKey> localVarResponse = UserCurrentPostKeyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PublicKey</returns>
        public ApiResponse<PublicKey> UserCurrentPostKeyWithHttpInfo(CreateKeyOption body = null)
        {
            var localVarPath = "/user/keys";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentPostKey", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<PublicKey>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicKey)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicKey)));
        }

        /// <summary>
        /// Create a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PublicKey</returns>
        public async System.Threading.Tasks.Task<PublicKey> UserCurrentPostKeyAsync(CreateKeyOption body = null)
        {
             ApiResponse<PublicKey> localVarResponse = await UserCurrentPostKeyAsyncWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a public key
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PublicKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicKey>> UserCurrentPostKeyAsyncWithHttpInfo(CreateKeyOption body = null)
        {
            var localVarPath = "/user/keys";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentPostKey", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<PublicKey>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicKey)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicKey)));
        }

        /// <summary>
        /// Follow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to follow</param>
        public void UserCurrentPutFollow(string username)
        {
             UserCurrentPutFollowWithHttpInfo(username);
        }

        /// <summary>
        /// Follow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to follow</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UserCurrentPutFollowWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCurrentPutFollow");
            }

            var localVarPath = "/user/following/{username}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.PUT,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentPutFollow", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Follow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to follow</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentPutFollowAsync(string username)
        {
             await UserCurrentPutFollowAsyncWithHttpInfo(username);
        }

        /// <summary>
        /// Follow a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to follow</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentPutFollowAsyncWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserCurrentPutFollow");
            }

            var localVarPath = "/user/following/{username}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.PUT,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentPutFollow", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Star the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        public void UserCurrentPutStar(string owner, string repo)
        {
             UserCurrentPutStarWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Star the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UserCurrentPutStarWithHttpInfo(string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserCurrentPutStar");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserCurrentPutStar");
            }

            var localVarPath = "/user/starred/{owner}/{repo}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (owner != null)
            {
                localVarPathParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // path parameter
            }

            if (repo != null)
            {
                localVarPathParams.Add("repo", Configuration.ApiClient.ParameterToString(repo)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.PUT,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentPutStar", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Star the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserCurrentPutStarAsync(string owner, string repo)
        {
             await UserCurrentPutStarAsyncWithHttpInfo(owner, repo);
        }

        /// <summary>
        /// Star the given repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo to star</param>
        /// <param name="repo">name of the repo to star</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UserCurrentPutStarAsyncWithHttpInfo(string owner, string repo)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserCurrentPutStar");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserCurrentPutStar");
            }

            var localVarPath = "/user/starred/{owner}/{repo}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
                "text/html",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (owner != null)
            {
                localVarPathParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // path parameter
            }

            if (repo != null)
            {
                localVarPathParams.Add("repo", Configuration.ApiClient.ParameterToString(repo)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.PUT,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentPutStar", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List the current user&#39;s tracked times
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;TrackedTime&gt;</returns>
        public List<TrackedTime> UserCurrentTrackedTimes()
        {
             ApiResponse<List<TrackedTime>> localVarResponse = UserCurrentTrackedTimesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the current user&#39;s tracked times
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;TrackedTime&gt;</returns>
        public ApiResponse<List<TrackedTime>> UserCurrentTrackedTimesWithHttpInfo()
        {
            var localVarPath = "/user/times";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentTrackedTimes", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<TrackedTime>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackedTime>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackedTime>)));
        }

        /// <summary>
        /// List the current user&#39;s tracked times
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;TrackedTime&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackedTime>> UserCurrentTrackedTimesAsync()
        {
             ApiResponse<List<TrackedTime>> localVarResponse = await UserCurrentTrackedTimesAsyncWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the current user&#39;s tracked times
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;TrackedTime&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrackedTime>>> UserCurrentTrackedTimesAsyncWithHttpInfo()
        {
            var localVarPath = "/user/times";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCurrentTrackedTimes", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<TrackedTime>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackedTime>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackedTime>)));
        }

        /// <summary>
        /// Delete email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        public void UserDeleteEmail(DeleteEmailOption body = null)
        {
             UserDeleteEmailWithHttpInfo(body);
        }

        /// <summary>
        /// Delete email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UserDeleteEmailWithHttpInfo(DeleteEmailOption body = null)
        {
            var localVarPath = "/user/emails";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.DELETE,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserDeleteEmail", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserDeleteEmailAsync(DeleteEmailOption body = null)
        {
             await UserDeleteEmailAsyncWithHttpInfo(body);
        }

        /// <summary>
        /// Delete email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UserDeleteEmailAsyncWithHttpInfo(DeleteEmailOption body = null)
        {
            var localVarPath = "/user/emails";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.DELETE,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserDeleteEmail", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to get</param>
        /// <returns>User</returns>
        public User UserGet(string username)
        {
             ApiResponse<User> localVarResponse = UserGetWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to get</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> UserGetWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserGet");
            }

            var localVarPath = "/users/{username}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGet", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<User>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User)Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to get</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UserGetAsync(string username)
        {
             ApiResponse<User> localVarResponse = await UserGetAsyncWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user to get</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UserGetAsyncWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserGet");
            }

            var localVarPath = "/users/{username}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGet", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<User>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User)Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>User</returns>
        public User UserGetCurrent()
        {
             ApiResponse<User> localVarResponse = UserGetCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> UserGetCurrentWithHttpInfo()
        {
            var localVarPath = "/user";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetCurrent", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<User>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User)Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UserGetCurrentAsync()
        {
             ApiResponse<User> localVarResponse = await UserGetCurrentAsyncWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the authenticated user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UserGetCurrentAsyncWithHttpInfo()
        {
            var localVarPath = "/user";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetCurrent", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<User>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User)Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// List the authenticated user&#39;s access tokens
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        public void UserGetTokens()
        {
             UserGetTokensWithHttpInfo();
        }

        /// <summary>
        /// List the authenticated user&#39;s access tokens
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UserGetTokensWithHttpInfo()
        {
            var localVarPath = "/users/{username}/tokens";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetTokens", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List the authenticated user&#39;s access tokens
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserGetTokensAsync()
        {
             await UserGetTokensAsyncWithHttpInfo();
        }

        /// <summary>
        /// List the authenticated user&#39;s access tokens
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UserGetTokensAsyncWithHttpInfo()
        {
            var localVarPath = "/users/{username}/tokens";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetTokens", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List the authenticated user&#39;s email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>List&lt;Email&gt;</returns>
        public List<Email> UserListEmails()
        {
             ApiResponse<List<Email>> localVarResponse = UserListEmailsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>ApiResponse of List&lt;Email&gt;</returns>
        public ApiResponse<List<Email>> UserListEmailsWithHttpInfo()
        {
            var localVarPath = "/user/emails";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListEmails", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Email>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Email>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Email>)));
        }

        /// <summary>
        /// List the authenticated user&#39;s email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of List&lt;Email&gt;</returns>
        public async System.Threading.Tasks.Task<List<Email>> UserListEmailsAsync()
        {
             ApiResponse<List<Email>> localVarResponse = await UserListEmailsAsyncWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the authenticated user&#39;s email addresses
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <returns>Task of ApiResponse (List&lt;Email&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Email>>> UserListEmailsAsyncWithHttpInfo()
        {
            var localVarPath = "/user/emails";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListEmails", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Email>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Email>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Email>)));
        }

        /// <summary>
        /// List the given user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserListFollowers(string username)
        {
             ApiResponse<List<User>> localVarResponse = UserListFollowersWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the given user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> UserListFollowersWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListFollowers");
            }

            var localVarPath = "/users/{username}/followers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListFollowers", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<User>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List the given user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserListFollowersAsync(string username)
        {
             ApiResponse<List<User>> localVarResponse = await UserListFollowersAsyncWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the given user&#39;s followers
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UserListFollowersAsyncWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListFollowers");
            }

            var localVarPath = "/users/{username}/followers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListFollowers", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<User>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List the users that the given user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserListFollowing(string username)
        {
             ApiResponse<List<User>> localVarResponse = UserListFollowingWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the users that the given user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> UserListFollowingWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListFollowing");
            }

            var localVarPath = "/users/{username}/following";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListFollowing", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<User>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List the users that the given user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserListFollowingAsync(string username)
        {
             ApiResponse<List<User>> localVarResponse = await UserListFollowingAsyncWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the users that the given user is following
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UserListFollowingAsyncWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListFollowing");
            }

            var localVarPath = "/users/{username}/following";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListFollowing", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<User>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List the given user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>List&lt;GPGKey&gt;</returns>
        public List<GPGKey> UserListGPGKeys(string username)
        {
             ApiResponse<List<GPGKey>> localVarResponse = UserListGPGKeysWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the given user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>ApiResponse of List&lt;GPGKey&gt;</returns>
        public ApiResponse<List<GPGKey>> UserListGPGKeysWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListGPGKeys");
            }

            var localVarPath = "/users/{username}/gpg_keys";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListGPGKeys", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<GPGKey>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GPGKey>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GPGKey>)));
        }

        /// <summary>
        /// List the given user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of List&lt;GPGKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<GPGKey>> UserListGPGKeysAsync(string username)
        {
             ApiResponse<List<GPGKey>> localVarResponse = await UserListGPGKeysAsyncWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the given user&#39;s GPG keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;GPGKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GPGKey>>> UserListGPGKeysAsyncWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListGPGKeys");
            }

            var localVarPath = "/users/{username}/gpg_keys";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListGPGKeys", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<GPGKey>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GPGKey>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GPGKey>)));
        }

        /// <summary>
        /// List the given user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>List&lt;PublicKey&gt;</returns>
        public List<PublicKey> UserListKeys(string username)
        {
             ApiResponse<List<PublicKey>> localVarResponse = UserListKeysWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the given user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>ApiResponse of List&lt;PublicKey&gt;</returns>
        public ApiResponse<List<PublicKey>> UserListKeysWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListKeys");
            }

            var localVarPath = "/users/{username}/keys";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListKeys", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<PublicKey>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PublicKey>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PublicKey>)));
        }

        /// <summary>
        /// List the given user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of List&lt;PublicKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<PublicKey>> UserListKeysAsync(string username)
        {
             ApiResponse<List<PublicKey>> localVarResponse = await UserListKeysAsyncWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the given user&#39;s public keys
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;PublicKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PublicKey>>> UserListKeysAsyncWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListKeys");
            }

            var localVarPath = "/users/{username}/keys";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListKeys", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<PublicKey>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PublicKey>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PublicKey>)));
        }

        /// <summary>
        /// List the repos owned by the given user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>List&lt;Repository&gt;</returns>
        public List<Altinn.Studio.Designer.RepositoryClient.Model.Repository> UserListRepos(string username)
        {
             ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> localVarResponse = UserListReposWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the repos owned by the given user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        public ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserListReposWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListRepos");
            }

            var localVarPath = "/users/{username}/repos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListRepos", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)));
        }

        /// <summary>
        /// List the repos owned by the given user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        public async System.Threading.Tasks.Task<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserListReposAsync(string username)
        {
             ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> localVarResponse = await UserListReposAsyncWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the repos owned by the given user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>> UserListReposAsyncWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListRepos");
            }

            var localVarPath = "/users/{username}/repos";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListRepos", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)));
        }

        /// <summary>
        /// The repos that the given user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>List&lt;Repository&gt;</returns>
        public List<Altinn.Studio.Designer.RepositoryClient.Model.Repository> UserListStarred(string username)
        {
             ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> localVarResponse = UserListStarredWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The repos that the given user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        public ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserListStarredWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListStarred");
            }

            var localVarPath = "/users/{username}/starred";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListStarred", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)));
        }

        /// <summary>
        /// The repos that the given user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        public async System.Threading.Tasks.Task<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserListStarredAsync(string username)
        {
             ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> localVarResponse = await UserListStarredAsyncWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The repos that the given user has starred
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>> UserListStarredAsyncWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListStarred");
            }

            var localVarPath = "/users/{username}/starred";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListStarred", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)));
        }

        /// <summary>
        /// List the repositories watched by a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of the user</param>
        /// <returns>List&lt;Repository&gt;</returns>
        public List<Altinn.Studio.Designer.RepositoryClient.Model.Repository> UserListSubscriptions(string username)
        {
             ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> localVarResponse = UserListSubscriptionsWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the repositories watched by a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of the user</param>
        /// <returns>ApiResponse of List&lt;Repository&gt;</returns>
        public ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserListSubscriptionsWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListSubscriptions");
            }

            var localVarPath = "/users/{username}/subscriptions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListSubscriptions", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)));
        }

        /// <summary>
        /// List the repositories watched by a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of the user</param>
        /// <returns>Task of List&lt;Repository&gt;</returns>
        public async System.Threading.Tasks.Task<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> UserListSubscriptionsAsync(string username)
        {
             ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>> localVarResponse = await UserListSubscriptionsAsyncWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the repositories watched by a user
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="username">username of the user</param>
        /// <returns>Task of ApiResponse (List&lt;Repository&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>> UserListSubscriptionsAsyncWithHttpInfo(string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ApiException(400, "Missing required parameter 'username' when calling UserApi->UserListSubscriptions");
            }

            var localVarPath = "/users/{username}/subscriptions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (username != null)
            {
                localVarPathParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserListSubscriptions", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Altinn.Studio.Designer.RepositoryClient.Model.Repository>)));
        }

        /// <summary>
        /// Search for users
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="q">keyword (optional)</param>
        /// <param name="limit">maximum number of users to return (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UserSearch(string q = null, int? limit = null)
        {
             ApiResponse<List<User>> localVarResponse = UserSearchWithHttpInfo(q, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for users
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="q">keyword (optional)</param>
        /// <param name="limit">maximum number of users to return (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> UserSearchWithHttpInfo(string q = null, int? limit = null)
        {
            var localVarPath = "/users/search";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (q != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "q", q)); // query parameter
            }

            if (limit != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "limit", limit)); // query parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSearch", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<User>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Search for users
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="q">keyword (optional)</param>
        /// <param name="limit">maximum number of users to return (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UserSearchAsync(string q = null, int? limit = null)
        {
             ApiResponse<List<User>> localVarResponse = await UserSearchAsyncWithHttpInfo(q, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for users
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="q">keyword (optional)</param>
        /// <param name="limit">maximum number of users to return (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UserSearchAsyncWithHttpInfo(string q = null, int? limit = null)
        {
            var localVarPath = "/users/search";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (q != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "q", q)); // query parameter
            }

            if (limit != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "limit", limit)); // query parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSearch", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<User>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// List a user&#39;s tracked times in a repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>List&lt;TrackedTime&gt;</returns>
        public List<TrackedTime> UserTrackedTimes(string owner, string repo, string user)
        {
             ApiResponse<List<TrackedTime>> localVarResponse = UserTrackedTimesWithHttpInfo(owner, repo, user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s tracked times in a repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>ApiResponse of List&lt;TrackedTime&gt;</returns>
        public ApiResponse<List<TrackedTime>> UserTrackedTimesWithHttpInfo(string owner, string repo, string user)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserTrackedTimes");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserTrackedTimes");
            }

            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new ApiException(400, "Missing required parameter 'user' when calling UserApi->UserTrackedTimes");
            }

            var localVarPath = "/repos/{owner}/{repo}/times/{tracker}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (owner != null)
            {
                localVarPathParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // path parameter
            }

            if (repo != null)
            {
                localVarPathParams.Add("repo", Configuration.ApiClient.ParameterToString(repo)); // path parameter
            }

            if (user != null)
            {
                localVarPathParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTrackedTimes", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<TrackedTime>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackedTime>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackedTime>)));
        }

        /// <summary>
        /// List a user&#39;s tracked times in a repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>Task of List&lt;TrackedTime&gt;</returns>
        public async System.Threading.Tasks.Task<List<TrackedTime>> UserTrackedTimesAsync(string owner, string repo, string user)
        {
             ApiResponse<List<TrackedTime>> localVarResponse = await UserTrackedTimesAsyncWithHttpInfo(owner, repo, user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s tracked times in a repo
        /// </summary>
        /// IO.Swagger.Client.ApiException thrown when fails to make API call
        /// <param name="owner">owner of the repo</param>
        /// <param name="repo">name of the repo</param>
        /// <param name="user">username of user</param>
        /// <returns>Task of ApiResponse (List&lt;TrackedTime&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TrackedTime>>> UserTrackedTimesAsyncWithHttpInfo(string owner, string repo, string user)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
            {
                throw new ApiException(400, "Missing required parameter 'owner' when calling UserApi->UserTrackedTimes");
            }

            // verify the required parameter 'repo' is set
            if (repo == null)
            {
                throw new ApiException(400, "Missing required parameter 'repo' when calling UserApi->UserTrackedTimes");
            }

            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new ApiException(400, "Missing required parameter 'user' when calling UserApi->UserTrackedTimes");
            }

            var localVarPath = "/repos/{owner}/{repo}/times/{tracker}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[]
            {
                "application/json",
                "text/plain",
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[]
            {
                "application/json",
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (owner != null)
            {
                localVarPathParams.Add("owner", Configuration.ApiClient.ParameterToString(owner)); // path parameter
            }

            if (repo != null)
            {
                localVarPathParams.Add("repo", Configuration.ApiClient.ParameterToString(repo)); // path parameter
            }

            if (user != null)
            {
                localVarPathParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // path parameter
            }

            // authentication (AccessToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("access_token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "access_token", Configuration.GetApiKeyWithPrefix("access_token")));
            }

            // authentication (AuthorizationHeaderToken) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(Configuration.Username) || !string.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // authentication (Token) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "token", Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTrackedTimes", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<List<TrackedTime>>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TrackedTime>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TrackedTime>)));
        }
    }
}
