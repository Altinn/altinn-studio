/*
 * Gitea API.
 *
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.1.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Altinn.Studio.Designer.RepositoryClient.Client.SwaggerDateConverter;

namespace Altinn.Studio.Designer.RepositoryClient.Model
{
    /// <summary>
    /// CreateKeyOption options when creating a key
    /// </summary>
    [DataContract]
    public partial class CreateKeyOption : IEquatable<CreateKeyOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateKeyOption" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateKeyOption()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateKeyOption" /> class.
        /// </summary>
        /// <param name="Key">An armored SSH key to add (required).</param>
        /// <param name="_ReadOnly">Describe if the key has only read access or read/write.</param>
        /// <param name="Title">Title of the key to add (required).</param>
        public CreateKeyOption(string Key = default(string), bool? _ReadOnly = default(bool?), string Title = default(string))
        {
            // to ensure "Key" is required (not null)
            if (Key == null)
            {
                throw new InvalidDataException("Key is a required property for CreateKeyOption and cannot be null");
            }
            else
            {
                this.Key = Key;
            }

            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for CreateKeyOption and cannot be null");
            }
            else
            {
                this.Title = Title;
            }

            this.IsReadOnly = _ReadOnly;
        }

        /// <summary>
        /// An armored SSH key to add
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Describe if the key has only read access or read/write
        /// </summary>
        [DataMember(Name="read_only", EmitDefaultValue=false)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Title of the key to add
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateKeyOption {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  _ReadOnly: ").Append(IsReadOnly).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateKeyOption);
        }

        /// <summary>
        /// Returns true if CreateKeyOption instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateKeyOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateKeyOption input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))) &&
                (
                    this.IsReadOnly == input.IsReadOnly ||
                    (this.IsReadOnly != null &&
                    this.IsReadOnly.Equals(input.IsReadOnly))) &&
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title)));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // Overflow is fine, just wrap
            unchecked
            {
                int hashCode = 41;
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }

                if (this.IsReadOnly != null)
                {
                    hashCode = (hashCode * 59) + this.IsReadOnly.GetHashCode();
                }

                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
