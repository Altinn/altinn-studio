using Microsoft.ApplicationInsights.AspNetCore.Extensions;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace Altinn.App.Tests.Common;

public static class AppBuilder
{
    public static WebApplication Build(
        WebApplicationBuilder? builder = default,
        IEnumerable<KeyValuePair<string, string?>>? configData = default,
        Action<IServiceCollection>? registerCustomAppServices = default,
        Action<IServiceCollection>? overrideAltinnAppServices = default
    )
    {
        // Here we follow the order of operations currently present in the Program.cs generated by the template for apps,
        // which is the following:

        // 0. WebApplication.CreateBuilder()
        builder ??= WebApplication.CreateBuilder();
        builder.Environment.EnvironmentName = "Development";

        builder.Configuration.AddInMemoryCollection([new("GeneralSettings:IsTest", "true")]);
        if (configData is not null)
        {
            builder.Configuration.AddInMemoryCollection(configData);
        }

        // 1. AddAltinnAppControllersWithViews
        Api.Extensions.ServiceCollectionExtensions.AddAltinnAppControllersWithViews(builder.Services);

        // 2. RegisterCustomAppServices
        registerCustomAppServices?.Invoke(builder.Services);

        // 3. AddAltinnAppServices
        Api.Extensions.ServiceCollectionExtensions.AddAltinnAppServices(
            builder.Services,
            builder.Configuration,
            builder.Environment
        );
        builder.Services.Configure<ApplicationInsightsServiceOptions>(options =>
            options.RequestCollectionOptions.InjectResponseHeaders = false
        );

        // 4. OverrideAltinnAppServices
        overrideAltinnAppServices?.Invoke(builder.Services);

        // 5. ConfigureAppWebHost
        Api.Extensions.WebHostBuilderExtensions.ConfigureAppWebHost(builder.WebHost, []);

        // 6. UseAltinnAppCommonConfiguration
        var app = builder.Build();
        Api.Extensions.WebApplicationBuilderExtensions.UseAltinnAppCommonConfiguration(app);

        return app;
    }
}
