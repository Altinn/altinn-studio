// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: internal/proto/contract.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PdfWorker_Generate_FullMethodName = "/proto.PdfWorker/Generate"
	PdfWorker_Health_FullMethodName   = "/proto.PdfWorker/Health"
)

// PdfWorkerClient is the client API for PdfWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type PdfWorkerClient interface {
	// Generate PDF from URL with specified options
	Generate(ctx context.Context, in *PdfRequest, opts ...grpc.CallOption) (*PdfResponse, error)
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type pdfWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewPdfWorkerClient(cc grpc.ClientConnInterface) PdfWorkerClient {
	return &pdfWorkerClient{cc}
}

func (c *pdfWorkerClient) Generate(ctx context.Context, in *PdfRequest, opts ...grpc.CallOption) (*PdfResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PdfResponse)
	err := c.cc.Invoke(ctx, PdfWorker_Generate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdfWorkerClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, PdfWorker_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PdfWorkerServer is the server API for PdfWorker service.
// All implementations must embed UnimplementedPdfWorkerServer
// for forward compatibility.
//
// Interface exported by the server.
type PdfWorkerServer interface {
	// Generate PDF from URL with specified options
	Generate(context.Context, *PdfRequest) (*PdfResponse, error)
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	mustEmbedUnimplementedPdfWorkerServer()
}

// UnimplementedPdfWorkerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPdfWorkerServer struct{}

func (UnimplementedPdfWorkerServer) Generate(context.Context, *PdfRequest) (*PdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedPdfWorkerServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedPdfWorkerServer) mustEmbedUnimplementedPdfWorkerServer() {}
func (UnimplementedPdfWorkerServer) testEmbeddedByValue()                   {}

// UnsafePdfWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdfWorkerServer will
// result in compilation errors.
type UnsafePdfWorkerServer interface {
	mustEmbedUnimplementedPdfWorkerServer()
}

func RegisterPdfWorkerServer(s grpc.ServiceRegistrar, srv PdfWorkerServer) {
	// If the following call pancis, it indicates UnimplementedPdfWorkerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PdfWorker_ServiceDesc, srv)
}

func _PdfWorker_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfWorkerServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PdfWorker_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfWorkerServer).Generate(ctx, req.(*PdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdfWorker_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfWorkerServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PdfWorker_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfWorkerServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PdfWorker_ServiceDesc is the grpc.ServiceDesc for PdfWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PdfWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PdfWorker",
	HandlerType: (*PdfWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _PdfWorker_Generate_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _PdfWorker_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/contract.proto",
}
