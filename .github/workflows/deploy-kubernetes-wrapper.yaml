name: Deploy Kubernetes Wrapper
on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

  workflow_dispatch:
    inputs:
      environments:
        description: 'Environments to deploy to. Multiple environments can be specified by separating them with a comma.'
        required: false
        default: 'dev'

permissions:
      id-token: write
      contents: read

jobs:
  get-short-sha:
    uses: ./.github/workflows/template-short-sha.yaml
    with:
      checkout-repository: 'Altinn/app-kubernetes-wrapper'

  determine-tag-exists:
    needs: get-short-sha
    environment: dev
    runs-on: ubuntu-latest
    outputs:
      tag-exists: ${{ steps.determine-tag-exists.outputs.tag-exists }}
    steps:
      - name: 'Azure login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_FC }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID_FC }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_FC }}

      - name: Determine tag exists
        id: determine-tag-exists
        uses: azure/CLI@v2
        with:
          azcliversion: latest
          inlineScript: |
            SHORT_SHA=${{ needs.get-short-sha.outputs.short-sha }}
            exists_tag=$(az acr repository show-tags --name altinntjenestercontainerregistry --repository altinn-kuberneteswrapper --query "[?contains(@, '$SHORT_SHA')]" --output tsv)
            if [ -z "$exists_tag" ]; then
              echo "tag-exists=false" >> $GITHUB_OUTPUT
            else
              echo "tag-exists=true" >> $GITHUB_OUTPUT
            fi

  construct-environments-array:
    needs: [get-short-sha, determine-tag-exists]
    if: ${{ needs.determine-tag-exists.outputs.tag-exists == 'false' }}
    uses: ./.github/workflows/template-construct-environments.yaml
    with:
      environments: ${{ github.event.inputs.environments || 'dev' }}

  print-environments:
    needs: construct-environments-array
    runs-on: ubuntu-latest
    steps:
      - name: Print environments
        run: echo ${{ needs.construct-environments-array.outputs.environmentsjson }}

  docker-build-push:
    needs: [get-short-sha, determine-tag-exists, construct-environments-array]
    uses: ./.github/workflows/template-docker-push.yaml
    with:
      tags: ${{ needs.get-short-sha.outputs.short-sha }},latest
      registry-name: altinntjenestercontainerregistry.azurecr.io
      repository-name: altinn-kuberneteswrapper
      environment: dev # dev environment has push access and doesn't require review
      checkout-repository: 'Altinn/app-kubernetes-wrapper'
      context: src/KubernetesWrapper
      dockerfile: src/KubernetesWrapper/Dockerfile
    secrets:
      client-id: ${{ secrets.AZURE_CLIENT_ID_FC }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID_FC }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_FC }}

  helm-push:
    needs: [get-short-sha, determine-tag-exists, construct-environments-array]
    uses: ./.github/workflows/template-helm-push.yaml
    with:
      tag: 0.1.0+${{ needs.get-short-sha.outputs.short-sha }} # Helm version needs to be valid sematic version
      chart-name: kuberneteswrapper
      registry-name: altinntjenestercontainerregistry.azurecr.io
      environment: dev
    secrets:
      client-id: ${{ secrets.AZURE_CLIENT_ID_FC }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID_FC }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_FC }}

  flux-config-push:
    needs: [construct-environments-array, docker-build-push, helm-push]
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.construct-environments-array.outputs.environmentsjson) }}
    uses: ./.github/workflows/template-flux-config-push.yaml
    with:
      tag: ${{ needs.get-short-sha.outputs.short-sha }}
      registry-name: altinntjenestercontainerregistry.azurecr.io
      environment: ${{ matrix.environment }}
      config-chart-name: kuberneteswrapper-config
      artifact-name: kuberneteswrapper
      helm-set-arguments: environmentName=${{ matrix.environment }},chartVersion=0.1.0+${{ needs.get-short-sha.outputs.short-sha }},imageTag=${{ needs.get-short-sha.outputs.short-sha }}
    secrets:
      client-id: ${{ secrets.AZURE_CLIENT_ID_FC }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID_FC }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_FC }}

