name: Deploy Gitea Organization Runners
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/deploy-gitea-runners.yaml'
      - '.github/workflows/template-docker-push.yaml'
      - '.github/workflows/template-flux-config-push.yaml'
      - '.github/workflows/template-helm-push.yaml'
      - '.github/workflows/template-short-sha.yaml'
      - 'charts/gitea-org-runner/**'
      - 'charts/gitea-org-runner-config/**'

  workflow_dispatch:
    inputs:
      org-enviornments:
        description: 'Environments for organizations runners to be deployed to. Format of the input object is [{"org": "org-name", "environments": ["env1", "env2"]}].'
        required: false
        default: '[{"org": "ttd", "environments": ["dev"]}]'

permissions:
      id-token: write
      contents: read

jobs:
  get-short-sha:
    uses: ./.github/workflows/template-short-sha.yaml

  construct-org-environments-array:
    runs-on: ubuntu-latest
    env:
      default-org-environments: >-
        [{"org": "ttd", "environments": ["dev", "staging", "prod"]},{"org": "brg", "environments": ["prod"]}]
    outputs:
      orgenvironmentsjson: ${{ steps.construct-enviornments.outputs.orgenvironmentsjson }}
    steps:
      - name: Construct environment
        id: construct-enviornments
        run: |
          environments='${{ github.event.inputs.org-enviornments }}'
          if [ -z "$environments" ]; then
            environments='${{ env.default-org-environments }}'
          fi
          echo "Raw environments input: $environments"

          # Construct array of {org, environment}
          # This will parse the input JSON and construct an array of objects with org and environment
          # Example input: [{"org": "ttd", "environments": ["dev", "staging", "prod"]}]
          # Example output: [{"org": "ttd", "environment": "dev"}, {"org": "ttd", "environment": "staging"}, {"org": "ttd", "environment": "prod"}]
          jsonArray=$(echo "$environments" | jq -c '[.[] | .environments[] as $env | {org, environment: $env}]')
          echo "orgenvironmentsjson=${jsonArray}" >> $GITHUB_OUTPUT

  determine-tag:
    needs: get-short-sha
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.determine-tag.outputs.tag }}
    steps:
      - name: Determine tag
        id: determine-tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "tag=${{ needs.get-short-sha.outputs.short-sha }}" >> $GITHUB_OUTPUT
          else
            sanitized_branch_name=$(echo "${{ github.ref_name }}" | tr -d '()' | tr '/' '-')
            echo "tag=${sanitized_branch_name}-${{ needs.get-short-sha.outputs.short-sha }}" >> $GITHUB_OUTPUT
          fi

  docker-build-push:
    needs: [get-short-sha, determine-tag]
    uses: ./.github/workflows/template-docker-push.yaml
    with:
      tags: ${{ needs.determine-tag.outputs.tag }},latest
      registry-name: altinntjenestercontainerregistry.azurecr.io
      repository-name: altinn-gitea-runner
      context: gitea-runner
      dockerfile: gitea-runner/Dockerfile
      environment: dev # dev environment has push access and doesn't require review
    secrets:
      client-id: ${{ secrets.AZURE_CLIENT_ID_FC }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID_FC }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_FC }}

  helm-push:
    needs: [get-short-sha, determine-tag]
    uses: ./.github/workflows/template-helm-push.yaml
    with:
      tag: 0.1.0+${{ needs.determine-tag.outputs.tag }} # Helm version needs to be valid sematic version
      chart-name: gitea-org-runner
      registry-name: altinntjenestercontainerregistry.azurecr.io
      environment: dev # dev environment has push access and doesn't require review
    secrets:
      client-id: ${{ secrets.AZURE_CLIENT_ID_FC }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID_FC }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_FC }}

  flux-config-push:
    needs: [get-short-sha, docker-build-push, helm-push, determine-tag, construct-org-environments-array]
    strategy:
      matrix:
        orgenvironment: ${{ fromJSON(needs.construct-org-environments-array.outputs.orgenvironmentsjson) }}
    uses: ./.github/workflows/template-flux-config-push.yaml
    with:
      tag: ${{ needs.determine-tag.outputs.tag }}
      registry-name: altinntjenestercontainerregistry.azurecr.io
      environment: ${{ matrix.orgenvironment.environment }}
      config-chart-name: gitea-org-runner-config
      artifact-name: gitea-runner-${{ matrix.orgenvironment.org }}
      helm-set-arguments: chartVersion=0.1.0+${{ needs.determine-tag.outputs.tag }},imageTag=${{ needs.determine-tag.outputs.tag }},releaseName=gitea-runner-${{ matrix.orgenvironment.org }},registrationTokenSecretName=altinn-gitea-runner-${{ matrix.orgenvironment.org }}-secret
      trace-workflow: false
      trace-team-name: 'team-studio'
    secrets:
      client-id: ${{ secrets.AZURE_CLIENT_ID_FC }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID_FC }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_FC }}
      trace-connection-string: ${{ secrets.APP_INSIGHTS_CONNECTION_STRING }}
      trace-repo-token: ${{ secrets.GITHUB_TOKEN }}

