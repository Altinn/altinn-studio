<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <AssemblyName>Altinn.Application.For.IntegrationTesting</AssemblyName>
    <RootNamespace>Altinn.App</RootNamespace>
    <!-- Required for the fixture - compilation of injected services -->
    <!-- Specifically to use Microsoft.Extensions.DependencyModel and do runtime codegen -->
    <PreserveCompilationContext>true</PreserveCompilationContext>
  </PropertyGroup>

  <ItemGroup>
    <!--
      We reference wildcard versions because the integration test harness
      is building and packing the libaries and providing them as a local NuGet feed.
      So we dont care about the exact version, it just has to be compiled from the code in the current commit
    -->
    <PackageReference Include="Altinn.App.Api" Version="*-*">
        <CopyToOutputDirectory>lib\$(TargetFramework)\*.xml</CopyToOutputDirectory>
    </PackageReference>
    <PackageReference Include="Altinn.App.Core" Version="*-*" />

    <!-- Required for the fixture - compilation of injected services -->
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.8.0" />
    <PackageReference Include="Microsoft.Extensions.DependencyModel" Version="8.0.2" />
    <Compile Include="../_shared/*.cs" />
  </ItemGroup>
  <ItemGroup>
    <Folder Include="wwwroot\css\" />
    <Folder Include="wwwroot\script\" />
  </ItemGroup>
  <ItemGroup>
    <None Update="config\process\process.bpmn">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Update="JWTValidationCert.cer">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="**\RuleHandler.js">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>
  <PropertyGroup>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);1591;1998</NoWarn>
  </PropertyGroup>
  <Target Name="CopyXMLFromPackagesForBuild" AfterTargets="Build">
    <ItemGroup>
      <PackageReferenceFiles Condition="%(PackageReference.CopyToOutputDirectory) != ''" Include="$(NugetPackageRoot)$([MSBuild]::Escape('%(PackageReference.Identity)').ToLower())/%(PackageReference.Version)/%(PackageReference.CopyToOutputDirectory)" />
    </ItemGroup>
    <Copy SourceFiles="@(PackageReferenceFiles)" DestinationFolder="$(OutDir)" />
  </Target>
</Project>
