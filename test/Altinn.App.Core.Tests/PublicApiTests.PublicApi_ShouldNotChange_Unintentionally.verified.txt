[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/Altinn/app-lib-dotnet")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
namespace Altinn.App.Core.Configuration
{
    public class AppSettings
    {
        public const string JSON_SCHEMA_FILENAME = "schema.json";
        public const string VALIDATION_CONFIG_FILENAME = "validation.json";
        public AppSettings() { }
        public string AppBasePath { get; set; }
        public string AppOidcProvider { get; set; }
        public string AppVersion { get; set; }
        public string ApplicationMetadataFileName { get; set; }
        public string ApplicationXACMLPolicyFileName { get; init; }
        public string AuthorizationFolder { get; set; }
        [System.Obsolete("This is not used, and will be removed in the next major version")]
        public string BaseResourceFolderContainer { get; set; }
        public int CacheResourceLifeTimeInSeconds { get; set; }
        public string ConfigurationFolder { get; set; }
        public string DefaultBootstrapUrl { get; set; }
        public bool DisableCsrfCheck { get; set; }
        public string EFormidlingSender { get; set; }
        public bool EnableEFormidling { get; set; }
        public bool ExpressionValidation { get; set; }
        public string FooterFileName { get; set; }
        public string FormLayoutJSONFileName { get; set; }
        public string FormLayoutSettingsFileName { get; set; }
        public string JsonSchemaFileName { get; set; }
        public string LayoutSetsFileName { get; set; }
        public string ModelsFolder { get; set; }
        public string OpenIdWellKnownEndpoint { get; set; }
        public string OptionsFolder { get; set; }
        public string ProcessFileName { get; set; }
        public string ProcessFolder { get; set; }
        public bool RegisterEventsWithEventsComponent { get; set; }
        public bool RemoveHiddenData { get; set; }
        public bool RequiredValidation { get; set; }
        public string RuleConfigurationJSONFileName { get; set; }
        public string RuleHandlerFileName { get; set; }
        public string RuntimeAppFileName { get; set; }
        public string RuntimeCookieName { get; set; }
        public string RuntimeCssFileName { get; set; }
        public string ServiceStylesConfigFileName { get; set; }
        public string TextFolder { get; set; }
        public string UiFolder { get; set; }
        public bool UseOpenTelemetry { get; set; }
        public string ValidationConfigurationFileName { get; set; }
    }
    public class CacheSettings
    {
        public CacheSettings() { }
        public int ProfileCacheLifetimeSeconds { get; set; }
    }
    public class FrontEndSettings : System.Collections.Generic.Dictionary<string, string>
    {
        public FrontEndSettings() { }
    }
    public class GeneralSettings
    {
        public GeneralSettings() { }
        public string AltinnPartyCookieName { get; set; }
        public bool DisableLocaltestValidation { get; set; }
        public string ExternalAppBaseUrl { get; set; }
        public string FixedValidationPrefix { get; set; }
        public string GetAltinnPartyCookieName { get; }
        public string HostName { get; set; }
        public string InfoValidationPrefix { get; set; }
        public string SoftValidationPrefix { get; set; }
        public string SuccessValidationPrefix { get; set; }
        public string FormattedExternalAppBaseUrl(Altinn.App.Core.Models.AppIdentifier app) { }
    }
    [System.Obsolete("MetricSettings will no longer be supported in version 9.")]
    public class MetricsSettings
    {
        public MetricsSettings() { }
        public bool Enabled { get; set; }
        public ushort Port { get; set; }
    }
    public class PlatformSettings
    {
        public PlatformSettings() { }
        public string ApiAccessManagementEndpoint { get; set; }
        public string ApiAuthenticationEndpoint { get; set; }
        public string ApiAuthorizationEndpoint { get; set; }
        public string ApiCorrespondenceEndpoint { get; set; }
        public string ApiEventsEndpoint { get; set; }
        public string ApiNotificationEndpoint { get; set; }
        public string ApiPdf2Endpoint { get; set; }
        public string ApiProfileEndpoint { get; set; }
        public string ApiRegisterEndpoint { get; set; }
        public string ApiStorageEndpoint { get; set; }
        public string SubscriptionKey { get; set; }
    }
}
namespace Altinn.App.Core.Constants
{
    public static class AuthzConstants
    {
        public const string POLICY_INSTANCE_COMPLETE = "InstanceComplete";
        public const string POLICY_INSTANCE_DELETE = "InstanceDelete";
        public const string POLICY_INSTANCE_INSTANTIATE = "InstanceInstantiate";
        public const string POLICY_INSTANCE_READ = "InstanceRead";
        public const string POLICY_INSTANCE_WRITE = "InstanceWrite";
    }
    public static class General
    {
        public const string AppTokenName = "AltinnToken";
        public const string AuthorizationTokenHeaderName = "Authorization";
        public const string DesignerCookieName = "AltinnStudioDesigner";
        public const string EFormidlingAccessTokenHeaderName = "AltinnIntegrationPointToken";
        public const string RuntimeCookieName = "AltinnStudioRuntime";
        public const string SubscriptionKeyHeaderName = "Ocp-Apim-Subscription-Key";
    }
}
namespace Altinn.App.Core.EFormidling
{
    public static class EformidlingConstants
    {
        public const string CheckInstanceStatusEventType = "app.eformidling.reminder.checkinstancestatus";
    }
    public class EformidlingStartup : Microsoft.Extensions.Hosting.IHostedService
    {
        public EformidlingStartup(Altinn.App.Core.Models.AppIdentifier appId, Altinn.App.Core.Internal.Events.IEventsSubscription eventsSubscriptionClient, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.EFormidling.EformidlingStartup> logger) { }
        public System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken) { }
    }
}
namespace Altinn.App.Core.EFormidling.Extensions
{
    public static class ServiceCollectionExtensions
    {
        public static void AddEFormidlingServices<TM>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration configuration)
            where TM : Altinn.App.Core.EFormidling.Interface.IEFormidlingMetadata { }
        [System.Obsolete("Use AddEformidlingServices2 instead. This method will be removed in V9.")]
        public static void AddEFormidlingServices<TM, TR>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration configuration)
            where TM : Altinn.App.Core.EFormidling.Interface.IEFormidlingMetadata
            where TR : Altinn.App.Core.EFormidling.Interface.IEFormidlingReceivers { }
        public static void AddEFormidlingServices2<TM, TR>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration configuration)
            where TM : Altinn.App.Core.EFormidling.Interface.IEFormidlingMetadata
            where TR : Altinn.App.Core.EFormidling.Interface.IEFormidlingReceivers { }
    }
}
namespace Altinn.App.Core.EFormidling.Implementation
{
    public class DefaultEFormidlingReceivers : Altinn.App.Core.EFormidling.Interface.IEFormidlingReceivers
    {
        public DefaultEFormidlingReceivers(Altinn.App.Core.Internal.App.IAppMetadata appMetadata) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.Common.EFormidlingClient.Models.SBD.Receiver>> GetEFormidlingReceivers(Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public class DefaultEFormidlingService : Altinn.App.Core.EFormidling.Interface.IEFormidlingService
    {
        public DefaultEFormidlingService(Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.EFormidling.Implementation.DefaultEFormidlingService> logger, Altinn.App.Core.Internal.Auth.IUserTokenProvider userTokenProvider, Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Altinn.App.Core.Internal.Data.IDataClient dataClient, Altinn.App.Core.Internal.Events.IEventsClient eventClient, System.IServiceProvider sp, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.AppSettings>? appSettings = null, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings>? platformSettings = null, Altinn.Common.EFormidlingClient.IEFormidlingClient? eFormidlingClient = null, Altinn.Common.AccessTokenClient.Services.IAccessTokenGenerator? tokenGenerator = null) { }
        public System.Threading.Tasks.Task SendEFormidlingShipment(Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public class EformidlingDeliveryException : Altinn.App.Core.Exceptions.AltinnException
    {
        public EformidlingDeliveryException() { }
        public EformidlingDeliveryException(string message) { }
        public EformidlingDeliveryException(string message, System.Exception inner) { }
    }
    [System.Obsolete("UseEformidlingStatusCheckEventHandler2 instead. This class will be removed in V9.")]
    public class EformidlingStatusCheckEventHandler : Altinn.App.Core.Features.IEventHandler
    {
        public EformidlingStatusCheckEventHandler(Altinn.Common.EFormidlingClient.IEFormidlingClient eFormidlingClient, System.Net.Http.IHttpClientFactory httpClientFactory, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.EFormidling.Implementation.EformidlingStatusCheckEventHandler> logger, Altinn.ApiClients.Maskinporten.Interfaces.IMaskinportenService maskinportenService, Microsoft.Extensions.Options.IOptions<Altinn.ApiClients.Maskinporten.Config.MaskinportenSettings> maskinportenSettings, Altinn.App.Core.Infrastructure.Clients.Maskinporten.IX509CertificateProvider x509CertificateProvider, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.GeneralSettings> generalSettings) { }
        public string EventType { get; }
        public System.Threading.Tasks.Task<bool> ProcessEvent(Altinn.App.Core.Models.CloudEvent cloudEvent) { }
    }
    public class EformidlingStatusCheckEventHandler2 : Altinn.App.Core.Features.IEventHandler
    {
        public EformidlingStatusCheckEventHandler2(Altinn.Common.EFormidlingClient.IEFormidlingClient eFormidlingClient, System.Net.Http.IHttpClientFactory httpClientFactory, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.EFormidling.Implementation.EformidlingStatusCheckEventHandler2> logger, Altinn.App.Core.Internal.Maskinporten.IMaskinportenTokenProvider maskinportenTokenProvider, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.GeneralSettings> generalSettings) { }
        public string EventType { get; }
        public System.Threading.Tasks.Task<bool> ProcessEvent(Altinn.App.Core.Models.CloudEvent cloudEvent) { }
    }
}
namespace Altinn.App.Core.EFormidling.Interface
{
    public interface IEFormidlingMetadata
    {
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "MetadataFilename",
                "Metadata"})]
        System.Threading.Tasks.Task<System.ValueTuple<string, System.IO.Stream>> GenerateEFormidlingMetadata(Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    public interface IEFormidlingReceivers
    {
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.Common.EFormidlingClient.Models.SBD.Receiver>> GetEFormidlingReceivers(Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    public interface IEFormidlingService
    {
        System.Threading.Tasks.Task SendEFormidlingShipment(Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
}
namespace Altinn.App.Core.Exceptions
{
    public abstract class AltinnException : System.Exception
    {
        protected AltinnException() { }
        protected AltinnException(string? message) { }
        protected AltinnException(string? message, System.Exception? innerException) { }
    }
    public class ConfigurationException : Altinn.App.Core.Exceptions.AltinnException
    {
        public ConfigurationException() { }
        public ConfigurationException(string? message) { }
        public ConfigurationException(string? message, System.Exception? innerException) { }
    }
}
namespace Altinn.App.Core.Extensions
{
    public static class ClaimsPrincipalExtensions
    {
        public static int GetAuthenticationLevel(this System.Security.Claims.ClaimsPrincipal user) { }
        public static string? GetOrg(this System.Security.Claims.ClaimsPrincipal user) { }
        public static int? GetOrgNumber(this System.Security.Claims.ClaimsPrincipal? user) { }
        public static int? GetPartyIdAsInt(this System.Security.Claims.ClaimsPrincipal user) { }
        public static int? GetUserIdAsInt(this System.Security.Claims.ClaimsPrincipal? user) { }
        public static string? GetUserOrOrgId(this System.Security.Claims.ClaimsPrincipal user) { }
    }
    public static class ConfigurationBuilderExtensions
    {
        public static void LoadAppConfig(this Microsoft.Extensions.Configuration.IConfigurationBuilder builder, string[]? args = null) { }
    }
    public static class DataProtectionConfiguration
    {
        public static void ConfigureDataProtection(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) { }
    }
    public static class DictionaryExtensions
    {
        public static string ToUrlEncodedNameValueString(this System.Collections.Generic.Dictionary<string, string?>? parameters, char separator) { }
    }
    public static class HttpClientExtension
    {
        public static System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync(this System.Net.Http.HttpClient httpClient, string authorizationToken, string requestUri, string? platformAccessToken = null) { }
        public static System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync(this System.Net.Http.HttpClient httpClient, string authorizationToken, string requestUri, string? platformAccessToken = null) { }
        public static System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync(this System.Net.Http.HttpClient httpClient, string authorizationToken, string requestUri, System.Net.Http.HttpContent? content, string? platformAccessToken = null) { }
        public static System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync(this System.Net.Http.HttpClient httpClient, string authorizationToken, string requestUri, System.Net.Http.HttpContent? content, string? platformAccessToken = null) { }
    }
    public static class HttpContextExtensions
    {
        public static System.Net.Http.StreamContent CreateContentStream(this Microsoft.AspNetCore.Http.HttpRequest request) { }
    }
    public static class InstanceEventExtensions
    {
        public static Altinn.Platform.Storage.Interface.Models.InstanceEvent CopyValues(this Altinn.Platform.Storage.Interface.Models.InstanceEvent original) { }
    }
    public static class ProcessStateExtensions
    {
        public static Altinn.Platform.Storage.Interface.Models.ProcessState Copy(this Altinn.Platform.Storage.Interface.Models.ProcessState original) { }
    }
    public static class ServiceCollectionExtensions
    {
        public static void AddAppServices(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration configuration, Microsoft.AspNetCore.Hosting.IWebHostEnvironment env) { }
        public static void AddPlatformServices(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration configuration, Microsoft.AspNetCore.Hosting.IWebHostEnvironment env) { }
        public static bool IsAdded(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Type serviceType) { }
    }
    public static class StringExtensions
    {
        public static bool ContainsExactlyOne(this string s, char ch) { }
        public static bool ContainsMoreThanOne(this string s, char ch) { }
        public static bool DoesNotContain(this string s, char ch) { }
    }
    public static class XmlToLinqExtensions
    {
        public static System.Xml.Linq.XElement AddAttribute(this System.Xml.Linq.XElement element, string attributeName, object value) { }
        public static System.Xml.Linq.XElement AddElement(this System.Xml.Linq.XElement element, string elementName, object elementValue) { }
        public static System.Xml.Linq.XElement AddPropertiesAsXElement<T>(this System.Xml.Linq.XElement element, params System.Linq.Expressions.Expression<System.Func<T>>[] expressions) { }
        public static System.Xml.Linq.XElement AddPropertyAsXElement(this System.Xml.Linq.XElement element, System.Linq.Expressions.Expression<System.Func<object>> exp) { }
        public static System.Xml.Linq.XElement AddRuleAsXElement(this System.Xml.Linq.XElement element, System.Linq.Expressions.Expression<System.Func<object>> exp) { }
        public static string AttributeValue(this System.Xml.Linq.XElement element, System.Xml.Linq.XName xName) { }
        public static string AttributeValue(this System.Xml.Linq.XElement element, string attributeName) { }
        public static string ElementValue(this System.Xml.Linq.XElement element, System.Xml.Linq.XName xName) { }
        public static bool GetRestrictionValue(this System.Xml.Linq.XElement restrictionElement, System.Xml.Linq.XName searchElement, out int value) { }
        public static bool IsSameAsAttributeValue(this System.Xml.Linq.XElement element, string sourceAttribute, string attributeValue) { }
    }
}
namespace Altinn.App.Core.Features.AccessManagement
{
    public interface IAccessManagementClient
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Internal.AccessManagement.Models.DelegationResponse> DelegateRights(Altinn.App.Core.Internal.AccessManagement.Models.DelegationRequest delegation, System.Threading.CancellationToken ct = default);
        System.Threading.Tasks.Task<Altinn.App.Core.Internal.AccessManagement.Models.DelegationResponse> RevokeRights(Altinn.App.Core.Internal.AccessManagement.Models.DelegationRequest delegation, System.Threading.CancellationToken ct = default);
    }
}
namespace Altinn.App.Core.Features.Action
{
    public class UniqueSignatureAuthorizer : Altinn.App.Core.Features.IUserActionAuthorizer
    {
        public UniqueSignatureAuthorizer(Altinn.App.Core.Internal.Process.IProcessReader processReader, Altinn.App.Core.Internal.Instances.IInstanceClient instanceClient, Altinn.App.Core.Internal.Data.IDataClient dataClient, Altinn.App.Core.Internal.App.IAppMetadata appMetadata) { }
        public System.Threading.Tasks.Task<bool> AuthorizeAction(Altinn.App.Core.Features.Action.UserActionAuthorizerContext context) { }
    }
    public class UserActionAuthorizerContext
    {
        public UserActionAuthorizerContext(System.Security.Claims.ClaimsPrincipal user, Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string? taskId, string action, Altinn.App.Core.Features.Auth.Authenticated authentication) { }
        public string Action { get; set; }
        public Altinn.App.Core.Features.Auth.Authenticated Authentication { get; }
        public Altinn.App.Core.Models.InstanceIdentifier InstanceIdentifier { get; set; }
        public string? TaskId { get; set; }
        [System.Obsolete("Use the Authentication property instead")]
        public System.Security.Claims.ClaimsPrincipal User { get; set; }
    }
    public class UserActionService
    {
        public UserActionService(System.IServiceProvider serviceProvider) { }
        public Altinn.App.Core.Features.IUserAction? GetActionHandler(string? actionId) { }
    }
}
namespace Altinn.App.Core.Features.Auth
{
    public abstract class Authenticated
    {
        public string? ClientId { get; }
        public Altinn.App.Core.Features.Auth.Scopes Scopes { get; }
        public string Token { get; }
        public bool TokenIsExchanged { get; }
        public Altinn.App.Core.Features.Auth.TokenIssuer TokenIssuer { get; }
        public System.Threading.Tasks.Task<string> GetLanguage() { }
        public sealed class None : Altinn.App.Core.Features.Auth.Authenticated { }
        public sealed class Org : Altinn.App.Core.Features.Auth.Authenticated
        {
            public int AuthenticationLevel { get; }
            public string AuthenticationMethod { get; }
            public string OrgNo { get; }
            public System.Threading.Tasks.Task<Altinn.App.Core.Features.Auth.Authenticated.Org.Details> LoadDetails() { }
            public sealed class Details : System.IEquatable<Altinn.App.Core.Features.Auth.Authenticated.Org.Details>
            {
                public Details(Altinn.Platform.Register.Models.Party Party, bool CanInstantiate) { }
                public bool CanInstantiate { get; init; }
                public Altinn.Platform.Register.Models.Party Party { get; init; }
            }
        }
        public sealed class ServiceOwner : Altinn.App.Core.Features.Auth.Authenticated
        {
            public int AuthenticationLevel { get; }
            public string AuthenticationMethod { get; }
            public string Name { get; }
            public string OrgNo { get; }
            public System.Threading.Tasks.Task<Altinn.App.Core.Features.Auth.Authenticated.ServiceOwner.Details> LoadDetails() { }
            public sealed class Details : System.IEquatable<Altinn.App.Core.Features.Auth.Authenticated.ServiceOwner.Details>
            {
                public Details(Altinn.Platform.Register.Models.Party Party) { }
                public Altinn.Platform.Register.Models.Party Party { get; init; }
            }
        }
        public sealed class SystemUser : Altinn.App.Core.Features.Auth.Authenticated
        {
            public int AuthenticationLevel { get; }
            public string AuthenticationMethod { get; }
            public Altinn.App.Core.Models.OrganisationNumber SupplierOrgNr { get; }
            public string SystemId { get; }
            public System.Collections.Generic.IReadOnlyList<System.Guid> SystemUserId { get; }
            public Altinn.App.Core.Models.OrganisationNumber SystemUserOrgNr { get; }
            public System.Threading.Tasks.Task<Altinn.App.Core.Features.Auth.Authenticated.SystemUser.Details> LoadDetails() { }
            public sealed class Details : System.IEquatable<Altinn.App.Core.Features.Auth.Authenticated.SystemUser.Details>
            {
                public Details(Altinn.Platform.Register.Models.Party Party, bool CanInstantiate) { }
                public bool CanInstantiate { get; init; }
                public Altinn.Platform.Register.Models.Party Party { get; init; }
            }
        }
        public sealed class User : Altinn.App.Core.Features.Auth.Authenticated
        {
            public int AuthenticationLevel { get; }
            public string AuthenticationMethod { get; }
            public bool InAltinnPortal { get; }
            public bool IsSelfIdentified { get; }
            public int SelectedPartyId { get; }
            public int UserId { get; }
            public int UserPartyId { get; }
            public string? Username { get; }
            public System.Threading.Tasks.Task<Altinn.App.Core.Features.Auth.Authenticated.User.Details> LoadDetails(bool validateSelectedParty = false) { }
            public System.Threading.Tasks.Task<Altinn.Platform.Profile.Models.UserProfile> LookupProfile() { }
            public System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Party> LookupSelectedParty() { }
            public sealed class Details : System.IEquatable<Altinn.App.Core.Features.Auth.Authenticated.User.Details>
            {
                public Details(Altinn.Platform.Register.Models.Party UserParty, Altinn.Platform.Register.Models.Party SelectedParty, Altinn.Platform.Profile.Models.UserProfile Profile, bool RepresentsSelf, System.Collections.Generic.IReadOnlyList<Altinn.Platform.Register.Models.Party> Parties, System.Collections.Generic.IReadOnlyList<Altinn.Platform.Register.Models.Party> PartiesAllowedToInstantiate, bool? CanRepresent = default) { }
                public bool? CanRepresent { get; init; }
                public System.Collections.Generic.IReadOnlyList<Altinn.Platform.Register.Models.Party> Parties { get; init; }
                public System.Collections.Generic.IReadOnlyList<Altinn.Platform.Register.Models.Party> PartiesAllowedToInstantiate { get; init; }
                public Altinn.Platform.Profile.Models.UserProfile Profile { get; init; }
                public bool RepresentsSelf { get; init; }
                public Altinn.Platform.Register.Models.Party SelectedParty { get; init; }
                public Altinn.Platform.Register.Models.Party UserParty { get; init; }
                public bool CanInstantiateAsParty(int partyId) { }
                public bool CanRepresentParty(int partyId) { }
            }
        }
    }
    public class AuthenticationContextException : System.Exception
    {
        public AuthenticationContextException(string message) { }
    }
    public interface IAuthenticationContext
    {
        Altinn.App.Core.Features.Auth.Authenticated Current { get; }
    }
    public readonly struct Scopes : System.IEquatable<Altinn.App.Core.Features.Auth.Scopes>
    {
        public static readonly Altinn.App.Core.Features.Auth.Scopes None;
        public Scopes(string? scope) { }
        public bool Equals(Altinn.App.Core.Features.Auth.Scopes other) { }
        public override bool Equals(object? obj) { }
        public Altinn.App.Core.Features.Auth.Scopes.ScopeEnumerator GetEnumerator() { }
        public override int GetHashCode() { }
        public bool HasScope(string scopeToFind) { }
        public bool HasScopeWithPrefix(string scopePrefix) { }
        public override string ToString() { }
        public static bool operator !=(Altinn.App.Core.Features.Auth.Scopes left, Altinn.App.Core.Features.Auth.Scopes right) { }
        public static bool operator ==(Altinn.App.Core.Features.Auth.Scopes left, Altinn.App.Core.Features.Auth.Scopes right) { }
        public ref struct ScopeEnumerator
        {
            public ScopeEnumerator(System.ReadOnlySpan<char> scopes) { }
            public System.ReadOnlySpan<char> Current { get; }
            public bool MoveNext() { }
        }
    }
    public enum TokenIssuer
    {
        None = 0,
        Unknown = 1,
        Altinn = 2,
        AltinnStudio = 3,
        IDporten = 4,
        Maskinporten = 5,
    }
}
namespace Altinn.App.Core.Features.Correspondence.Builder
{
    public class CorrespondenceAttachmentBuilder : Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilder, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilderData, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilderFilename, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilderSendersReference
    {
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceAttachment Build() { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilder WithData(System.ReadOnlyMemory<byte> data) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilder WithDataLocationType(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceDataLocationType dataLocationType) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilderSendersReference WithFilename(string filename) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilder WithIsEncrypted(bool isEncrypted) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilderData WithSendersReference(string sendersReference) { }
        public static Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilderFilename Create() { }
    }
    public class CorrespondenceContentBuilder : Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilder, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderBody, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderLanguage, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderSummary, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderTitle
    {
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceContent Build() { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilder WithBody(string body) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderTitle WithLanguage(Altinn.App.Core.Models.LanguageCode<Altinn.App.Core.Models.Iso6391> language) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderTitle WithLanguage(string language) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderBody WithSummary(string summary) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderSummary WithTitle(string title) { }
        public static Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderLanguage Create() { }
    }
    public class CorrespondenceNotificationBuilder : Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilderTemplate
    {
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotification Build() { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithEmailBody(string? emailBody) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithEmailSubject(string? emailSubject) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithNotificationChannel(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationChannel? notificationChannel) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithNotificationTemplate(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationTemplate notificationTemplate) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithRecipientOverride(Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder recipientOverrideBuilder) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithRecipientOverride(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipient recipientOverride) { }
        [System.Obsolete("Use WithRecipientOverride(CorrespondenceNotificationRecipient recipientOverride) " +
            "instead.")]
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithRecipientOverride(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipientWrapper recipientToOverrideWrapper) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithRecipientOverrideIfConfigured(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipient? recipientOverride) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithReminderEmailBody(string? reminderEmailBody) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithReminderEmailSubject(string? reminderEmailSubject) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithReminderNotificationChannel(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationChannel? reminderNotificationChannel) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithReminderSmsBody(string? reminderSmsBody) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithRequestedSendTime(System.DateTimeOffset? requestedSendTime) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithSendReminder(bool? sendReminder) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithSendersReference(string? sendersReference) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithSmsBody(string? smsBody) { }
        public static Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilderTemplate Create() { }
    }
    public class CorrespondenceNotificationOverrideBuilder : Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder
    {
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipient Build() { }
        [System.Obsolete("This method is deprecated and will be removed in a future version. Use WithOrgani" +
            "zationNumber/WithNationalIdentityNumber/WithEmailAddress/WithMobileNumber instea" +
            "d.")]
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithCorrespondenceNotificationRecipients(System.Collections.Generic.List<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipient> correspondenceNotificationRecipients) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithEmailAddress(string? emailAddress) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithMobileNumber(string? mobileNumber) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithNationalIdentityNumber(Altinn.App.Core.Models.NationalIdentityNumber? nationalIdentityNumber) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithOrganisationOrPersonIdentifier(Altinn.App.Core.Models.OrganisationOrPersonIdentifier? organisationOrPersonIdentifier) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithOrganizationNumber(Altinn.App.Core.Models.OrganisationNumber? organizationNumber) { }
        [System.Obsolete("This method is deprecated and will be removed in a future version. Use WithOrgani" +
            "zationNumber/WithNationalIdentityNumber/WithEmailAddress/WithMobileNumber instea" +
            "d.")]
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithRecipientToOverride(Altinn.App.Core.Models.NationalIdentityNumber nin) { }
        [System.Obsolete("This method is deprecated and will be removed in a future version. Use WithOrgani" +
            "zationNumber/WithNationalIdentityNumber/WithEmailAddress/WithMobileNumber instea" +
            "d.")]
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithRecipientToOverride(Altinn.App.Core.Models.OrganisationNumber organizationNumber) { }
        [System.Obsolete("This method is deprecated and will be removed in a future version. Use WithOrgani" +
            "zationNumber/WithNationalIdentityNumber/WithEmailAddress/WithMobileNumber instea" +
            "d.")]
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithRecipientToOverride(Altinn.App.Core.Models.OrganisationOrPersonIdentifier identifier) { }
        [System.Obsolete("This method is deprecated and will be removed in a future version. Use WithOrgani" +
            "zationNumber/WithNationalIdentityNumber/WithEmailAddress/WithMobileNumber instea" +
            "d.")]
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithRecipientToOverride(string identifierAsString) { }
        public static Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder Create() { }
    }
    public class CorrespondenceRequestBuilder : Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderRecipients, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderResourceId, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderSender, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderSendersReference
    {
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceRequest Build() { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithAllowSystemDeleteAfter(System.DateTimeOffset allowSystemDeleteAfter) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithAttachment(Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilder builder) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithAttachment(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceAttachment attachment) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithAttachments(System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceAttachment> attachments) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithContent(Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilder builder) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithContent(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceContent content) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithContent(Altinn.App.Core.Models.LanguageCode<Altinn.App.Core.Models.Iso6391> language, string title, string summary, string body) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithContent(string language, string title, string summary, string body) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithDueDateTime(System.DateTimeOffset dueDateTime) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithExistingAttachment(System.Guid existingAttachment) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithExistingAttachments(System.Collections.Generic.IEnumerable<System.Guid> existingAttachments) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithExternalReference(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceExternalReference externalReference) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithExternalReference(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceReferenceType type, string value) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithExternalReferences(System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceExternalReference> externalReferences) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithIgnoreReservation(bool ignoreReservation) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithIsConfirmationNeeded(bool isConfirmationNeeded) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithMessageSender(string messageSender) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithNotification(Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder builder) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithNotification(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotification notification) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithNotificationIfConfigured(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotification? notification) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithPropertyList(System.Collections.Generic.IReadOnlyDictionary<string, string> propertyList) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent WithRecipient(Altinn.App.Core.Models.NationalIdentityNumber person) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent WithRecipient(Altinn.App.Core.Models.OrganisationNumber organisation) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent WithRecipient(Altinn.App.Core.Models.OrganisationOrPersonIdentifier recipient) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent WithRecipient(string recipient) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent WithRecipients(System.Collections.Generic.IEnumerable<Altinn.App.Core.Models.OrganisationOrPersonIdentifier> recipients) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent WithRecipients(System.Collections.Generic.IEnumerable<string> recipients) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithReplyOption(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceReplyOption replyOption) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithReplyOption(string linkUrl, string linkText) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithReplyOptions(System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceReplyOption> replyOptions) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithRequestedPublishTime(System.DateTimeOffset requestedPublishTime) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderSender WithResourceId(string resourceId) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderSendersReference WithSender(Altinn.App.Core.Models.OrganisationNumber sender) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderSendersReference WithSender(string sender) { }
        public Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderRecipients WithSendersReference(string sendersReference) { }
        public static Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderResourceId Create() { }
    }
    public interface ICorrespondenceAttachmentBuilder : Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilderData, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilderFilename, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilderSendersReference
    {
        Altinn.App.Core.Features.Correspondence.Models.CorrespondenceAttachment Build();
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilder WithDataLocationType(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceDataLocationType dataLocationType);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilder WithIsEncrypted(bool isEncrypted);
    }
    public interface ICorrespondenceAttachmentBuilderData
    {
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilder WithData(System.ReadOnlyMemory<byte> data);
    }
    public interface ICorrespondenceAttachmentBuilderFilename
    {
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilderSendersReference WithFilename(string filename);
    }
    public interface ICorrespondenceAttachmentBuilderSendersReference
    {
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilderData WithSendersReference(string sendersReference);
    }
    public interface ICorrespondenceContentBuilder : Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderBody, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderLanguage, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderSummary, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderTitle
    {
        Altinn.App.Core.Features.Correspondence.Models.CorrespondenceContent Build();
    }
    public interface ICorrespondenceContentBuilderBody
    {
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilder WithBody(string body);
    }
    public interface ICorrespondenceContentBuilderLanguage
    {
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderTitle WithLanguage(Altinn.App.Core.Models.LanguageCode<Altinn.App.Core.Models.Iso6391> language);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderTitle WithLanguage(string language);
    }
    public interface ICorrespondenceContentBuilderSummary
    {
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderBody WithSummary(string summary);
    }
    public interface ICorrespondenceContentBuilderTitle
    {
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilderSummary WithTitle(string title);
    }
    public interface ICorrespondenceNotificationBuilder : Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilderTemplate
    {
        Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotification Build();
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithEmailBody(string? emailBody);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithEmailSubject(string? emailSubject);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithNotificationChannel(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationChannel? notificationChannel);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithRecipientOverride(Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder recipientOverrideBuilder);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithRecipientOverride(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipient recipientOverride);
        [System.Obsolete("Use WithRecipientOverride(CorrespondenceNotificationRecipient recipientOverride) " +
            "instead.")]
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithRecipientOverride(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipientWrapper recipientToOverrideWrapper);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithReminderEmailBody(string? reminderEmailBody);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithReminderEmailSubject(string? reminderEmailSubject);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithReminderNotificationChannel(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationChannel? reminderNotificationChannel);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithReminderSmsBody(string? reminderSmsBody);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithRequestedSendTime(System.DateTimeOffset? requestedSendTime);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithSendReminder(bool? sendReminder);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithSendersReference(string? sendersReference);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithSmsBody(string? smsBody);
    }
    public interface ICorrespondenceNotificationBuilderTemplate
    {
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder WithNotificationTemplate(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationTemplate notificationTemplate);
    }
    public interface ICorrespondenceNotificationOverrideBuilder
    {
        Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipient Build();
        [System.Obsolete("This method is deprecated and will be removed in a future version. Use WithOrgani" +
            "zationNumber/WithNationalIdentityNumber/WithEmailAddress/WithMobileNumber instea" +
            "d.")]
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithCorrespondenceNotificationRecipients(System.Collections.Generic.List<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipient> correspondenceNotificationRecipients);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithEmailAddress(string? emailAddress);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithMobileNumber(string? mobileNumber);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithNationalIdentityNumber(Altinn.App.Core.Models.NationalIdentityNumber? nationalIdentityNumber);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithOrganisationOrPersonIdentifier(Altinn.App.Core.Models.OrganisationOrPersonIdentifier? organisationOrPersonIdentifier);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithOrganizationNumber(Altinn.App.Core.Models.OrganisationNumber? organizationNumber);
        [System.Obsolete("This method is deprecated and will be removed in a future version. Use WithOrgani" +
            "zationNumber/WithNationalIdentityNumber/WithEmailAddress/WithMobileNumber instea" +
            "d.")]
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithRecipientToOverride(Altinn.App.Core.Models.NationalIdentityNumber nin);
        [System.Obsolete("This method is deprecated and will be removed in a future version. Use WithOrgani" +
            "zationNumber/WithNationalIdentityNumber/WithEmailAddress/WithMobileNumber instea" +
            "d.")]
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithRecipientToOverride(Altinn.App.Core.Models.OrganisationNumber organizationNumber);
        [System.Obsolete("This method is deprecated and will be removed in a future version. Use WithOrgani" +
            "zationNumber/WithNationalIdentityNumber/WithEmailAddress/WithMobileNumber instea" +
            "d.")]
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithRecipientToOverride(Altinn.App.Core.Models.OrganisationOrPersonIdentifier identifier);
        [System.Obsolete("This method is deprecated and will be removed in a future version. Use WithOrgani" +
            "zationNumber/WithNationalIdentityNumber/WithEmailAddress/WithMobileNumber instea" +
            "d.")]
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationOverrideBuilder WithRecipientToOverride(string identifierAsString);
    }
    public interface ICorrespondenceRequestBuilder : Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderRecipients, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderResourceId, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderSender, Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderSendersReference
    {
        Altinn.App.Core.Features.Correspondence.Models.CorrespondenceRequest Build();
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithAllowSystemDeleteAfter(System.DateTimeOffset allowSystemDeleteAfter);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithAttachment(Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceAttachmentBuilder builder);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithAttachment(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceAttachment attachment);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithAttachments(System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceAttachment> attachments);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithDueDateTime(System.DateTimeOffset dueDateTime);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithExistingAttachment(System.Guid existingAttachment);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithExistingAttachments(System.Collections.Generic.IEnumerable<System.Guid> existingAttachments);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithExternalReference(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceExternalReference externalReference);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithExternalReference(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceReferenceType type, string value);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithExternalReferences(System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceExternalReference> externalReferences);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithIgnoreReservation(bool ignoreReservation);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithIsConfirmationNeeded(bool isConfirmationNeeded);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithMessageSender(string messageSender);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithNotification(Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceNotificationBuilder builder);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithNotification(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotification notification);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithNotificationIfConfigured(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotification? notification);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithPropertyList(System.Collections.Generic.IReadOnlyDictionary<string, string> propertyList);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithReplyOption(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceReplyOption replyOption);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithReplyOption(string linkUrl, string linkText);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithReplyOptions(System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceReplyOption> replyOptions);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithRequestedPublishTime(System.DateTimeOffset requestedPublishTime);
    }
    public interface ICorrespondenceRequestBuilderContent
    {
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithContent(Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceContentBuilder builder);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithContent(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceContent content);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithContent(Altinn.App.Core.Models.LanguageCode<Altinn.App.Core.Models.Iso6391> language, string title, string summary, string body);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilder WithContent(string language, string title, string summary, string body);
    }
    public interface ICorrespondenceRequestBuilderRecipients
    {
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent WithRecipient(Altinn.App.Core.Models.NationalIdentityNumber person);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent WithRecipient(Altinn.App.Core.Models.OrganisationNumber organisation);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent WithRecipient(Altinn.App.Core.Models.OrganisationOrPersonIdentifier recipient);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent WithRecipient(string recipient);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent WithRecipients(System.Collections.Generic.IEnumerable<Altinn.App.Core.Models.OrganisationOrPersonIdentifier> recipients);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderContent WithRecipients(System.Collections.Generic.IEnumerable<string> recipients);
    }
    public interface ICorrespondenceRequestBuilderResourceId
    {
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderSender WithResourceId(string resourceId);
    }
    public interface ICorrespondenceRequestBuilderSender
    {
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderSendersReference WithSender(Altinn.App.Core.Models.OrganisationNumber sender);
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderSendersReference WithSender(string sender);
    }
    public interface ICorrespondenceRequestBuilderSendersReference
    {
        Altinn.App.Core.Features.Correspondence.Builder.ICorrespondenceRequestBuilderRecipients WithSendersReference(string sendersReference);
    }
}
namespace Altinn.App.Core.Features.Correspondence.Exceptions
{
    public class CorrespondenceArgumentException : Altinn.App.Core.Features.Correspondence.Exceptions.CorrespondenceException
    {
        public CorrespondenceArgumentException() { }
        public CorrespondenceArgumentException(string? message) { }
        public CorrespondenceArgumentException(string? message, System.Exception? innerException) { }
    }
    public abstract class CorrespondenceException : Altinn.App.Core.Exceptions.AltinnException
    {
        protected CorrespondenceException() { }
        protected CorrespondenceException(string? message) { }
        protected CorrespondenceException(string? message, System.Exception? innerException) { }
    }
    public class CorrespondenceRequestException : Altinn.App.Core.Features.Correspondence.Exceptions.CorrespondenceException
    {
        public CorrespondenceRequestException() { }
        public CorrespondenceRequestException(string? message) { }
        public CorrespondenceRequestException(string? message, System.Exception? innerException) { }
        public CorrespondenceRequestException(string? message, Microsoft.AspNetCore.Mvc.ProblemDetails? problemDetails, System.Net.HttpStatusCode? httpStatusCode, string? responseBody) { }
        public CorrespondenceRequestException(string? message, Microsoft.AspNetCore.Mvc.ProblemDetails? problemDetails, System.Net.HttpStatusCode? httpStatusCode, string? responseBody, System.Exception? innerException) { }
        public System.Net.HttpStatusCode? HttpStatusCode { get; init; }
        public Microsoft.AspNetCore.Mvc.ProblemDetails? ProblemDetails { get; init; }
        public string? ResponseBody { get; init; }
    }
}
namespace Altinn.App.Core.Features.Correspondence
{
    public interface ICorrespondenceClient
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Features.Correspondence.Models.GetCorrespondenceStatusResponse> GetStatus(Altinn.App.Core.Features.Correspondence.Models.GetCorrespondenceStatusPayload payload, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<Altinn.App.Core.Features.Correspondence.Models.SendCorrespondenceResponse> Send(Altinn.App.Core.Features.Correspondence.Models.SendCorrespondencePayload payload, System.Threading.CancellationToken cancellationToken = default);
    }
}
namespace Altinn.App.Core.Features.Correspondence.Models
{
    public sealed class CorrespondenceAttachment : Altinn.App.Core.Features.Correspondence.Models.MultipartCorrespondenceItem, System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceAttachment>
    {
        public CorrespondenceAttachment() { }
        public required System.ReadOnlyMemory<byte> Data { get; init; }
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceDataLocationType DataLocationType { get; init; }
        public required string Filename { get; init; }
        public bool? IsEncrypted { get; init; }
        public required string SendersReference { get; init; }
    }
    public sealed class CorrespondenceAttachmentResponse : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceAttachmentResponse>
    {
        public CorrespondenceAttachmentResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("checksum")]
        public string? Checksum { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset Created { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("dataLocationType")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceDataLocationTypeResponse DataLocationType { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("dataType")]
        public string? DataType { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("expirationTime")]
        public System.DateTimeOffset ExpirationTime { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("fileName")]
        public string? FileName { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("isEncrypted")]
        public bool IsEncrypted { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("sendersReference")]
        public required string SendersReference { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceAttachmentStatusResponse Status { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("statusChanged")]
        public System.DateTimeOffset StatusChanged { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("statusText")]
        public required string StatusText { get; init; }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum CorrespondenceAttachmentStatusResponse
    {
        Initialized = 0,
        UploadProcessing = 1,
        Published = 2,
        Purged = 3,
        Failed = 4,
    }
    public enum CorrespondenceAuthorisation
    {
        Maskinporten = 0,
    }
    public sealed class CorrespondenceContent : Altinn.App.Core.Features.Correspondence.Models.MultipartCorrespondenceItem, System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceContent>
    {
        public CorrespondenceContent() { }
        public System.Collections.Generic.IReadOnlyList<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceAttachment>? Attachments { get; init; }
        public required string Body { get; init; }
        public required Altinn.App.Core.Models.LanguageCode<Altinn.App.Core.Models.Iso6391> Language { get; init; }
        public required string Summary { get; init; }
        public required string Title { get; init; }
    }
    public sealed class CorrespondenceContentResponse : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceContentResponse>
    {
        public CorrespondenceContentResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("attachments")]
        public System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceAttachmentResponse>? Attachments { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(Altinn.App.Core.Models.LanguageCodeJsonConverter<Altinn.App.Core.Models.Iso6391>))]
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public Altinn.App.Core.Models.LanguageCode<Altinn.App.Core.Models.Iso6391> Language { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("messageBody")]
        public required string MessageBody { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("messageSummary")]
        public required string MessageSummary { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("messageTitle")]
        public required string MessageTitle { get; init; }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum CorrespondenceDataLocationType
    {
        NewCorrespondenceAttachment = 0,
        ExistingCorrespondenceAttachment = 1,
        ExisitingExternalStorage = 2,
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum CorrespondenceDataLocationTypeResponse
    {
        AltinnCorrespondenceAttachment = 0,
        ExternalStorage = 1,
    }
    public sealed class CorrespondenceDetailsResponse : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceDetailsResponse>
    {
        public CorrespondenceDetailsResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("correspondenceId")]
        public System.Guid CorrespondenceId { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("notifications")]
        public System.Collections.Generic.IReadOnlyList<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationDetailsResponse>? Notifications { get; init; }
        [System.Text.Json.Serialization.JsonConverter(typeof(Altinn.App.Core.Models.OrganisationOrPersonIdentifierJsonConverter))]
        [System.Text.Json.Serialization.JsonPropertyName("recipient")]
        public required Altinn.App.Core.Models.OrganisationOrPersonIdentifier Recipient { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceStatus Status { get; init; }
    }
    public sealed class CorrespondenceExternalReference : Altinn.App.Core.Features.Correspondence.Models.MultipartCorrespondenceListItem, System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceExternalReference>
    {
        public CorrespondenceExternalReference() { }
        [System.Text.Json.Serialization.JsonPropertyName("referenceType")]
        public required Altinn.App.Core.Features.Correspondence.Models.CorrespondenceReferenceType ReferenceType { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("referenceValue")]
        public required string ReferenceValue { get; init; }
    }
    public sealed class CorrespondenceNotification : Altinn.App.Core.Features.Correspondence.Models.MultipartCorrespondenceItem, System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotification>
    {
        public CorrespondenceNotification() { }
        [System.Obsolete("This property is deprecated and will be removed in a future version. Use CustomRe" +
            "cipient instead.")]
        public System.Collections.Generic.IReadOnlyList<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipientWrapper>? CustomNotificationRecipients { get; init; }
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipient? CustomRecipient { get; init; }
        [System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
        public string? EmailBody { get; init; }
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=0)]
        public string? EmailSubject { get; init; }
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationChannel? NotificationChannel { get; init; }
        public required Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationTemplate NotificationTemplate { get; init; }
        [System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
        public string? ReminderEmailBody { get; init; }
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=0)]
        public string? ReminderEmailSubject { get; init; }
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationChannel? ReminderNotificationChannel { get; init; }
        [System.ComponentModel.DataAnnotations.StringLength(160, MinimumLength=0)]
        public string? ReminderSmsBody { get; init; }
        public System.DateTimeOffset? RequestedSendTime { get; init; }
        public bool? SendReminder { get; init; }
        public string? SendersReference { get; init; }
        [System.ComponentModel.DataAnnotations.StringLength(160, MinimumLength=0)]
        public string? SmsBody { get; init; }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum CorrespondenceNotificationChannel
    {
        Email = 0,
        Sms = 1,
        EmailPreferred = 2,
        SmsPreferred = 3,
    }
    public sealed class CorrespondenceNotificationDetailsResponse : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationDetailsResponse>
    {
        public CorrespondenceNotificationDetailsResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("isReminder")]
        public bool? IsReminder { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("orderId")]
        public System.Guid? OrderId { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationStatusResponse Status { get; init; }
    }
    public sealed class CorrespondenceNotificationOrderResponse : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationOrderResponse>
    {
        public CorrespondenceNotificationOrderResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset Created { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("creator")]
        public required string Creator { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public required string Id { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("ignoreReservation")]
        public bool? IgnoreReservation { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("isReminder")]
        public bool IsReminder { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("notificationChannel")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationChannel NotificationChannel { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("notificationStatusDetails")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationSummaryResponse? NotificationStatusDetails { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("processingStatus")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationStatusSummaryResponse? ProcessingStatus { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("requestedSendTime")]
        public System.DateTimeOffset RequestedSendTime { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("resourceId")]
        public string? ResourceId { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("sendersReference")]
        public string? SendersReference { get; set; }
    }
    public sealed class CorrespondenceNotificationRecipient : Altinn.App.Core.Features.Correspondence.Models.MultipartCorrespondenceListItem, System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipient>
    {
        public CorrespondenceNotificationRecipient() { }
        public string? EmailAddress { get; init; }
        [System.Obsolete("This property is deprecated and will be removed in a future version. Use Correspo" +
            "ndence.IgnoreReservation instead.")]
        public bool IsReserved { get; init; }
        public string? MobileNumber { get; init; }
        public Altinn.App.Core.Models.NationalIdentityNumber? NationalIdentityNumber { get; init; }
        public Altinn.App.Core.Models.OrganisationNumber? OrganizationNumber { get; init; }
    }
    public sealed class CorrespondenceNotificationRecipientResponse : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipientResponse>
    {
        public CorrespondenceNotificationRecipientResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("emailAddress")]
        public string? EmailAddress { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("isReserved")]
        public bool? IsReserved { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("mobileNumber")]
        public string? MobileNumber { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("nationalIdentityNumber")]
        public string? NationalIdentityNumber { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("organizationNumber")]
        public string? OrganisationNumber { get; init; }
    }
    [System.Obsolete("This model is deprecated and will be removed in a future version. Use Corresponde" +
        "nceNotificationRecipient instead.")]
    public sealed class CorrespondenceNotificationRecipientWrapper : Altinn.App.Core.Features.Correspondence.Models.MultipartCorrespondenceListItem, System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipientWrapper>
    {
        public CorrespondenceNotificationRecipientWrapper() { }
        public required System.Collections.Generic.List<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipient> CorrespondenceNotificationRecipients { get; init; }
        public required Altinn.App.Core.Models.OrganisationOrPersonIdentifier RecipientToOverride { get; init; }
    }
    public sealed class CorrespondenceNotificationStatusDetailsResponse : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationStatusDetailsResponse>
    {
        public CorrespondenceNotificationStatusDetailsResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("recipient")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationRecipientResponse? Recipient { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("sendStatus")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationStatusSummaryResponse? SendStatus { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("succeeded")]
        public bool Succeeded { get; init; }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum CorrespondenceNotificationStatusResponse
    {
        Success = 0,
        MissingContact = 1,
        Failure = 2,
    }
    public sealed class CorrespondenceNotificationStatusSummaryResponse : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationStatusSummaryResponse>
    {
        public CorrespondenceNotificationStatusSummaryResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("lastUpdate")]
        public System.DateTimeOffset LastUpdate { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public required string Status { get; init; }
    }
    public sealed class CorrespondenceNotificationSummaryResponse : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationSummaryResponse>
    {
        public CorrespondenceNotificationSummaryResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationStatusDetailsResponse? Email { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("sms")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationStatusDetailsResponse? Sms { get; init; }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum CorrespondenceNotificationTemplate
    {
        CustomMessage = 0,
        GenericAltinnMessage = 1,
    }
    public abstract class CorrespondencePayloadBase : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondencePayloadBase>
    {
        protected CorrespondencePayloadBase() { }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum CorrespondenceReferenceType
    {
        Generic = 0,
        AltinnAppInstance = 1,
        AltinnBrokerFileTransfer = 2,
        DialogportenDialogId = 3,
        DialogportenProcessId = 4,
    }
    public sealed class CorrespondenceReplyOption : Altinn.App.Core.Features.Correspondence.Models.MultipartCorrespondenceListItem, System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceReplyOption>
    {
        public CorrespondenceReplyOption() { }
        [System.Text.Json.Serialization.JsonPropertyName("linkText")]
        public string? LinkText { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("linkURL")]
        public required string LinkUrl { get; init; }
    }
    public sealed class CorrespondenceRequest : Altinn.App.Core.Features.Correspondence.Models.MultipartCorrespondenceItem, System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceRequest>
    {
        public CorrespondenceRequest() { }
        public required System.DateTimeOffset? AllowSystemDeleteAfter { get; init; }
        public required Altinn.App.Core.Features.Correspondence.Models.CorrespondenceContent Content { get; init; }
        public System.DateTimeOffset? DueDateTime { get; init; }
        public System.Collections.Generic.IReadOnlyList<System.Guid>? ExistingAttachments { get; init; }
        public System.Collections.Generic.IReadOnlyList<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceExternalReference>? ExternalReferences { get; init; }
        public bool? IgnoreReservation { get; init; }
        public bool? IsConfirmationNeeded { get; init; }
        public string? MessageSender { get; init; }
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotification? Notification { get; init; }
        public System.Collections.Generic.IReadOnlyDictionary<string, string>? PropertyList { get; init; }
        public required System.Collections.Generic.IReadOnlyList<Altinn.App.Core.Models.OrganisationOrPersonIdentifier> Recipients { get; init; }
        public System.Collections.Generic.IReadOnlyList<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceReplyOption>? ReplyOptions { get; init; }
        public System.DateTimeOffset? RequestedPublishTime { get; init; }
        public required string ResourceId { get; init; }
        public required Altinn.App.Core.Models.OrganisationNumber Sender { get; init; }
        public required string SendersReference { get; init; }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum CorrespondenceStatus
    {
        Initialized = 0,
        ReadyForPublish = 1,
        Published = 2,
        Fetched = 3,
        Read = 4,
        Replied = 5,
        Confirmed = 6,
        PurgedByRecipient = 7,
        PurgedByAltinn = 8,
        Archived = 9,
        Reserved = 10,
        Failed = 11,
    }
    public sealed class CorrespondenceStatusEventResponse : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceStatusEventResponse>
    {
        public CorrespondenceStatusEventResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceStatus Status { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("statusChanged")]
        public System.DateTimeOffset StatusChanged { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("statusText")]
        public required string StatusText { get; init; }
    }
    public sealed class GetCorrespondenceStatusPayload : Altinn.App.Core.Features.Correspondence.Models.CorrespondencePayloadBase, System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.GetCorrespondenceStatusPayload>
    {
        [System.Obsolete("Use GetCorrespondenceStatusPayload(Guid, CorrespondenceAuthenticationMethod) inst" +
            "ead")]
        public GetCorrespondenceStatusPayload(System.Guid correspondenceId, Altinn.App.Core.Features.Correspondence.Models.CorrespondenceAuthorisation authorisation) { }
        public GetCorrespondenceStatusPayload(System.Guid correspondenceId, Altinn.App.Core.Features.CorrespondenceAuthenticationMethod authenticationMethod) { }
        [System.Obsolete("Use GetCorrespondenceStatusPayload(Guid, CorrespondenceAuthenticationMethod) inst" +
            "ead")]
        public GetCorrespondenceStatusPayload(System.Guid correspondenceId, System.Func<System.Threading.Tasks.Task<Altinn.App.Core.Models.JwtToken>> accessTokenFactory) { }
    }
    public sealed class GetCorrespondenceStatusResponse : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.GetCorrespondenceStatusResponse>
    {
        public GetCorrespondenceStatusResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("allowSystemDeleteAfter")]
        public System.DateTimeOffset? AllowSystemDeleteAfter { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("content")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceContentResponse? Content { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("correspondenceId")]
        public System.Guid CorrespondenceId { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset Created { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("dueDateTime")]
        public System.DateTimeOffset? DueDateTime { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("externalReferences")]
        public System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceExternalReference>? ExternalReferences { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("ignoreReservation")]
        public bool? IgnoreReservation { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("isConfirmationNeeded")]
        public bool IsConfirmationNeeded { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("markedUnread")]
        public bool? MarkedUnread { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("messageSender")]
        public string? MessageSender { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("notifications")]
        public System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceNotificationOrderResponse>? Notifications { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("propertyList")]
        public System.Collections.Generic.IReadOnlyDictionary<string, string>? PropertyList { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("published")]
        public System.DateTimeOffset? Published { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("recipient")]
        public required string Recipient { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("replyOptions")]
        public System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceReplyOption>? ReplyOptions { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("requestedPublishTime")]
        public System.DateTimeOffset? RequestedPublishTime { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("resourceId")]
        public required string ResourceId { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("sender")]
        public Altinn.App.Core.Models.OrganisationNumber Sender { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("sendersReference")]
        public required string SendersReference { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public Altinn.App.Core.Features.Correspondence.Models.CorrespondenceStatus Status { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("statusChanged")]
        public System.DateTimeOffset StatusChanged { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("statusHistory")]
        public required System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceStatusEventResponse> StatusHistory { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("statusText")]
        public string? StatusText { get; init; }
    }
    public abstract class MultipartCorrespondenceItem : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.MultipartCorrespondenceItem>
    {
        protected MultipartCorrespondenceItem() { }
    }
    public abstract class MultipartCorrespondenceListItem : Altinn.App.Core.Features.Correspondence.Models.MultipartCorrespondenceItem, System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.MultipartCorrespondenceListItem>
    {
        protected MultipartCorrespondenceListItem() { }
    }
    public sealed class SendCorrespondencePayload : Altinn.App.Core.Features.Correspondence.Models.CorrespondencePayloadBase, System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.SendCorrespondencePayload>
    {
        [System.Obsolete("Use SendCorrespondencePayload(CorrespondenceRequest, CorrespondenceAuthentication" +
            "Method) instead")]
        public SendCorrespondencePayload(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceRequest request, Altinn.App.Core.Features.Correspondence.Models.CorrespondenceAuthorisation authorisation) { }
        public SendCorrespondencePayload(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceRequest request, Altinn.App.Core.Features.CorrespondenceAuthenticationMethod authenticationMethod) { }
        [System.Obsolete("Use SendCorrespondencePayload(CorrespondenceRequest, CorrespondenceAuthentication" +
            "Method) instead")]
        public SendCorrespondencePayload(Altinn.App.Core.Features.Correspondence.Models.CorrespondenceRequest request, System.Func<System.Threading.Tasks.Task<Altinn.App.Core.Models.JwtToken>> accessTokenFactory) { }
    }
    public sealed class SendCorrespondenceResponse : System.IEquatable<Altinn.App.Core.Features.Correspondence.Models.SendCorrespondenceResponse>
    {
        public SendCorrespondenceResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("attachmentIds")]
        public System.Collections.Generic.IReadOnlyList<System.Guid>? AttachmentIds { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("correspondences")]
        public required System.Collections.Generic.IReadOnlyList<Altinn.App.Core.Features.Correspondence.Models.CorrespondenceDetailsResponse> Correspondences { get; init; }
    }
}
namespace Altinn.App.Core.Features
{
    public sealed class CorrespondenceAuthenticationMethod : System.IEquatable<Altinn.App.Core.Features.CorrespondenceAuthenticationMethod>
    {
        public static Altinn.App.Core.Features.CorrespondenceAuthenticationMethod Custom(System.Func<System.Threading.Tasks.Task<Altinn.App.Core.Models.JwtToken>> tokenProvider) { }
        public static Altinn.App.Core.Features.CorrespondenceAuthenticationMethod Default() { }
    }
    public static class FeatureFlags
    {
        public const string JsonObjectInDataResponse = "JsonObjectInDataResponse";
    }
    public interface IAppOptionsProvider
    {
        string Id { get; }
        System.Threading.Tasks.Task<Altinn.App.Core.Models.AppOptions> GetAppOptionsAsync(string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs);
    }
    public interface IDataElementValidator
    {
        string DataType { get; }
        bool NoIncrementalValidation { get; }
        string ValidationSource { get; }
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue>> ValidateDataElement(Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.Platform.Storage.Interface.Models.DataElement dataElement, Altinn.Platform.Storage.Interface.Models.DataType dataType, string? language);
    }
    public interface IDataListProvider
    {
        string Id { get; }
        System.Threading.Tasks.Task<Altinn.App.Core.Models.DataList> GetDataListAsync(string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs);
    }
    public interface IDataProcessor
    {
        System.Threading.Tasks.Task ProcessDataRead(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Guid? dataId, object data, string? language);
        System.Threading.Tasks.Task ProcessDataWrite(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Guid? dataId, object data, object? previousData, string? language);
    }
    public interface IDataWriteProcessor
    {
        System.Threading.Tasks.Task ProcessDataWrite(Altinn.App.Core.Features.IInstanceDataMutator instanceDataMutator, string taskId, Altinn.App.Core.Models.DataElementChanges changes, string? language);
    }
    public interface IEmailNotificationClient
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Models.Notifications.Email.EmailOrderResponse> Order(Altinn.App.Core.Models.Notifications.Email.EmailNotification emailNotification, System.Threading.CancellationToken ct);
    }
    public interface IEventHandler
    {
        string EventType { get; }
        System.Threading.Tasks.Task<bool> ProcessEvent(Altinn.App.Core.Models.CloudEvent cloudEvent);
    }
    public interface IFormDataValidator
    {
        string DataType { get; }
        bool NoIncrementalValidation { get; }
        bool ShouldRunAfterRemovingHiddenData { get; }
        string ValidationSource { get; }
        bool HasRelevantChanges(object current, object previous);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue>> ValidateFormData(Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.Platform.Storage.Interface.Models.DataElement dataElement, object data, string? language);
    }
    public interface IInstanceAppOptionsProvider
    {
        string Id { get; }
        System.Threading.Tasks.Task<Altinn.App.Core.Models.AppOptions> GetInstanceAppOptionsAsync(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs);
    }
    public interface IInstanceDataAccessor
    {
        System.Collections.Generic.IReadOnlyDictionary<Altinn.Platform.Storage.Interface.Models.DataType, Altinn.App.Core.Features.StorageAuthenticationMethod> AuthenticationMethodOverrides { get; }
        System.Collections.Generic.IReadOnlyCollection<Altinn.Platform.Storage.Interface.Models.DataType> DataTypes { get; }
        Altinn.Platform.Storage.Interface.Models.Instance Instance { get; }
        System.Threading.Tasks.Task<System.ReadOnlyMemory<byte>> GetBinaryData(Altinn.App.Core.Models.DataElementIdentifier dataElementIdentifier);
        Altinn.App.Core.Features.IInstanceDataAccessor GetCleanAccessor(Altinn.App.Core.Helpers.RowRemovalOption rowRemovalOption = 1);
        Altinn.Platform.Storage.Interface.Models.DataElement GetDataElement(Altinn.App.Core.Models.DataElementIdentifier dataElementIdentifier);
        System.Threading.Tasks.Task<object> GetFormData(Altinn.App.Core.Models.DataElementIdentifier dataElementIdentifier);
        void OverrideAuthenticationMethod(Altinn.Platform.Storage.Interface.Models.DataType dataType, Altinn.App.Core.Features.StorageAuthenticationMethod method);
    }
    public static class IInstanceDataAccessorExtensions
    {
        public static System.Threading.Tasks.Task<T[]> GetAllFormData<T>(this Altinn.App.Core.Features.IInstanceDataAccessor accessor)
            where T :  class { }
        public static System.Threading.Tasks.Task<T[]> GetAllFormData<T>(this Altinn.App.Core.Features.IInstanceDataAccessor accessor, Altinn.Platform.Storage.Interface.Models.DataType dataType)
            where T :  class { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "dataType",
                "dataElement"})]
        public static System.Collections.Generic.IEnumerable<System.ValueTuple<Altinn.Platform.Storage.Interface.Models.DataType, Altinn.Platform.Storage.Interface.Models.DataElement>> GetDataElements(this Altinn.App.Core.Features.IInstanceDataAccessor accessor) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "dataType",
                "dataElement"})]
        public static System.Collections.Generic.IEnumerable<System.ValueTuple<Altinn.Platform.Storage.Interface.Models.DataType, Altinn.Platform.Storage.Interface.Models.DataElement>> GetDataElementsForTask(this Altinn.App.Core.Features.IInstanceDataAccessor accessor, string taskId) { }
        public static System.Collections.Generic.IEnumerable<Altinn.Platform.Storage.Interface.Models.DataElement> GetDataElementsForType(this Altinn.App.Core.Features.IInstanceDataAccessor accessor, Altinn.Platform.Storage.Interface.Models.DataType dataType) { }
        public static System.Collections.Generic.IEnumerable<Altinn.Platform.Storage.Interface.Models.DataElement> GetDataElementsForType(this Altinn.App.Core.Features.IInstanceDataAccessor accessor, string dataTypeId) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "dataType",
                "dataElement"})]
        public static System.Collections.Generic.IEnumerable<System.ValueTuple<Altinn.Platform.Storage.Interface.Models.DataType, Altinn.Platform.Storage.Interface.Models.DataElement>> GetDataElementsWithFormData(this Altinn.App.Core.Features.IInstanceDataAccessor accessor) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "dataType",
                "dataElement"})]
        public static System.Collections.Generic.IEnumerable<System.ValueTuple<Altinn.Platform.Storage.Interface.Models.DataType, Altinn.Platform.Storage.Interface.Models.DataElement>> GetDataElementsWithFormDataForTask(this Altinn.App.Core.Features.IInstanceDataAccessor accessor, string taskId) { }
        public static Altinn.Platform.Storage.Interface.Models.DataType GetDataType(this Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, Altinn.App.Core.Models.DataElementIdentifier dataElementIdentifier) { }
        public static Altinn.Platform.Storage.Interface.Models.DataType GetDataType(this Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string dataTypeId) { }
        public static Altinn.Platform.Storage.Interface.Models.DataType GetDataType<T>(this Altinn.App.Core.Features.IInstanceDataAccessor accessor) { }
        public static System.Threading.Tasks.Task<T?> GetFormData<T>(this Altinn.App.Core.Features.IInstanceDataAccessor accessor)
            where T :  class { }
        public static System.Threading.Tasks.Task<T> GetFormData<T>(this Altinn.App.Core.Features.IInstanceDataAccessor accessor, Altinn.App.Core.Models.DataElementIdentifier dataElementIdentifier)
            where T :  class { }
        public static System.Threading.Tasks.Task<T?> GetFormData<T>(this Altinn.App.Core.Features.IInstanceDataAccessor accessor, Altinn.Platform.Storage.Interface.Models.DataType dataType)
            where T :  class { }
    }
    public interface IInstanceDataListProvider
    {
        string Id { get; }
        System.Threading.Tasks.Task<Altinn.App.Core.Models.DataList> GetInstanceDataListAsync(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs);
    }
    public interface IInstanceDataMutator : Altinn.App.Core.Features.IInstanceDataAccessor
    {
        void AbandonAllChanges(System.Collections.Generic.IEnumerable<Altinn.App.Core.Models.Validation.ValidationIssue> validationIssues);
        Altinn.App.Core.Models.BinaryDataChange AddBinaryDataElement(Altinn.Platform.Storage.Interface.Models.DataType dataType, string contentType, string? filename, System.ReadOnlyMemory<byte> bytes);
        Altinn.App.Core.Models.BinaryDataChange AddBinaryDataElement(string dataTypeId, string contentType, string? filename, System.ReadOnlyMemory<byte> bytes);
        Altinn.App.Core.Models.FormDataChange AddFormDataElement(Altinn.Platform.Storage.Interface.Models.DataType dataType, object model);
        Altinn.App.Core.Models.FormDataChange AddFormDataElement(string dataTypeId, object model);
        void RemoveDataElement(Altinn.App.Core.Models.DataElementIdentifier dataElementIdentifier);
    }
    [System.Obsolete("Use ITaskValidator, IDataElementValidator or IFormDataValidator instead")]
    public interface IInstanceValidator
    {
        System.Threading.Tasks.Task ValidateData(object data, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary validationResults);
        System.Threading.Tasks.Task ValidateTask(Altinn.Platform.Storage.Interface.Models.Instance instance, string taskId, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary validationResults);
    }
    public interface IInstantiationProcessor
    {
        System.Threading.Tasks.Task DataCreation(Altinn.Platform.Storage.Interface.Models.Instance instance, object data, System.Collections.Generic.Dictionary<string, string>? prefill);
    }
    public interface IInstantiationValidator
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Models.Validation.InstantiationValidationResult?> Validate(Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    [System.Obsolete("IPageOrder does not work with frontend version 4")]
    public interface IPageOrder
    {
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetPageOrder(Altinn.App.Core.Models.AppIdentifier appIdentifier, Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string layoutSetId, string currentPage, string dataTypeId, object formData);
    }
    [System.Obsolete("This interface was used for the old PDF generator, and is used for backwards comp" +
        "atibility in the chromium based one. It will be removed in the future. Create a " +
        "custom pdf layout instead if you need to customize the PDF layout.")]
    public interface IPdfFormatter
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Models.LayoutSettings> FormatPdf(Altinn.App.Core.Models.LayoutSettings layoutSettings, object data);
        System.Threading.Tasks.Task<Altinn.App.Core.Models.LayoutSettings> FormatPdf(Altinn.App.Core.Models.LayoutSettings layoutSettings, object data, Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.App.Core.Models.LayoutSet? layoutSet);
    }
    public interface IProcessEnd
    {
        System.Threading.Tasks.Task End(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.InstanceEvent>? events);
    }
    public interface IProcessExclusiveGateway
    {
        string GatewayId { get; }
        [System.Obsolete("Use FilterAsync(List<SequenceFlow>, Instance, IInstanceDataAccessor, ProcessGatew" +
            "ayInformation) instead")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.SequenceFlow>> FilterAsync(System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.SequenceFlow> outgoingFlows, Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.App.Core.Models.Process.ProcessGatewayInformation processGatewayInformation);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.SequenceFlow>> FilterAsync(System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.SequenceFlow> outgoingFlows, Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, Altinn.App.Core.Models.Process.ProcessGatewayInformation processGatewayInformation);
    }
    public interface IProcessTaskAbandon
    {
        System.Threading.Tasks.Task Abandon(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    public interface IProcessTaskEnd
    {
        System.Threading.Tasks.Task End(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    public interface IProcessTaskStart
    {
        System.Threading.Tasks.Task Start(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.Dictionary<string, string>? prefill);
    }
    public interface ISmsNotificationClient
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Models.Notifications.Sms.SmsOrderResponse> Order(Altinn.App.Core.Models.Notifications.Sms.SmsNotification smsNotification, System.Threading.CancellationToken ct);
    }
    public interface ITaskValidator
    {
        bool NoIncrementalValidation { get; }
        string TaskId { get; }
        string ValidationSource { get; }
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue>> ValidateTask(Altinn.Platform.Storage.Interface.Models.Instance instance, string taskId, string? language);
    }
    public interface IUserAction
    {
        string Id { get; }
        System.Threading.Tasks.Task<Altinn.App.Core.Models.UserAction.UserActionResult> HandleAction(Altinn.App.Core.Models.UserAction.UserActionContext context);
    }
    public interface IUserActionAuthorizer
    {
        System.Threading.Tasks.Task<bool> AuthorizeAction(Altinn.App.Core.Features.Action.UserActionAuthorizerContext context);
    }
    public interface IValidateQueryParamPrefill
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Models.Validation.ValidationIssue?> PrefillFromQueryParamsIsValid(System.Collections.Generic.Dictionary<string, string> prefill);
    }
    public interface IValidator
    {
        bool NoIncrementalValidation { get; }
        bool ShouldRunAfterRemovingHiddenData { get; }
        string TaskId { get; }
        string ValidationSource { get; }
        System.Threading.Tasks.Task<bool> HasRelevantChanges(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, Altinn.App.Core.Models.DataElementChanges changes);
        bool ShouldRunForTask(string taskId);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue>> Validate(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, string? language);
    }
    public sealed class StorageAuthenticationMethod : System.IEquatable<Altinn.App.Core.Features.StorageAuthenticationMethod>
    {
        public static Altinn.App.Core.Features.StorageAuthenticationMethod CurrentUser() { }
        public static Altinn.App.Core.Features.StorageAuthenticationMethod Custom(System.Func<System.Threading.Tasks.Task<Altinn.App.Core.Models.JwtToken>> tokenProvider) { }
        public static Altinn.App.Core.Features.StorageAuthenticationMethod ServiceOwner() { }
        public static Altinn.App.Core.Features.StorageAuthenticationMethod ServiceOwner(params string[] additionalScopes) { }
    }
    public sealed class Telemetry : System.IDisposable
    {
        public Telemetry(Altinn.App.Core.Models.AppIdentifier appIdentifier, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.AppSettings> appSettings) { }
        public System.Diagnostics.ActivitySource ActivitySource { get; }
        public System.Diagnostics.Metrics.Meter Meter { get; }
        public void Dispose() { }
        public static class Labels
        {
            public const string CorrespondenceId = "correspondence.id";
            public const string OrganisationName = "organisation.name";
            public const string OrganisationNumber = "organisation.number";
            public const string OrganisationSystemUserId = "organisation.systemuser.id";
            public const string UserAuthenticationInAltinnPortal = "user.authentication.inAltinnPortal";
            public const string UserAuthenticationLevel = "user.authentication.level";
            public const string UserAuthenticationMethod = "user.authentication.method";
            public const string UserAuthenticationTokenClientId = "user.authentication.token.clientId";
            public const string UserAuthenticationTokenIsExchanged = "user.authentication.token.isExchanged";
            public const string UserAuthenticationTokenIssuer = "user.authentication.token.issuer";
            public const string UserAuthenticationType = "user.authentication.type";
            public const string UserId = "user.id";
            public const string UserName = "user.name";
            public const string UserPartyId = "user.party.id";
            public static readonly string DataGuid;
            public static readonly string DataType;
            public static readonly string InstanceEventsCount;
            public static readonly string InstanceGuid;
            public static readonly string InstanceOwnerPartyId;
            public static readonly string TaskId;
        }
        public static class Metrics
        {
            public static string CreateName(string name) { }
        }
    }
    public static class TelemetryActivityExtensions
    {
        public static System.Diagnostics.Activity SetAuthenticationLevel(this System.Diagnostics.Activity activity, int? authenticationLevel) { }
        public static System.Diagnostics.Activity SetAuthenticationMethod(this System.Diagnostics.Activity activity, string? authenticationMethod) { }
        public static System.Diagnostics.Activity SetDataElementId(this System.Diagnostics.Activity activity, Altinn.Platform.Storage.Interface.Models.DataElement? dataElement) { }
        public static System.Diagnostics.Activity SetDataElementId(this System.Diagnostics.Activity activity, System.Guid? dataElementId) { }
        public static System.Diagnostics.Activity SetDataElementId(this System.Diagnostics.Activity activity, string? dataElementId) { }
        public static System.Diagnostics.Activity SetInstanceId(this System.Diagnostics.Activity activity, Altinn.Platform.Storage.Interface.Models.Instance? instance) { }
        public static System.Diagnostics.Activity SetInstanceId(this System.Diagnostics.Activity activity, System.Guid? instanceGuid) { }
        public static System.Diagnostics.Activity SetInstanceId(this System.Diagnostics.Activity activity, string? instanceId) { }
        public static System.Diagnostics.Activity SetInstanceOwnerPartyId(this System.Diagnostics.Activity activity, int? instanceOwnerPartyId) { }
        public static System.Diagnostics.Activity SetInstanceOwnerPartyId(this System.Diagnostics.Activity activity, string? instanceOwnerPartyId) { }
        public static System.Diagnostics.Activity SetOrganisationName(this System.Diagnostics.Activity activity, string? organisationName) { }
        public static System.Diagnostics.Activity SetOrganisationNumber(this System.Diagnostics.Activity activity, string? organisationNumber) { }
        public static System.Diagnostics.Activity SetTaskId(this System.Diagnostics.Activity activity, string? taskId) { }
        public static System.Diagnostics.Activity SetUserId(this System.Diagnostics.Activity activity, int? userId) { }
        public static System.Diagnostics.Activity SetUserPartyId(this System.Diagnostics.Activity activity, int? userPartyId) { }
        public static System.Diagnostics.Activity SetUsername(this System.Diagnostics.Activity activity, string? username) { }
    }
}
namespace Altinn.App.Core.Features.DataLists
{
    public class DataListsFactory
    {
        public DataListsFactory(System.IServiceProvider serviceProvider) { }
        public Altinn.App.Core.Features.IDataListProvider GetDataListProvider(string listId) { }
    }
    public class DataListsService : Altinn.App.Core.Features.DataLists.IDataListsService
    {
        public DataListsService(Altinn.App.Core.Features.DataLists.DataListsFactory dataListsFactory, Altinn.App.Core.Features.DataLists.InstanceDataListsFactory instanceDataListsFactory, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.DataList> GetDataListAsync(string dataListId, string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.DataList> GetDataListAsync(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string dataListId, string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs) { }
    }
    public interface IDataListsService
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Models.DataList> GetDataListAsync(string dataListId, string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs);
        System.Threading.Tasks.Task<Altinn.App.Core.Models.DataList> GetDataListAsync(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string dataListId, string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs);
    }
    public class InstanceDataListsFactory
    {
        public InstanceDataListsFactory(System.IServiceProvider serviceProvider) { }
        public Altinn.App.Core.Features.IInstanceDataListProvider GetDataListProvider(string listId) { }
    }
    public class NullDataListProvider : Altinn.App.Core.Features.IDataListProvider
    {
        public NullDataListProvider() { }
        public string Id { get; }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.DataList> GetDataListAsync(string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs) { }
    }
    public class NullInstanceDataListProvider : Altinn.App.Core.Features.IInstanceDataListProvider
    {
        public NullInstanceDataListProvider() { }
        public string Id { get; }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.DataList> GetInstanceDataListAsync(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs) { }
    }
}
namespace Altinn.App.Core.Features.DataProcessing
{
    public abstract class GenericDataProcessor<TModel> : Altinn.App.Core.Features.IDataProcessor
        where TModel :  class
    {
        protected GenericDataProcessor() { }
        public abstract System.Threading.Tasks.Task ProcessDataRead(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Guid? dataId, TModel model, string? langauge);
        public System.Threading.Tasks.Task ProcessDataRead(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Guid? dataId, object data, string? language) { }
        public abstract System.Threading.Tasks.Task ProcessDataWrite(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Guid? dataId, TModel model, TModel? previousModel, string? language);
        public System.Threading.Tasks.Task ProcessDataWrite(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Guid? dataId, object data, object? previousData, string? language) { }
    }
    public class NullInstantiationProcessor : Altinn.App.Core.Features.IInstantiationProcessor
    {
        public NullInstantiationProcessor() { }
        public System.Threading.Tasks.Task DataCreation(Altinn.Platform.Storage.Interface.Models.Instance instance, object data, System.Collections.Generic.Dictionary<string, string>? prefill) { }
    }
}
namespace Altinn.App.Core.Features.ExternalApi
{
    public sealed class ExternalApiDataResult : System.IEquatable<Altinn.App.Core.Features.ExternalApi.ExternalApiDataResult>
    {
        public ExternalApiDataResult(object? Data, bool WasExternalApiFound) { }
        public object? Data { get; init; }
        public bool WasExternalApiFound { get; init; }
    }
    public class ExternalApiService : Altinn.App.Core.Features.ExternalApi.IExternalApiService
    {
        public ExternalApiService(Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Features.ExternalApi.ExternalApiService> logger, System.IServiceProvider serviceProvider) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Features.ExternalApi.ExternalApiDataResult> GetExternalApiData(string externalApiId, Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, System.Collections.Generic.Dictionary<string, string> queryParams) { }
    }
    public interface IExternalApiClient
    {
        string Id { get; }
        System.Threading.Tasks.Task<object?> GetExternalApiDataAsync(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, System.Collections.Generic.Dictionary<string, string> queryParams);
    }
    public interface IExternalApiService
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Features.ExternalApi.ExternalApiDataResult> GetExternalApiData(string externalApiId, Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, System.Collections.Generic.Dictionary<string, string> queryParams);
    }
}
namespace Altinn.App.Core.Features.FileAnalysis
{
    public class FileAnalysisResult
    {
        public FileAnalysisResult(string analyserId) { }
        public string AnalyserId { get; }
        public System.Collections.Generic.List<string> Extensions { get; set; }
        public string? Filename { get; set; }
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; }
        public string? MimeType { get; set; }
    }
    public interface IFileAnalyser
    {
        string Id { get; }
        System.Threading.Tasks.Task<Altinn.App.Core.Features.FileAnalysis.FileAnalysisResult> Analyse(System.IO.Stream stream, string? filename = null);
    }
}
namespace Altinn.App.Core.Features.FileAnalyzis
{
    public class FileAnalyserFactory : Altinn.App.Core.Features.FileAnalyzis.IFileAnalyserFactory
    {
        public FileAnalyserFactory(System.IServiceProvider serviceProvider) { }
        public System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.FileAnalysis.IFileAnalyser> GetFileAnalysers(System.Collections.Generic.IEnumerable<string> analyserIds) { }
    }
    public class FileAnalysisService : Altinn.App.Core.Features.FileAnalyzis.IFileAnalysisService
    {
        public FileAnalysisService(Altinn.App.Core.Features.FileAnalyzis.IFileAnalyserFactory fileAnalyserFactory, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.FileAnalysis.FileAnalysisResult>> Analyse(Altinn.Platform.Storage.Interface.Models.DataType dataType, System.IO.Stream fileStream, string? filename = null) { }
    }
    public interface IFileAnalyserFactory
    {
        System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.FileAnalysis.IFileAnalyser> GetFileAnalysers(System.Collections.Generic.IEnumerable<string> analyserIds);
    }
    public interface IFileAnalysisService
    {
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.FileAnalysis.FileAnalysisResult>> Analyse(Altinn.Platform.Storage.Interface.Models.DataType dataType, System.IO.Stream fileStream, string? filename = null);
    }
}
namespace Altinn.App.Core.Features.Maskinporten.Exceptions
{
    public sealed class MaskinportenAuthenticationException : Altinn.App.Core.Features.Maskinporten.Exceptions.MaskinportenException
    {
        public MaskinportenAuthenticationException() { }
        public MaskinportenAuthenticationException(string? message) { }
        public MaskinportenAuthenticationException(string? message, System.Exception? innerException) { }
    }
    public sealed class MaskinportenConfigurationException : Altinn.App.Core.Features.Maskinporten.Exceptions.MaskinportenException
    {
        public MaskinportenConfigurationException() { }
        public MaskinportenConfigurationException(string? message) { }
        public MaskinportenConfigurationException(string? message, System.Exception? innerException) { }
    }
    public abstract class MaskinportenException : Altinn.App.Core.Exceptions.AltinnException
    {
        protected MaskinportenException() { }
        protected MaskinportenException(string? message) { }
        protected MaskinportenException(string? message, System.Exception? innerException) { }
    }
    public sealed class MaskinportenTokenExpiredException : Altinn.App.Core.Features.Maskinporten.Exceptions.MaskinportenException
    {
        public MaskinportenTokenExpiredException() { }
        public MaskinportenTokenExpiredException(string? message) { }
        public MaskinportenTokenExpiredException(string? message, System.Exception? innerException) { }
    }
    public class MaskinportenUnsupportedTokenException : Altinn.App.Core.Features.Maskinporten.Exceptions.MaskinportenException
    {
        public MaskinportenUnsupportedTokenException() { }
        public MaskinportenUnsupportedTokenException(string? message) { }
        public MaskinportenUnsupportedTokenException(string? message, System.Exception? innerException) { }
    }
}
namespace Altinn.App.Core.Features.Maskinporten
{
    public interface IMaskinportenClient
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Models.JwtToken> GetAccessToken(System.Collections.Generic.IEnumerable<string> scopes, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<Altinn.App.Core.Models.JwtToken> GetAltinnExchangedToken(System.Collections.Generic.IEnumerable<string> scopes, System.Threading.CancellationToken cancellationToken = default);
    }
}
namespace Altinn.App.Core.Features.Maskinporten.Models
{
    public class JwkWrapper : System.IEquatable<Altinn.App.Core.Features.Maskinporten.Models.JwkWrapper>
    {
        public JwkWrapper() { }
        [System.Text.Json.Serialization.JsonPropertyName("alg")]
        public string? Alg { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("d")]
        public string? D { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("dp")]
        public string? Dp { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("dq")]
        public string? Dq { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("e")]
        public string? E { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("kid")]
        public string? Kid { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("kty")]
        public string? Kty { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("n")]
        public string? N { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("p")]
        public string? P { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("q")]
        public string? Q { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("qi")]
        public string? Qi { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("use")]
        public string? Use { get; init; }
        public Microsoft.IdentityModel.Tokens.JsonWebKey ToJsonWebKey() { }
        public Altinn.App.Core.Features.Maskinporten.Models.JwkWrapper.ValidationResult Validate() { }
        public readonly struct ValidationResult : System.IEquatable<Altinn.App.Core.Features.Maskinporten.Models.JwkWrapper.ValidationResult>
        {
            public System.Collections.Generic.IEnumerable<string>? InvalidProperties { get; init; }
            public bool IsValid() { }
            public override string ToString() { }
        }
    }
    public sealed class MaskinportenSettings : System.IEquatable<Altinn.App.Core.Features.Maskinporten.Models.MaskinportenSettings>
    {
        public MaskinportenSettings() { }
        [System.ComponentModel.DataAnnotations.Required]
        [System.Text.Json.Serialization.JsonPropertyName("authority")]
        public required string Authority { get; set; }
        [System.ComponentModel.DataAnnotations.Required]
        [System.Text.Json.Serialization.JsonPropertyName("clientId")]
        public required string ClientId { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("jwk")]
        public Altinn.App.Core.Features.Maskinporten.Models.JwkWrapper? Jwk { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("jwkBase64")]
        public string? JwkBase64 { get; set; }
        public Microsoft.IdentityModel.Tokens.JsonWebKey GetJsonWebKey() { }
    }
}
namespace Altinn.App.Core.Features.Options.Altinn2Provider
{
    public class Altinn2CodeListProvider : Altinn.App.Core.Features.IAppOptionsProvider
    {
        public Altinn2CodeListProvider(Microsoft.Extensions.Caching.Memory.IMemoryCache cache, Altinn.App.Core.Features.Options.Altinn2Provider.Altinn2MetadataApiClient client, string id, System.Func<Altinn.App.Core.Features.Options.Altinn2Provider.MetadataCodeListCodes, Altinn.App.Core.Models.AppOption> transform, System.Func<Altinn.App.Core.Features.Options.Altinn2Provider.MetadataCodeListCodes, bool>? filter, string? metadataApiId = null, int? codeListVersion = default) { }
        public string Id { get; }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.AppOptions> GetAppOptionsAsync(string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Features.Options.Altinn2Provider.MetadataCodelistResponse> GetRawAltinn2CodelistAsync(string? language) { }
    }
    public class Altinn2MetadataApiClient
    {
        public Altinn2MetadataApiClient(System.Net.Http.HttpClient client) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Features.Options.Altinn2Provider.MetadataCodelistResponse> GetAltinn2Codelist(string id, string langCode, int? version = default) { }
    }
    public class MetadataCodeListCodes
    {
        public MetadataCodeListCodes() { }
        public string Code { get; set; }
        public string Value1 { get; set; }
        public string Value2 { get; set; }
        public string Value3 { get; set; }
    }
    public class MetadataCodelistResponse
    {
        public MetadataCodelistResponse() { }
        public System.Collections.Generic.List<Altinn.App.Core.Features.Options.Altinn2Provider.MetadataCodeListCodes> Codes { get; set; }
        public int Language { get; set; }
        public string Name { get; set; }
        public int Version { get; set; }
    }
}
namespace Altinn.App.Core.Features.Options
{
    public class AppOptionsFactory
    {
        public AppOptionsFactory(System.IServiceProvider serviceProvider) { }
        public Altinn.App.Core.Features.IAppOptionsProvider GetOptionsProvider(string optionsId) { }
    }
    public class AppOptionsFileHandler : Altinn.App.Core.Features.Options.IAppOptionsFileHandler
    {
        public AppOptionsFileHandler(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.AppSettings> settings) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.AppOption>?> ReadOptionsFromFileAsync(string optionId) { }
    }
    public class AppOptionsService : Altinn.App.Core.Features.Options.IAppOptionsService
    {
        public AppOptionsService(Altinn.App.Core.Features.Options.AppOptionsFactory appOptionsFactory, Altinn.App.Core.Features.Options.InstanceAppOptionsFactory instanceAppOptionsFactory, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.AppOptions> GetOptionsAsync(string optionId, string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.AppOptions> GetOptionsAsync(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string optionId, string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs) { }
    }
    public static class AppOptionsServiceExtentions
    {
        public static void AddJoinedAppOptions(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string id, params string[] subLists) { }
    }
    public static class CommonOptionProviderServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAltinn2CodeList(this Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, string id, System.Func<Altinn.App.Core.Features.Options.Altinn2Provider.MetadataCodeListCodes, Altinn.App.Core.Models.AppOption> transform, System.Func<Altinn.App.Core.Features.Options.Altinn2Provider.MetadataCodeListCodes, bool>? filter = null, string? metadataApiId = null, int? codeListVersion = default) { }
    }
    public class DefaultAppOptionsProvider : Altinn.App.Core.Features.IAppOptionsProvider
    {
        public DefaultAppOptionsProvider(System.IServiceProvider serviceProvider) { }
        public string Id { get; }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.AppOptions> GetAppOptionsAsync(string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs) { }
    }
    public interface IAppOptionsFileHandler
    {
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.AppOption>?> ReadOptionsFromFileAsync(string optionId);
    }
    public interface IAppOptionsService
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Models.AppOptions> GetOptionsAsync(string optionId, string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs);
        System.Threading.Tasks.Task<Altinn.App.Core.Models.AppOptions> GetOptionsAsync(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string optionId, string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs);
    }
    public class InstanceAppOptionsFactory
    {
        public InstanceAppOptionsFactory(System.IServiceProvider serviceProvider) { }
        public Altinn.App.Core.Features.IInstanceAppOptionsProvider GetOptionsProvider(string optionsId) { }
    }
    public class JoinedAppOptionsProvider : Altinn.App.Core.Features.IAppOptionsProvider
    {
        public JoinedAppOptionsProvider(string id, System.Collections.Generic.IEnumerable<string> subOptions, System.Func<Altinn.App.Core.Features.Options.AppOptionsFactory> appOptionsFactory) { }
        public string Id { get; }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.AppOptions> GetAppOptionsAsync(string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs) { }
    }
    public class NullInstanceAppOptionsProvider : Altinn.App.Core.Features.IInstanceAppOptionsProvider
    {
        public NullInstanceAppOptionsProvider() { }
        public string Id { get; }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.AppOptions> GetInstanceAppOptionsAsync(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string? language, System.Collections.Generic.Dictionary<string, string> keyValuePairs) { }
    }
}
namespace Altinn.App.Core.Features.PageOrder
{
    [System.Obsolete("IPageOrder does not work with frontend version 4")]
    public class DefaultPageOrder : Altinn.App.Core.Features.IPageOrder
    {
        public DefaultPageOrder(Altinn.App.Core.Internal.App.IAppResources resources) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetPageOrder(Altinn.App.Core.Models.AppIdentifier appIdentifier, Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string layoutSetId, string currentPage, string dataTypeId, object formData) { }
    }
}
namespace Altinn.App.Core.Features.Payment.Exceptions
{
    public class PaymentException : Altinn.App.Core.Exceptions.AltinnException
    {
        public PaymentException(string message) { }
    }
}
namespace Altinn.App.Core.Features.Payment
{
    public interface IOrderDetailsCalculator
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Features.Payment.Models.OrderDetails> CalculateOrderDetails(Altinn.Platform.Storage.Interface.Models.Instance instance, string? language);
    }
}
namespace Altinn.App.Core.Features.Payment.Models
{
    public class Address
    {
        public Address() { }
        public string? AddressLine1 { get; set; }
        public string? AddressLine2 { get; set; }
        public string? City { get; set; }
        public string? Country { get; set; }
        public string? Name { get; set; }
        public string? PostalCode { get; set; }
    }
    public class CardDetails
    {
        public CardDetails() { }
        public string? ExpiryDate { get; set; }
        public string? MaskedPan { get; set; }
    }
    public class InvoiceDetails
    {
        public InvoiceDetails() { }
        public string? InvoiceNumber { get; set; }
    }
    public class OrderDetails
    {
        public OrderDetails() { }
        public Altinn.App.Core.Features.Payment.Models.PayerType[]? AllowedPayerTypes { get; set; }
        public required string Currency { get; set; }
        public required System.Collections.Generic.List<Altinn.App.Core.Features.Payment.Models.PaymentOrderLine> OrderLines { get; set; }
        public string? OrderReference { get; set; }
        public Altinn.App.Core.Features.Payment.Models.Payer? Payer { get; set; }
        public required string PaymentProcessorId { get; set; }
        public required Altinn.App.Core.Features.Payment.Models.PaymentReceiver Receiver { get; set; }
        public decimal TotalPriceExVat { get; }
        public decimal TotalPriceIncVat { get; }
        public decimal TotalVat { get; }
    }
    public class Payer
    {
        public Payer() { }
        public Altinn.App.Core.Features.Payment.Models.Address? BillingAddress { get; set; }
        public Altinn.App.Core.Features.Payment.Models.PayerCompany? Company { get; set; }
        public Altinn.App.Core.Features.Payment.Models.PayerPrivatePerson? PrivatePerson { get; set; }
        public Altinn.App.Core.Features.Payment.Models.Address? ShippingAddress { get; set; }
    }
    public class PayerCompany
    {
        public PayerCompany() { }
        public Altinn.App.Core.Features.Payment.Models.PayerPrivatePerson? ContactPerson { get; set; }
        public string? Name { get; set; }
        public string? OrganisationNumber { get; set; }
    }
    public class PayerPrivatePerson
    {
        public PayerPrivatePerson() { }
        public string? Email { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public Altinn.App.Core.Features.Payment.Models.PhoneNumber? PhoneNumber { get; set; }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum PayerType
    {
        Person = 0,
        Company = 1,
    }
    public class PaymentDetails
    {
        public PaymentDetails() { }
        public Altinn.App.Core.Features.Payment.Models.CardDetails? CardDetails { get; set; }
        public string? ChargedDate { get; set; }
        public string? CreatedDate { get; set; }
        public Altinn.App.Core.Features.Payment.Models.InvoiceDetails? InvoiceDetails { get; set; }
        public Altinn.App.Core.Features.Payment.Models.Payer? Payer { get; set; }
        public required string PaymentId { get; set; }
        public string? PaymentMethod { get; set; }
        public string? PaymentType { get; set; }
        public string? RedirectUrl { get; set; }
    }
    public class PaymentInformation
    {
        public PaymentInformation() { }
        public required Altinn.App.Core.Features.Payment.Models.OrderDetails OrderDetails { get; set; }
        public Altinn.App.Core.Features.Payment.Models.PaymentDetails? PaymentDetails { get; set; }
        public required Altinn.App.Core.Features.Payment.Models.PaymentStatus Status { get; set; }
        public required string TaskId { get; set; }
    }
    public class PaymentOrderLine
    {
        public PaymentOrderLine() { }
        public required string Id { get; set; }
        public required string Name { get; set; }
        public required decimal PriceExVat { get; set; }
        public int Quantity { get; set; }
        public string? TextResourceKey { get; set; }
        public string Unit { get; set; }
        public required decimal VatPercent { get; set; }
    }
    public class PaymentReceiver
    {
        public PaymentReceiver() { }
        public string? BankAccountNumber { get; set; }
        public string? Email { get; set; }
        public string? Name { get; set; }
        public string? OrganisationNumber { get; set; }
        public Altinn.App.Core.Features.Payment.Models.PhoneNumber? PhoneNumber { get; set; }
        public Altinn.App.Core.Features.Payment.Models.Address? PostalAddress { get; set; }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum PaymentStatus
    {
        Uninitialized = 0,
        Created = 1,
        Paid = 2,
        Failed = 3,
        Cancelled = 4,
        Skipped = 5,
    }
    public class PhoneNumber
    {
        public PhoneNumber() { }
        public string? Number { get; set; }
        public string? Prefix { get; set; }
    }
}
namespace Altinn.App.Core.Features.Payment.Processors
{
    public interface IPaymentProcessor
    {
        string PaymentProcessorId { get; }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "status",
                "paymentDetails"})]
        System.Threading.Tasks.Task<System.ValueTuple<Altinn.App.Core.Features.Payment.Models.PaymentStatus, Altinn.App.Core.Features.Payment.Models.PaymentDetails>> GetPaymentStatus(Altinn.Platform.Storage.Interface.Models.Instance instance, string paymentId, decimal expectedTotalIncVat, string? language);
        System.Threading.Tasks.Task<Altinn.App.Core.Features.Payment.Models.PaymentDetails> StartPayment(Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.App.Core.Features.Payment.Models.OrderDetails orderDetails, string? language);
        System.Threading.Tasks.Task<bool> TerminatePayment(Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.App.Core.Features.Payment.Models.PaymentInformation paymentInformation);
    }
}
namespace Altinn.App.Core.Features.Payment.Processors.Nets
{
    public class NetsPaymentSettings
    {
        public NetsPaymentSettings() { }
        public required string BaseUrl { get; set; }
        public bool? MerchantHandlesConsumerData { get; set; }
        public System.Collections.Generic.List<Altinn.App.Core.Features.Payment.Processors.Nets.NetsPaymentSettings.PaymentMethodConfigurationItem>? PaymentMethodsConfiguration { get; set; }
        public required string SecretApiKey { get; set; }
        public bool ShowMerchantName { get; set; }
        public bool ShowOrderSummary { get; set; }
        public required string TermsUrl { get; set; }
        public class PaymentMethodConfigurationItem
        {
            public PaymentMethodConfigurationItem() { }
            public required bool Enabled { get; set; }
            public required string Name { get; set; }
        }
    }
}
namespace Altinn.App.Core.Features.Pdf
{
    [System.Obsolete("This class was used for the old PDF generator, and is used for backwards compatib" +
        "ility in the new one. Create a custom pdf layout instead if you need to customiz" +
        "e the PDF layout.")]
    public class NullPdfFormatter : Altinn.App.Core.Features.IPdfFormatter
    {
        public NullPdfFormatter() { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.LayoutSettings> FormatPdf(Altinn.App.Core.Models.LayoutSettings layoutSettings, object data) { }
    }
}
namespace Altinn.App.Core.Features.Signing
{
    public class CommunicationConfig
    {
        public CommunicationConfig() { }
        [System.Text.Json.Serialization.JsonPropertyName("inboxMessage")]
        public Altinn.App.Core.Features.Signing.InboxMessage? InboxMessage { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("notification")]
        public Altinn.App.Core.Features.Signing.Notification? Notification { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("notificationChoice")]
        public Altinn.App.Core.Features.Signing.NotificationChoice NotificationChoice { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("reminderNotification")]
        public Altinn.App.Core.Features.Signing.Notification? ReminderNotification { get; set; }
    }
    public class Email
    {
        public Email() { }
        [System.Text.Json.Serialization.JsonPropertyName("bodyTextResourceKey")]
        public string? BodyTextResourceKey { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("emailAddress")]
        public string? EmailAddress { get; set; }
        public string Reference { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("subjectTextResourceKey")]
        public string? SubjectTextResourceKey { get; set; }
    }
    public sealed class GetSigneesParameters : System.IEquatable<Altinn.App.Core.Features.Signing.GetSigneesParameters>
    {
        public GetSigneesParameters() { }
        public required Altinn.App.Core.Features.IInstanceDataAccessor InstanceDataAccessor { get; init; }
    }
    public interface ISigneeProvider
    {
        string Id { get; init; }
        System.Threading.Tasks.Task<Altinn.App.Core.Features.Signing.SigneeProviderResult> GetSignees(Altinn.App.Core.Features.Signing.GetSigneesParameters parameters);
    }
    public class InboxMessage
    {
        public InboxMessage() { }
        [System.Text.Json.Serialization.JsonPropertyName("bodyTextResourceKey")]
        public required string BodyTextResourceKey { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("summaryTextResourceKey")]
        public required string SummaryTextResourceKey { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("titleTextResourceKey")]
        public required string TitleTextResourceKey { get; set; }
    }
    public class Notification
    {
        public Notification() { }
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public Altinn.App.Core.Features.Signing.Email? Email { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("sms")]
        public Altinn.App.Core.Features.Signing.Sms? Sms { get; set; }
    }
    public enum NotificationChoice
    {
        None = 0,
        Email = 1,
        Sms = 2,
        SmsAndEmail = 3,
        SmsPreferred = 4,
        EmailPreferred = 5,
    }
    public class ProvidedOrganization : Altinn.App.Core.Features.Signing.ProvidedSignee
    {
        public ProvidedOrganization() { }
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public required string Name { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("organizationNumber")]
        public required string OrganizationNumber { get; init; }
    }
    public class ProvidedPerson : Altinn.App.Core.Features.Signing.ProvidedSignee
    {
        public ProvidedPerson() { }
        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public required string FullName { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("socialSecurityNumber")]
        public required string SocialSecurityNumber { get; init; }
    }
    public abstract class ProvidedSignee
    {
        protected ProvidedSignee() { }
        [System.Text.Json.Serialization.JsonPropertyName("communicationConfig")]
        public Altinn.App.Core.Features.Signing.CommunicationConfig? CommunicationConfig { get; init; }
    }
    public class SigneeProviderResult
    {
        public SigneeProviderResult() { }
        public required System.Collections.Generic.List<Altinn.App.Core.Features.Signing.ProvidedSignee> Signees { get; set; }
    }
    public class Sms
    {
        public Sms() { }
        [System.Text.Json.Serialization.JsonPropertyName("bodyTextResourceKey")]
        public string? BodyTextResourceKey { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("mobileNumber")]
        public string? MobileNumber { get; set; }
        public string Reference { get; set; }
    }
}
namespace Altinn.App.Core.Features.Validation.Default
{
    public class DataAnnotationValidator : Altinn.App.Core.Features.IFormDataValidator
    {
        public DataAnnotationValidator(Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator objectModelValidator, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.GeneralSettings> generalSettings) { }
        public string DataType { get; }
        public string ValidationSource { get; }
        public bool HasRelevantChanges(object current, object previous) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue>> ValidateFormData(Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.Platform.Storage.Interface.Models.DataElement dataElement, object data, string? language) { }
    }
    public class DefaultDataElementValidator : Altinn.App.Core.Features.IDataElementValidator
    {
        public DefaultDataElementValidator() { }
        public string DataType { get; }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue>> ValidateDataElement(Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.Platform.Storage.Interface.Models.DataElement dataElement, Altinn.Platform.Storage.Interface.Models.DataType dataType, string? language) { }
    }
    public class DefaultTaskValidator : Altinn.App.Core.Features.ITaskValidator
    {
        public DefaultTaskValidator(Altinn.App.Core.Internal.App.IAppMetadata appMetadata) { }
        public string TaskId { get; }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue>> ValidateTask(Altinn.Platform.Storage.Interface.Models.Instance instance, string taskId, string? language) { }
    }
    public class ExpressionValidator : Altinn.App.Core.Features.IValidator
    {
        public ExpressionValidator(Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Features.Validation.Default.ExpressionValidator> logger, Altinn.App.Core.Internal.App.IAppResources appResourceService, Altinn.App.Core.Internal.Expressions.ILayoutEvaluatorStateInitializer layoutEvaluatorStateInitializer, Altinn.App.Core.Internal.App.IAppMetadata appMetadata, System.IServiceProvider serviceProvider) { }
        public string TaskId { get; }
        public string ValidationSource { get; }
        public System.Threading.Tasks.Task<bool> HasRelevantChanges(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, Altinn.App.Core.Models.DataElementChanges changes) { }
        public bool ShouldRunForTask(string taskId) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue>> Validate(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, string? language) { }
    }
    public class LegacyIInstanceValidatorFormDataValidator : Altinn.App.Core.Features.IValidator
    {
        public LegacyIInstanceValidatorFormDataValidator(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.GeneralSettings> generalSettings, Altinn.App.Core.Features.IInstanceValidator instanceValidator) { }
        public string TaskId { get; }
        public string ValidationSource { get; }
        public System.Threading.Tasks.Task<bool> HasRelevantChanges(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, Altinn.App.Core.Models.DataElementChanges changes) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue>> Validate(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, string? language) { }
    }
    public class LegacyIInstanceValidatorTaskValidator : Altinn.App.Core.Features.IValidator
    {
        public LegacyIInstanceValidatorTaskValidator(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.GeneralSettings> generalSettings, Altinn.App.Core.Features.IInstanceValidator instanceValidator) { }
        public bool NoIncrementalValidation { get; }
        public string TaskId { get; }
        public string ValidationSource { get; }
        public System.Threading.Tasks.Task<bool> HasRelevantChanges(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, Altinn.App.Core.Models.DataElementChanges changes) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue>> Validate(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, string? language) { }
    }
    public class RequiredLayoutValidator : Altinn.App.Core.Features.IValidator
    {
        public RequiredLayoutValidator(Altinn.App.Core.Internal.Expressions.ILayoutEvaluatorStateInitializer layoutEvaluatorStateInitializer, Altinn.App.Core.Internal.App.IAppResources appResources) { }
        public string TaskId { get; }
        public string ValidationSource { get; }
        public System.Threading.Tasks.Task<bool> HasRelevantChanges(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, Altinn.App.Core.Models.DataElementChanges changes) { }
        public bool ShouldRunForTask(string taskId) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue>> Validate(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, string? language) { }
    }
}
namespace Altinn.App.Core.Features.Validation
{
    public abstract class GenericFormDataValidator<TModel> : Altinn.App.Core.Features.IFormDataValidator
    {
        protected GenericFormDataValidator(string dataType) { }
        public string DataType { get; }
        public virtual bool NoIncrementalValidation { get; }
        public virtual bool ShouldRunAfterRemovingHiddenData { get; }
        public virtual string ValidationSource { get; }
        protected void AddValidationIssue(Altinn.App.Core.Models.Validation.ValidationIssue issue) { }
        protected void CreateValidationIssue<T>(System.Linq.Expressions.Expression<System.Func<TModel, T>> selector, string textKey, Altinn.App.Core.Models.Validation.ValidationIssueSeverity severity = 1, string? description = null, string? code = null, System.Collections.Generic.Dictionary<string, string>? customTextParameters = null) { }
        protected abstract bool HasRelevantChanges(TModel current, TModel previous);
        public bool HasRelevantChanges(object current, object previous) { }
        protected abstract System.Threading.Tasks.Task ValidateFormData(Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.Platform.Storage.Interface.Models.DataElement dataElement, TModel data, string? language);
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue>> ValidateFormData(Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.Platform.Storage.Interface.Models.DataElement dataElement, object data, string? language) { }
    }
    public interface IFileValidator
    {
        string Id { get; }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Success",
                "Errors"})]
        System.Threading.Tasks.Task<System.ValueTuple<bool, System.Collections.Generic.IEnumerable<Altinn.App.Core.Models.Validation.ValidationIssue>>> Validate(Altinn.Platform.Storage.Interface.Models.DataType dataType, System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.FileAnalysis.FileAnalysisResult> fileAnalysisResults);
    }
    public class NullInstantiationValidator : Altinn.App.Core.Features.IInstantiationValidator
    {
        public NullInstantiationValidator() { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.Validation.InstantiationValidationResult?> Validate(Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
}
namespace Altinn.App.Core.Features.Validation.Helpers
{
    public static class ModelStateHelpers
    {
        public static System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue> MapModelStateToIssueList(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState, Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.App.Core.Configuration.GeneralSettings generalSettings) { }
        public static string? ModelKeyToField(string? modelKey, System.Type data) { }
        public static System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue> ModelStateToIssueList(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary modelState, Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.Platform.Storage.Interface.Models.DataElement dataElement, Altinn.App.Core.Configuration.GeneralSettings generalSettings, System.Type objectType) { }
    }
}
namespace Altinn.App.Core.Helpers
{
    public static class AppTextHelper
    {
        public static string GetAppText(string key, System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, string>> serviceText, System.Collections.Generic.List<string>? textParams, string languageId) { }
    }
    public static class AuthenticationHelper
    {
        public static int GetUserId(Microsoft.AspNetCore.Http.HttpContext context) { }
    }
    public class CamelCaseExceptDictionaryResolver : Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver
    {
        public CamelCaseExceptDictionaryResolver() { }
        protected override string ResolveDictionaryKey(string dictionaryKey) { }
    }
    public static class DataHelper
    {
        public static System.Collections.Generic.Dictionary<string, string?> GetUpdatedDataValues(System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.DataField>? dataFields, System.Collections.Generic.Dictionary<string, string?> currentDataValues, string dataType, object updatedData) { }
        public static void ResetDataFields(System.Collections.Generic.List<string> dataFields, object data) { }
    }
    [System.Obsolete("This functionality will be removed in the future")]
    public class IgnorePropertiesWithPrefix
    {
        public IgnorePropertiesWithPrefix(string prefix) { }
        public void ModifyPrefixInfo(System.Text.Json.Serialization.Metadata.JsonTypeInfo ti) { }
    }
    public static class InstantiationHelper
    {
        public static System.Collections.Generic.List<Altinn.Platform.Register.Models.Party> FilterPartiesByAllowedPartyTypes(System.Collections.Generic.IReadOnlyList<Altinn.Platform.Register.Models.Party>? parties, Altinn.Platform.Storage.Interface.Models.PartyTypesAllowed? partyTypesAllowed) { }
        public static Altinn.Platform.Register.Models.Party? GetPartyByPartyId(System.Collections.Generic.List<Altinn.Platform.Register.Models.Party>? partyList, int partyId) { }
        public static bool IsPartyAllowedToInstantiate(Altinn.Platform.Register.Models.Party? party, Altinn.Platform.Storage.Interface.Models.PartyTypesAllowed? partyTypesAllowed) { }
        public static Altinn.Platform.Storage.Interface.Models.InstanceOwner PartyToInstanceOwner(Altinn.Platform.Register.Models.Party party) { }
    }
    public static class JsonHelper
    {
        public static System.Collections.Generic.Dictionary<string, object?> FindChangedFields(string oldJson, string currentJson) { }
        [System.Obsolete("Will be removed in v9")]
        public static System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, object?>?> ProcessDataWriteWithDiff(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Guid dataGuid, object serviceModel, string? language, System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.IDataProcessor> dataProcessors, Microsoft.Extensions.Logging.ILogger logger) { }
    }
    public static class JsonSerializerPermissive
    {
        public static readonly System.Text.Json.JsonSerializerOptions JsonSerializerOptionsDefaults;
        public static T Deserialize<T>(string content) { }
        public static System.Threading.Tasks.Task<T> DeserializeAsync<T>(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken = default) { }
        public static string Serialize(Altinn.Platform.Register.Models.PartyLookup partyLookup) { }
    }
    public static class LinqExpressionHelpers
    {
        public static string GetJsonPath<TModel, T>(System.Linq.Expressions.Expression<System.Func<TModel, T>> expression) { }
    }
    public static class ListHelpers
    {
        public static void RemoveAll<T>(this System.Collections.Generic.IList<T> list, System.Predicate<T> predicate) { }
    }
    public static class MimeTypeMap
    {
        public static Altinn.App.Core.Models.MimeType GetMimeType(string extension) { }
    }
    public static class MultiDecisionHelper
    {
        public static Altinn.Authorization.ABAC.Xacml.JsonProfile.XacmlJsonRequestRoot CreateMultiDecisionRequest(System.Security.Claims.ClaimsPrincipal user, Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.List<string> actionTypes) { }
        public static System.Collections.Generic.Dictionary<string, bool> ValidatePdpMultiDecision(System.Collections.Generic.Dictionary<string, bool> actions, System.Collections.Generic.List<Altinn.Authorization.ABAC.Xacml.JsonProfile.XacmlJsonResult> results, System.Security.Claims.ClaimsPrincipal user) { }
    }
    public static class ObjectUtils
    {
        public static void InitializeAltinnRowId(object model, int depth = 64) { }
        public static void PrepareModelForXmlStorage(object model, int depth = 64) { }
        public static bool RemoveAltinnRowId(object model, int depth = 64) { }
    }
    public static class PathHelper
    {
        public static void EnsureLegalPath(string legalPath, string filePath) { }
        public static bool ValidateLegalFilePath(string legalPath, string filePath) { }
    }
    public class PlatformHttpException : Altinn.App.Core.Exceptions.AltinnException
    {
        public PlatformHttpException(System.Net.Http.HttpResponseMessage response, string message) { }
        public System.Net.Http.HttpResponseMessage Response { get; }
        public static System.Threading.Tasks.Task<Altinn.App.Core.Helpers.PlatformHttpException> CreateAsync(System.Net.Http.HttpResponseMessage response) { }
    }
    public class ProcessError
    {
        public ProcessError() { }
        public string Code { get; set; }
        public string Text { get; set; }
    }
    public static class ProcessHelper
    {
        public static Altinn.App.Core.Internal.Process.ProcessSequenceFlowType GetSequenceFlowType(System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.SequenceFlow> flows) { }
        public static string? GetValidNextElementOrError(string? proposedElementId, System.Collections.Generic.List<string> possibleNextElements, out Altinn.App.Core.Helpers.ProcessError? nextElementError) { }
        public static string? GetValidStartEventOrError(string? proposedStartEvent, System.Collections.Generic.List<string> possibleStartEvents, out Altinn.App.Core.Helpers.ProcessError? startEventError) { }
    }
    public enum RowRemovalOption
    {
        DeleteRow = 0,
        SetToNull = 1,
        Ignore = 2,
    }
    public static class SelfLinkHelper
    {
        public static string BuildFrontendSelfLink(Altinn.Platform.Storage.Interface.Models.Instance instance, Microsoft.AspNetCore.Http.HttpRequest request) { }
        public static void SetDataAppSelfLinks(int instanceOwnerPartyId, System.Guid instanceGuid, Altinn.Platform.Storage.Interface.Models.DataElement dataElement, Microsoft.AspNetCore.Http.HttpRequest request) { }
        public static void SetInstanceAppSelfLinks(Altinn.Platform.Storage.Interface.Models.Instance instance, Microsoft.AspNetCore.Http.HttpRequest request) { }
    }
    public class ServiceException : Altinn.App.Core.Exceptions.AltinnException
    {
        public ServiceException(System.Net.HttpStatusCode statusCode, string message) { }
        public ServiceException(System.Net.HttpStatusCode statusCode, string message, System.Exception innerException) { }
        public System.Net.HttpStatusCode StatusCode { get; }
    }
    [System.Obsolete("Use Altinn.App.Core.Features.Auth.IAuthenticationContext instead")]
    public class UserHelper
    {
        public UserHelper(Altinn.App.Core.Internal.Profile.IProfileClient profileClient, Altinn.App.Core.Internal.Registers.IAltinnPartyClient altinnPartyClientService, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.GeneralSettings> settings, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.UserContext> GetUserContext(Microsoft.AspNetCore.Http.HttpContext context) { }
    }
}
namespace Altinn.App.Core.Helpers.DataModel
{
    [System.Obsolete("This class is no longer in use by altinn and will be removed in a future version")]
    public class DataModel
    {
        public DataModel(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor) { }
        public Altinn.Platform.Storage.Interface.Models.Instance Instance { get; }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.Layout.DataReference> AddIndexes(Altinn.App.Core.Models.Layout.ModelBinding key, Altinn.App.Core.Models.DataElementIdentifier defaultDataElementIdentifier, int[]? rowIndexes) { }
        public System.Threading.Tasks.Task<object?> GetModelData(Altinn.App.Core.Models.Layout.ModelBinding key, Altinn.App.Core.Models.DataElementIdentifier defaultDataElementIdentifier, int[]? rowIndexes) { }
        public System.Threading.Tasks.Task<int?> GetModelDataCount(Altinn.App.Core.Models.Layout.ModelBinding key, Altinn.App.Core.Models.DataElementIdentifier defaultDataElementIdentifier, int[]? rowIndexes) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.Layout.DataReference[]> GetResolvedKeys(Altinn.App.Core.Models.Layout.DataReference reference) { }
        public System.Threading.Tasks.Task RemoveField(Altinn.App.Core.Models.Layout.DataReference reference, Altinn.App.Core.Helpers.RowRemovalOption rowRemovalOption) { }
        public static int[]? GetRowIndices(string field) { }
    }
    public class DataModelException : Altinn.App.Core.Exceptions.AltinnException
    {
        public DataModelException(string msg) { }
    }
    [System.Obsolete("Will be removed in v9 use Altinn.App.Core.Helpers.DataModel.FormDataWrapperFactor" +
        "y instead")]
    public class DataModelWrapper
    {
        public DataModelWrapper(object dataModel) { }
        public string AddIndicies(string field, System.ReadOnlySpan<int> rowIndexes = default) { }
        public object? GetModelData(string field, System.ReadOnlySpan<int> rowIndexes = default) { }
        public int? GetModelDataCount(string field, System.ReadOnlySpan<int> rowIndexes = default) { }
        public string[] GetResolvedKeys(string field) { }
        public void RemoveField(string field, Altinn.App.Core.Helpers.RowRemovalOption rowRemovalOption) { }
    }
}
namespace Altinn.App.Core.Helpers.Extensions
{
    public static class StringExtensions
    {
        public static string AsFileName(this string input, bool throwExceptionOnInvalidCharacters = true) { }
    }
}
namespace Altinn.App.Core.Helpers.Serialization
{
    public class ModelDeserializer
    {
        public ModelDeserializer(Microsoft.Extensions.Logging.ILogger logger, System.Type modelType) { }
        public string? Error { get; }
        public System.Threading.Tasks.Task<object?> DeserializeAsync(System.IO.Stream stream, string? contentType) { }
    }
    public class ModelSerializationService
    {
        public ModelSerializationService(Altinn.App.Core.Internal.AppModel.IAppModel appModel, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public object DeserializeFromStorage(System.ReadOnlySpan<byte> data, Altinn.Platform.Storage.Interface.Models.DataType dataType) { }
        public object DeserializeJson(System.ReadOnlySpan<byte> data, System.Type modelType) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.Result.ServiceResult<object, Microsoft.AspNetCore.Mvc.ProblemDetails>> DeserializeSingleFromStream(System.IO.Stream body, string? contentType, Altinn.Platform.Storage.Interface.Models.DataType dataType) { }
        public object DeserializeXml(System.ReadOnlySpan<byte> data, System.Type modelType) { }
        public object GetEmpty(Altinn.Platform.Storage.Interface.Models.DataType dataType) { }
        public System.ReadOnlyMemory<byte> SerializeToJson(object model) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "data",
                "contentType"})]
        public System.ValueTuple<System.ReadOnlyMemory<byte>, string> SerializeToStorage(object model, Altinn.Platform.Storage.Interface.Models.DataType dataType) { }
        public System.ReadOnlyMemory<byte> SerializeToXml(object model) { }
    }
}
namespace Altinn.App.Core.Implementation
{
    public class AppResourcesSI : Altinn.App.Core.Internal.App.IAppResources
    {
        public AppResourcesSI(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.AppSettings> settings, Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Microsoft.AspNetCore.Hosting.IWebHostEnvironment hostingEnvironment, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Implementation.AppResourcesSI> logger, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public Altinn.Platform.Storage.Interface.Models.Application GetApplication() { }
        public string? GetApplicationBPMNProcess() { }
        public string? GetApplicationXACMLPolicy() { }
        public string GetClassRefForLogicDataType(string dataType) { }
        public System.Threading.Tasks.Task<string?> GetFooter() { }
        [System.Obsolete("Use GetLayoutModelForTask instead")]
        public Altinn.App.Core.Models.Layout.LayoutModel GetLayoutModel(string? layoutSetId = null) { }
        public Altinn.App.Core.Models.Layout.LayoutModel? GetLayoutModelForTask(string taskId) { }
        public Altinn.App.Core.Models.LayoutSets? GetLayoutSet() { }
        public Altinn.App.Core.Models.LayoutSet? GetLayoutSetForTask(string taskId) { }
        public string GetLayoutSets() { }
        public Altinn.App.Core.Models.LayoutSettings GetLayoutSettings() { }
        public Altinn.App.Core.Models.LayoutSettings? GetLayoutSettingsForSet(string? layoutSetId) { }
        public string? GetLayoutSettingsString() { }
        public string? GetLayoutSettingsStringForSet(string layoutSetId) { }
        public string GetLayouts() { }
        public string GetLayoutsForSet(string layoutSetId) { }
        public string GetModelJsonSchema(string modelId) { }
        public string? GetPrefillJson(string dataModelName = "ServiceModel") { }
        public byte[] GetRuleConfigurationForSet(string id) { }
        public byte[] GetRuleHandlerForSet(string id) { }
        public byte[] GetText(string org, string app, string textResource) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.TextResource?> GetTexts(string org, string app, string language) { }
        public string? GetValidationConfiguration(string dataTypeId) { }
    }
    public class DefaultAppEvents : Altinn.App.Core.Internal.App.IAppEvents
    {
        public DefaultAppEvents(Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Implementation.DefaultAppEvents> logger, Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Altinn.App.Core.Internal.Instances.IInstanceClient instanceClient, Altinn.App.Core.Internal.Data.IDataClient dataClient) { }
        public System.Threading.Tasks.Task OnEndAppEvent(string endEvent, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public System.Threading.Tasks.Task OnStartAppEvent(string startEvent, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public class PrefillSI : Altinn.App.Core.Internal.Prefill.IPrefill
    {
        public PrefillSI(Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Implementation.PrefillSI> logger, Altinn.App.Core.Internal.App.IAppResources appResourcesService, Altinn.App.Core.Internal.Registers.IAltinnPartyClient altinnPartyClient, Altinn.App.Core.Features.Auth.IAuthenticationContext authenticationContext, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public void PrefillDataModel(object dataModel, System.Collections.Generic.Dictionary<string, string> externalPrefill, bool continueOnError = false) { }
        public System.Threading.Tasks.Task PrefillDataModel(string partyId, string dataModelName, object dataModel, System.Collections.Generic.Dictionary<string, string>? externalPrefill = null) { }
    }
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public class UserTokenProvider : Altinn.App.Core.Internal.Auth.IUserTokenProvider
    {
        public UserTokenProvider(Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.AppSettings> appSettings) { }
        public string GetUserToken() { }
    }
}
namespace Altinn.App.Core.Infrastructure.Clients.Authentication
{
    public class AuthenticationClient : Altinn.App.Core.Internal.Auth.IAuthenticationClient
    {
        public AuthenticationClient(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Infrastructure.Clients.Authentication.AuthenticationClient> logger, System.Net.Http.HttpClient httpClient, Altinn.App.Core.Features.Auth.IAuthenticationContext authenticationContext) { }
        public System.Threading.Tasks.Task<string> RefreshToken() { }
    }
}
namespace Altinn.App.Core.Infrastructure.Clients.Authorization
{
    public class AuthorizationClient : Altinn.App.Core.Internal.Auth.IAuthorizationClient
    {
        public AuthorizationClient(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor, System.Net.Http.HttpClient httpClient, Microsoft.Extensions.Options.IOptionsMonitor<Altinn.App.Core.Configuration.AppSettings> settings, Altinn.Common.PEP.Interfaces.IPDP pdp, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Infrastructure.Clients.Authorization.AuthorizationClient> logger, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<bool> AuthorizeAction(Altinn.App.Core.Models.AppIdentifier appIdentifier, Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, System.Security.Claims.ClaimsPrincipal user, string action, string? taskId = null) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> AuthorizeActions(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Security.Claims.ClaimsPrincipal user, System.Collections.Generic.List<string> actions) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetKeyRoleOrganizationParties(int userId, System.Collections.Generic.List<string> orgNumbers) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.Platform.Register.Models.Party>?> GetPartyList(int userId) { }
        public System.Threading.Tasks.Task<bool?> ValidateSelectedParty(int userId, int partyId) { }
    }
}
namespace Altinn.App.Core.Infrastructure.Clients.Events
{
    public class EventsClient : Altinn.App.Core.Internal.Events.IEventsClient
    {
        public EventsClient(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor, System.Net.Http.HttpClient httpClient, Altinn.Common.AccessTokenClient.Services.IAccessTokenGenerator accessTokenGenerator, Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Microsoft.Extensions.Options.IOptionsMonitor<Altinn.App.Core.Configuration.AppSettings> settings, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.GeneralSettings> generalSettings, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<string> AddEvent(string eventType, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public class EventsSubscriptionClient : Altinn.App.Core.Internal.Events.IEventsSubscription
    {
        public EventsSubscriptionClient(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, System.Net.Http.HttpClient httpClient, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.GeneralSettings> generalSettings, System.IServiceProvider serviceProvider, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Infrastructure.Clients.Events.EventsSubscriptionClient> logger) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Infrastructure.Clients.Events.Subscription> AddSubscription(string org, string app, string eventType) { }
    }
    public class Subscription
    {
        public Subscription() { }
        public string? AlternativeSubjectFilter { get; set; }
        public string? Consumer { get; set; }
        public System.DateTime Created { get; set; }
        public string? CreatedBy { get; set; }
        public System.Uri? EndPoint { get; set; }
        public int Id { get; set; }
        public System.Uri? SourceFilter { get; set; }
        public string? SubjectFilter { get; set; }
        public string? TypeFilter { get; set; }
    }
    public class SubscriptionRequest
    {
        public SubscriptionRequest() { }
        public System.Uri? EndPoint { get; set; }
        public System.Uri? SourceFilter { get; set; }
        public string? TypeFilter { get; set; }
    }
}
namespace Altinn.App.Core.Infrastructure.Clients.KeyVault
{
    public class SecretsClient : Altinn.App.Core.Internal.Secrets.ISecretsClient
    {
        public SecretsClient(Microsoft.Extensions.Options.IOptions<AltinnCore.Authentication.Constants.KeyVaultSettings> keyVaultSettings) { }
        public System.Threading.Tasks.Task<byte[]> GetCertificateAsync(string certificateName) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.KeyVault.WebKey.JsonWebKey> GetKeyAsync(string keyName) { }
        public Microsoft.Azure.KeyVault.KeyVaultClient GetKeyVaultClient() { }
        public System.Threading.Tasks.Task<string> GetSecretAsync(string secretName) { }
    }
    public class SecretsLocalClient : Altinn.App.Core.Internal.Secrets.ISecretsClient
    {
        public SecretsLocalClient(Microsoft.Extensions.Configuration.IConfiguration configuration) { }
        public System.Threading.Tasks.Task<byte[]> GetCertificateAsync(string certificateName) { }
        public System.Threading.Tasks.Task<Microsoft.Azure.KeyVault.WebKey.JsonWebKey> GetKeyAsync(string keyName) { }
        public Microsoft.Azure.KeyVault.KeyVaultClient GetKeyVaultClient() { }
        public System.Threading.Tasks.Task<string> GetSecretAsync(string secretName) { }
    }
}
namespace Altinn.App.Core.Infrastructure.Clients.Maskinporten
{
    [System.Obsolete("This should only have been used to get an accesstoken from Maskinporten, and has " +
        "been replaced by IMaskinportenTokenProvider.")]
    public interface IX509CertificateProvider
    {
        System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> GetCertificate();
    }
}
namespace Altinn.App.Core.Infrastructure.Clients.Pdf
{
    public class PdfGeneratorClient : Altinn.App.Core.Internal.Pdf.IPdfGeneratorClient
    {
        public PdfGeneratorClient(Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Infrastructure.Clients.Pdf.PdfGeneratorClient> logger, System.Net.Http.HttpClient httpClient, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Internal.Pdf.PdfGeneratorSettings> pdfGeneratorSettings, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Altinn.App.Core.Internal.Auth.IUserTokenProvider userTokenProvider, Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<System.IO.Stream> GeneratePdf(System.Uri uri, System.Threading.CancellationToken ct) { }
        public System.Threading.Tasks.Task<System.IO.Stream> GeneratePdf(System.Uri uri, string? footerContent, System.Threading.CancellationToken ct) { }
    }
}
namespace Altinn.App.Core.Infrastructure.Clients.Profile
{
    public class ProfileClient : Altinn.App.Core.Internal.Profile.IProfileClient
    {
        public ProfileClient(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Infrastructure.Clients.Profile.ProfileClient> logger, Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor, Microsoft.Extensions.Options.IOptionsMonitor<Altinn.App.Core.Configuration.AppSettings> settings, System.Net.Http.HttpClient httpClient, Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Altinn.Common.AccessTokenClient.Services.IAccessTokenGenerator accessTokenGenerator, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Profile.Models.UserProfile?> GetUserProfile(int userId) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Profile.Models.UserProfile?> GetUserProfile(string ssn) { }
    }
    public class ProfileClientCachingDecorator : Altinn.App.Core.Internal.Profile.IProfileClient
    {
        public ProfileClientCachingDecorator(Altinn.App.Core.Internal.Profile.IProfileClient decoratedService, Microsoft.Extensions.Caching.Memory.IMemoryCache memoryCache, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.CacheSettings> settings) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Profile.Models.UserProfile?> GetUserProfile(int userId) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Profile.Models.UserProfile?> GetUserProfile(string ssn) { }
    }
}
namespace Altinn.App.Core.Infrastructure.Clients.Register
{
    public class AltinnPartyClient : Altinn.App.Core.Internal.Registers.IAltinnPartyClient
    {
        public AltinnPartyClient(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Infrastructure.Clients.Register.AltinnPartyClient> logger, System.Net.Http.HttpClient httpClient, Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Altinn.App.Core.Internal.Auth.IUserTokenProvider userTokenProvider, Altinn.Common.AccessTokenClient.Services.IAccessTokenGenerator accessTokenGenerator, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Party?> GetParty(int partyId) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Party> LookupParty(Altinn.Platform.Register.Models.PartyLookup partyLookup) { }
    }
    public class PersonClient : Altinn.App.Core.Internal.Registers.IPersonClient
    {
        public PersonClient(System.Net.Http.HttpClient httpClient, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Altinn.Common.AccessTokenClient.Services.IAccessTokenGenerator accessTokenGenerator, Altinn.App.Core.Internal.Auth.IUserTokenProvider userTokenProvider) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Person?> GetPerson(string nationalIdentityNumber, string lastName, System.Threading.CancellationToken ct) { }
    }
    public class RegisterERClient : Altinn.App.Core.Internal.Registers.IOrganizationClient
    {
        public RegisterERClient(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Infrastructure.Clients.Register.RegisterERClient> logger, Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor, Microsoft.Extensions.Options.IOptionsMonitor<Altinn.App.Core.Configuration.AppSettings> settings, System.Net.Http.HttpClient httpClient, Altinn.Common.AccessTokenClient.Services.IAccessTokenGenerator accessTokenGenerator, Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Organization?> GetOrganization(string OrgNr) { }
    }
}
namespace Altinn.App.Core.Infrastructure.Clients.Storage
{
    public class ApplicationClient : Altinn.App.Core.Internal.App.IApplicationClient
    {
        public ApplicationClient(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Infrastructure.Clients.Storage.ApplicationClient> logger, System.Net.Http.HttpClient httpClient) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Application?> GetApplication(string org, string app) { }
    }
    public class DataClient : Altinn.App.Core.Internal.Data.IDataClient
    {
        public DataClient(System.Net.Http.HttpClient httpClient, System.IServiceProvider serviceProvider) { }
        public System.Threading.Tasks.Task<bool> DeleteBinaryData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataGuid) { }
        public System.Threading.Tasks.Task<bool> DeleteData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataGuid, bool delay, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<System.IO.Stream> GetBinaryData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataId, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.AttachmentList>> GetBinaryDataList(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<byte[]> GetDataBytes(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataId, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<object> GetFormData(System.Guid instanceGuid, System.Type type, string org, string app, int instanceOwnerPartyId, System.Guid dataId, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> InsertBinaryData(string instanceId, string dataType, string contentType, string? filename, System.IO.Stream stream, string? generatedFromTask = null, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> InsertBinaryData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, string dataType, Microsoft.AspNetCore.Http.HttpRequest request, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> InsertFormData<T>(Altinn.Platform.Storage.Interface.Models.Instance instance, string dataTypeString, T dataToSerialize, System.Type type, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default)
            where T :  notnull { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> InsertFormData<T>(T dataToSerialize, System.Guid instanceGuid, System.Type type, string org, string app, int instanceOwnerPartyId, string dataType, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default)
            where T :  notnull { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> LockDataElement(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, System.Guid dataGuid, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> UnlockDataElement(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, System.Guid dataGuid, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> Update(Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.Platform.Storage.Interface.Models.DataElement dataElement, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> UpdateBinaryData(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string? contentType, string? filename, System.Guid dataGuid, System.IO.Stream stream, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> UpdateBinaryData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataGuid, Microsoft.AspNetCore.Http.HttpRequest request, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> UpdateData<T>(T dataToSerialize, System.Guid instanceGuid, System.Type type, string org, string app, int instanceOwnerPartyId, System.Guid dataId, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default)
            where T :  notnull { }
    }
    public class InstanceClient : Altinn.App.Core.Internal.Instances.IInstanceClient
    {
        public InstanceClient(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Infrastructure.Clients.Storage.InstanceClient> logger, Altinn.App.Core.Internal.Auth.IUserTokenProvider userTokenProvider, System.Net.Http.HttpClient httpClient, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> AddCompleteConfirmation(int instanceOwnerPartyId, System.Guid instanceGuid) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> CreateInstance(string org, string app, Altinn.Platform.Storage.Interface.Models.Instance instanceTemplate) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> DeleteInstance(int instanceOwnerPartyId, System.Guid instanceGuid, bool hard) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> GetInstance(Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> GetInstance(string app, string org, int instanceOwnerPartyId, System.Guid instanceId) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.Instance>> GetInstances(System.Collections.Generic.Dictionary<string, Microsoft.Extensions.Primitives.StringValues> queryParams) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateDataValues(int instanceOwnerPartyId, System.Guid instanceGuid, Altinn.Platform.Storage.Interface.Models.DataValues dataValues) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdatePresentationTexts(int instanceOwnerPartyId, System.Guid instanceGuid, Altinn.Platform.Storage.Interface.Models.PresentationTexts presentationTexts) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateProcess(Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateProcessAndEvents(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.InstanceEvent> events) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateReadStatus(int instanceOwnerPartyId, System.Guid instanceGuid, string readStatus) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateSubstatus(int instanceOwnerPartyId, System.Guid instanceGuid, Altinn.Platform.Storage.Interface.Models.Substatus substatus) { }
    }
    public class InstanceEventClient : Altinn.App.Core.Internal.Instances.IInstanceEventClient
    {
        public InstanceEventClient(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor, System.Net.Http.HttpClient httpClient, Microsoft.Extensions.Options.IOptionsMonitor<Altinn.App.Core.Configuration.AppSettings> settings) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.InstanceEvent>> GetInstanceEvents(string instanceId, string instanceOwnerPartyId, string org, string app, string[] eventTypes, string from, string to) { }
        public System.Threading.Tasks.Task<string> SaveInstanceEvent(object dataToSerialize, string org, string app) { }
    }
    public class ProcessClient : Altinn.App.Core.Internal.Process.IProcessClient
    {
        public ProcessClient(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.AppSettings> appSettings, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Infrastructure.Clients.Storage.ProcessClient> logger, Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor, System.Net.Http.HttpClient httpClient, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.IO.Stream GetProcessDefinition() { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.ProcessHistoryList> GetProcessHistory(string instanceGuid, string instanceOwnerPartyId) { }
    }
    public class SignClient : Altinn.App.Core.Internal.Sign.ISignClient
    {
        public SignClient(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, System.Net.Http.HttpClient httpClient, Altinn.App.Core.Internal.Auth.IUserTokenProvider userTokenProvider) { }
        public System.Threading.Tasks.Task SignDataElements(Altinn.App.Core.Internal.Sign.SignatureContext signatureContext) { }
    }
    [System.Obsolete("Use IAppResources.GetTexts() instead")]
    public class TextClient : Altinn.App.Core.Internal.Texts.IText
    {
        public TextClient(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.AppSettings> settings, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.PlatformSettings> platformSettings, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Infrastructure.Clients.Storage.TextClient> logger, Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor, System.Net.Http.HttpClient httpClient, Microsoft.Extensions.Caching.Memory.IMemoryCache memoryCache) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.TextResource?> GetText(string org, string app, string language) { }
    }
}
namespace Altinn.App.Core.Interface
{
    [System.Obsolete("Use Altinn.App.Core.Internal.App.IAppEvents instead", true)]
    public interface IAppEvents
    {
        System.Threading.Tasks.Task OnEndAppEvent(string endEvent, Altinn.Platform.Storage.Interface.Models.Instance instance);
        System.Threading.Tasks.Task OnStartAppEvent(string startEvent, Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.App.IAppResources instead", true)]
    public interface IAppResources
    {
        byte[] GetAppResource(string org, string app, string resource);
        [System.Obsolete("GetApplication is scheduled for removal. Use Altinn.App.Core.Internal.App.IAppMet" +
            "adata.GetApplicationMetadata instead", false)]
        Altinn.Platform.Storage.Interface.Models.Application GetApplication();
        [System.Obsolete("GetApplication is scheduled for removal. Use Altinn.App.Core.Internal.App.IAppMet" +
            "adata.GetApplicationBPMNProcess instead", false)]
        string? GetApplicationBPMNProcess();
        [System.Obsolete("GetApplication is scheduled for removal. Use Altinn.App.Core.Internal.App.IAppMet" +
            "adata.GetApplicationXACMLPolicy instead", false)]
        string? GetApplicationXACMLPolicy();
        string GetClassRefForLogicDataType(string dataType);
        System.Threading.Tasks.Task<string?> GetFooter();
        [System.Obsolete("Use GetLayoutModelForTask instead")]
        Altinn.App.Core.Models.Layout.LayoutModel GetLayoutModel(string? layoutSetId = null);
        Altinn.App.Core.Models.LayoutSets? GetLayoutSet();
        Altinn.App.Core.Models.LayoutSet? GetLayoutSetForTask(string taskId);
        string GetLayoutSets();
        Altinn.App.Core.Models.LayoutSettings GetLayoutSettings();
        Altinn.App.Core.Models.LayoutSettings? GetLayoutSettingsForSet(string? layoutSetId);
        string? GetLayoutSettingsString();
        string? GetLayoutSettingsStringForSet(string layoutSetId);
        string GetLayouts();
        string GetLayoutsForSet(string layoutSetId);
        string GetModelJsonSchema(string modelId);
        [System.Obsolete("GetModelMetaDataJSON is no longer used by app frontend. Use GetModelJsonSchema.")]
        string GetModelMetaDataJSON(string org, string app);
        string? GetPrefillJson(string dataModelName = "ServiceModel");
        byte[] GetRuleConfigurationForSet(string id);
        byte[] GetRuleHandlerForSet(string id);
        byte[]? GetRuntimeResource(string resource);
        byte[] GetText(string org, string app, string textResource);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.TextResource?> GetTexts(string org, string app, string language);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.App.IApplicationClient instead", true)]
    public interface IApplication
    {
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Application?> GetApplication(string org, string app);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Auth.IAuthenticationClient instead", true)]
    public interface IAuthentication
    {
        System.Threading.Tasks.Task<string> RefreshToken();
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Auth.IAuthorizationClient instead", true)]
    public interface IAuthorization
    {
        System.Threading.Tasks.Task<bool> AuthorizeAction(Altinn.App.Core.Models.AppIdentifier appIdentifier, Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, System.Security.Claims.ClaimsPrincipal user, string action, string? taskId = null);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.Platform.Register.Models.Party>?> GetPartyList(int userId);
        System.Threading.Tasks.Task<bool?> ValidateSelectedParty(int userId, int partyId);
    }
    [System.Obsolete("Upstream API changed. Use Altinn.App.Core.Internal.Registers.IPersonClient instea" +
        "d", true)]
    public interface IDSF
    {
        System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Person?> GetPerson(string SSN);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Data.IDataClient instead", true)]
    public interface IData
    {
        [System.Obsolete("Use method DeleteData with delayed=false instead.", true)]
        System.Threading.Tasks.Task<bool> DeleteBinaryData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataGuid);
        System.Threading.Tasks.Task<bool> DeleteData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataGuid, bool delay);
        System.Threading.Tasks.Task<System.IO.Stream> GetBinaryData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataId);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.AttachmentList>> GetBinaryDataList(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid);
        System.Threading.Tasks.Task<object> GetFormData(System.Guid instanceGuid, System.Type type, string org, string app, int instanceOwnerPartyId, System.Guid dataId);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> InsertBinaryData(string instanceId, string dataType, string contentType, string filename, System.IO.Stream stream);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> InsertBinaryData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, string dataType, Microsoft.AspNetCore.Http.HttpRequest request);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> InsertFormData<T>(Altinn.Platform.Storage.Interface.Models.Instance instance, string dataType, T dataToSerialize, System.Type type);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> InsertFormData<T>(T dataToSerialize, System.Guid instanceGuid, System.Type type, string org, string app, int instanceOwnerPartyId, string dataType);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> Update(Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.Platform.Storage.Interface.Models.DataElement dataElement);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> UpdateBinaryData(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string? contentType, string filename, System.Guid dataGuid, System.IO.Stream stream);
        [System.Obsolete("Deprecated please use UpdateBinaryData(InstanceIdentifier, string, string, Guid, " +
            "Stream) instead", false)]
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> UpdateBinaryData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataGuid, Microsoft.AspNetCore.Http.HttpRequest request);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> UpdateData<T>(T dataToSerialize, System.Guid instanceGuid, System.Type type, string org, string app, int instanceOwnerPartyId, System.Guid dataId);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Registers.IOrganizationClient instead", true)]
    public interface IER
    {
        System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Organization?> GetOrganization(string OrgNr);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Events.IEventsClient instead", true)]
    public interface IEvents
    {
        System.Threading.Tasks.Task<string> AddEvent(string eventType, Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Instances.IInstanceClient instead", true)]
    public interface IInstance
    {
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> AddCompleteConfirmation(int instanceOwnerPartyId, System.Guid instanceGuid);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> CreateInstance(string org, string app, Altinn.Platform.Storage.Interface.Models.Instance instanceTemplate);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> DeleteInstance(int instanceOwnerPartyId, System.Guid instanceGuid, bool hard);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> GetInstance(Altinn.Platform.Storage.Interface.Models.Instance instance);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> GetInstance(string app, string org, int instanceOwnerPartyId, System.Guid instanceId);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.Instance>> GetInstances(System.Collections.Generic.Dictionary<string, Microsoft.Extensions.Primitives.StringValues> queryParams);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateDataValue(Altinn.Platform.Storage.Interface.Models.Instance instance, string key, string? value);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateDataValues(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.Dictionary<string, string?> dataValues);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateDataValues(int instanceOwnerPartyId, System.Guid instanceGuid, Altinn.Platform.Storage.Interface.Models.DataValues dataValues);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdatePresentationTexts(int instanceOwnerPartyId, System.Guid instanceGuid, Altinn.Platform.Storage.Interface.Models.PresentationTexts presentationTexts);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateProcess(Altinn.Platform.Storage.Interface.Models.Instance instance);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateReadStatus(int instanceOwnerPartyId, System.Guid instanceGuid, string readStatus);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateSubstatus(int instanceOwnerPartyId, System.Guid instanceGuid, Altinn.Platform.Storage.Interface.Models.Substatus substatus);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Instances.IInstanceEventClient instead", true)]
    public interface IInstanceEvent
    {
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.InstanceEvent>> GetInstanceEvents(string instanceId, string instanceOwnerPartyId, string org, string app, string[] eventTypes, string from, string to);
        System.Threading.Tasks.Task<string> SaveInstanceEvent(object dataToSerialize, string org, string app);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Registers.IPersonClient instead", true)]
    public interface IPersonLookup
    {
        System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Person?> GetPerson(string nationalIdentityNumber, string lastName, System.Threading.CancellationToken ct);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Registers.IPersonClient instead", true)]
    public interface IPersonRetriever
    {
        System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Person?> GetPerson(string nationalIdentityNumber, string lastName, System.Threading.CancellationToken ct);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Prefill.IPrefill instead", true)]
    public interface IPrefill
    {
        void PrefillDataModel(object dataModel, System.Collections.Generic.Dictionary<string, string> externalPrefill, bool continueOnError = false);
        System.Threading.Tasks.Task PrefillDataModel(string partyId, string dataModelName, object dataModel, System.Collections.Generic.Dictionary<string, string>? externalPrefill = null);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Process.IProcessClient instead", true)]
    public interface IProcess
    {
        System.IO.Stream GetProcessDefinition();
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.ProcessHistoryList> GetProcessHistory(string instanceGuid, string instanceOwnerPartyId);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Profile.IProfileClient instead", true)]
    public interface IProfile
    {
        System.Threading.Tasks.Task<Altinn.Platform.Profile.Models.UserProfile> GetUserProfile(int userId);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Registers.IAltinnPartyClient instead", true)]
    public interface IRegister
    {
        System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Party> GetParty(int partyId);
        System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Party> LookupParty(Altinn.Platform.Register.Models.PartyLookup partyLookup);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Secrets.ISecretsClient instead", true)]
    public interface ISecrets
    {
        System.Threading.Tasks.Task<byte[]> GetCertificateAsync(string certificateName);
        System.Threading.Tasks.Task<Microsoft.Azure.KeyVault.WebKey.JsonWebKey> GetKeyAsync(string keyName);
        Microsoft.Azure.KeyVault.KeyVaultClient GetKeyVaultClient();
        System.Threading.Tasks.Task<string> GetSecretAsync(string secretName);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Process.ITaskEvents instead", true)]
    public interface ITaskEvents
    {
        System.Threading.Tasks.Task OnAbandonProcessTask(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance);
        System.Threading.Tasks.Task OnEndProcessTask(string endEvent, Altinn.Platform.Storage.Interface.Models.Instance instance);
        System.Threading.Tasks.Task OnStartProcessTask(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.Dictionary<string, string> prefill);
    }
    [System.Obsolete("Use Altinn.App.Core.Internal.Auth.IUserTokenProvider instead", true)]
    public interface IUserTokenProvider
    {
        string GetUserToken();
    }
}
namespace Altinn.App.Core.Internal.AccessManagement.Models
{
    public sealed class DelegationRequest
    {
        public DelegationRequest() { }
        [System.Text.Json.Serialization.JsonPropertyName("from")]
        public Altinn.App.Core.Internal.AccessManagement.Models.Shared.DelegationParty? From { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("instanceId")]
        public required string InstanceId { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("resourceId")]
        public required string ResourceId { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("rights")]
        public System.Collections.Generic.List<Altinn.App.Core.Internal.AccessManagement.Models.RightRequest> Rights { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("to")]
        public Altinn.App.Core.Internal.AccessManagement.Models.Shared.DelegationParty? To { get; set; }
        public static Altinn.App.Core.Internal.AccessManagement.Models.Shared.AppsInstanceDelegationRequestDto ConvertToDto(Altinn.App.Core.Internal.AccessManagement.Models.DelegationRequest delegation) { }
    }
    public sealed class DelegationResponse
    {
        public DelegationResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("to")]
        public Altinn.App.Core.Internal.AccessManagement.Models.Shared.DelegationParty? Delegatee { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("from")]
        public Altinn.App.Core.Internal.AccessManagement.Models.Shared.DelegationParty? Delegator { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("instanceId")]
        public string? InstanceId { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("resourceId")]
        public string? ResourceId { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("rights")]
        public System.Collections.Generic.List<Altinn.App.Core.Internal.AccessManagement.Models.RightResponse> Rights { get; set; }
    }
    public class RightRequest
    {
        public RightRequest() { }
        [System.Text.Json.Serialization.JsonPropertyName("action")]
        public Altinn.App.Core.Internal.AccessManagement.Models.Shared.AltinnAction? Action { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("resource")]
        public System.Collections.Generic.List<Altinn.App.Core.Internal.AccessManagement.Models.Shared.Resource> Resource { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("taskId")]
        public string? TaskId { get; set; }
    }
    public sealed class RightResponse
    {
        public RightResponse() { }
        [System.Text.Json.Serialization.JsonPropertyName("action")]
        public Altinn.App.Core.Internal.AccessManagement.Models.Shared.AltinnAction? Action { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("resource")]
        public System.Collections.Generic.List<Altinn.App.Core.Internal.AccessManagement.Models.Shared.Resource> Resource { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }
    }
}
namespace Altinn.App.Core.Internal.AccessManagement.Models.Shared
{
    public class AltinnAction
    {
        public AltinnAction() { }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public required string Value { get; set; }
    }
    public class AppResource : Altinn.App.Core.Internal.AccessManagement.Models.Shared.Resource
    {
        public AppResource() { }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public override string Type { get; set; }
    }
    public class AppsInstanceDelegationRequestDto
    {
        public AppsInstanceDelegationRequestDto() { }
        [System.Text.Json.Serialization.JsonPropertyName("from")]
        public required Altinn.App.Core.Internal.AccessManagement.Models.Shared.DelegationParty From { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("rights")]
        public required System.Collections.Generic.IEnumerable<Altinn.App.Core.Internal.AccessManagement.Models.Shared.RightDto> Rights { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("to")]
        public required Altinn.App.Core.Internal.AccessManagement.Models.Shared.DelegationParty To { get; set; }
    }
    public class DelegationParty
    {
        public DelegationParty() { }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public required string Value { get; set; }
    }
    public class OrgResource : Altinn.App.Core.Internal.AccessManagement.Models.Shared.Resource
    {
        public OrgResource() { }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public override string Type { get; set; }
    }
    public class Resource
    {
        public Resource() { }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public virtual string Type { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public required string Value { get; set; }
    }
    public class RightDto
    {
        public RightDto() { }
        [System.Text.Json.Serialization.JsonPropertyName("action")]
        public required Altinn.App.Core.Internal.AccessManagement.Models.Shared.AltinnAction Action { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("resource")]
        public required System.Collections.Generic.List<Altinn.App.Core.Internal.AccessManagement.Models.Shared.Resource> Resource { get; set; }
    }
    public class TaskResource : Altinn.App.Core.Internal.AccessManagement.Models.Shared.Resource
    {
        public TaskResource() { }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public override string Type { get; set; }
    }
}
namespace Altinn.App.Core.Internal.App
{
    public class AppMetadata : Altinn.App.Core.Internal.App.IAppMetadata
    {
        public AppMetadata(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.AppSettings> settings, Altinn.App.Core.Internal.App.IFrontendFeatures frontendFeatures, System.IServiceProvider? serviceProvider = null, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<string> GetApplicationBPMNProcess() { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.ApplicationMetadata> GetApplicationMetadata() { }
        public System.Threading.Tasks.Task<string> GetApplicationXACMLPolicy() { }
    }
    public class ApplicationConfigException : Altinn.App.Core.Exceptions.ConfigurationException
    {
        public ApplicationConfigException() { }
        public ApplicationConfigException(string? message) { }
        public ApplicationConfigException(string? message, System.Exception? innerException) { }
    }
    public class FrontendFeatures : Altinn.App.Core.Internal.App.IFrontendFeatures
    {
        public FrontendFeatures(Microsoft.FeatureManagement.IFeatureManager featureManager) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> GetFrontendFeatures() { }
    }
    public interface IAppEvents
    {
        System.Threading.Tasks.Task OnEndAppEvent(string endEvent, Altinn.Platform.Storage.Interface.Models.Instance instance);
        System.Threading.Tasks.Task OnStartAppEvent(string startEvent, Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    public interface IAppMetadata
    {
        System.Threading.Tasks.Task<string> GetApplicationBPMNProcess();
        System.Threading.Tasks.Task<Altinn.App.Core.Models.ApplicationMetadata> GetApplicationMetadata();
        System.Threading.Tasks.Task<string> GetApplicationXACMLPolicy();
    }
    public interface IAppResources
    {
        [System.Obsolete("GetApplication is scheduled for removal. Use Altinn.App.Core.Internal.App.IAppMet" +
            "adata.GetApplicationMetadata instead", false)]
        Altinn.Platform.Storage.Interface.Models.Application GetApplication();
        [System.Obsolete("GetApplication is scheduled for removal. Use Altinn.App.Core.Internal.App.IAppMet" +
            "adata.GetApplicationBPMNProcess instead", false)]
        string? GetApplicationBPMNProcess();
        [System.Obsolete("GetApplication is scheduled for removal. Use Altinn.App.Core.Internal.App.IAppMet" +
            "adata.GetApplicationXACMLPolicy instead", false)]
        string? GetApplicationXACMLPolicy();
        string GetClassRefForLogicDataType(string dataType);
        System.Threading.Tasks.Task<string?> GetFooter();
        [System.Obsolete("Use GetLayoutModelForTask instead", false)]
        Altinn.App.Core.Models.Layout.LayoutModel GetLayoutModel(string? layoutSetId = null);
        Altinn.App.Core.Models.Layout.LayoutModel? GetLayoutModelForTask(string taskId);
        Altinn.App.Core.Models.LayoutSets? GetLayoutSet();
        Altinn.App.Core.Models.LayoutSet? GetLayoutSetForTask(string taskId);
        string GetLayoutSets();
        Altinn.App.Core.Models.LayoutSettings GetLayoutSettings();
        Altinn.App.Core.Models.LayoutSettings? GetLayoutSettingsForSet(string? layoutSetId);
        string? GetLayoutSettingsString();
        string? GetLayoutSettingsStringForSet(string layoutSetId);
        string GetLayouts();
        string GetLayoutsForSet(string layoutSetId);
        string GetModelJsonSchema(string modelId);
        string? GetPrefillJson(string dataModelName = "ServiceModel");
        byte[] GetRuleConfigurationForSet(string id);
        byte[] GetRuleHandlerForSet(string id);
        byte[] GetText(string org, string app, string textResource);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.TextResource?> GetTexts(string org, string app, string language);
        string? GetValidationConfiguration(string dataTypeId);
    }
    public interface IApplicationClient
    {
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Application?> GetApplication(string org, string app);
    }
    public interface IFrontendFeatures
    {
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> GetFrontendFeatures();
    }
}
namespace Altinn.App.Core.Internal.AppModel
{
    public class DefaultAppModel : Altinn.App.Core.Internal.AppModel.IAppModel
    {
        public DefaultAppModel(Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Internal.AppModel.DefaultAppModel> logger) { }
        public object Create(string classRef) { }
        public System.Type GetModelType(string classRef) { }
    }
    public interface IAppModel
    {
        object Create(string classRef);
        System.Type GetModelType(string classRef);
    }
}
namespace Altinn.App.Core.Internal.Auth
{
    public class AuthorizationService : Altinn.App.Core.Internal.Auth.IAuthorizationService
    {
        public AuthorizationService(Altinn.App.Core.Internal.Auth.IAuthorizationClient authorizationClient, Altinn.App.Core.Features.Auth.IAuthenticationContext authenticationContext, System.IServiceProvider serviceProvider, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<bool> AuthorizeAction(Altinn.App.Core.Models.AppIdentifier appIdentifier, Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, System.Security.Claims.ClaimsPrincipal user, string action, string? taskId = null) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.UserAction>> AuthorizeActions(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Security.Claims.ClaimsPrincipal user, System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties.AltinnAction> actions) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.Platform.Register.Models.Party>?> GetPartyList(int userId) { }
        public System.Threading.Tasks.Task<bool?> ValidateSelectedParty(int userId, int partyId) { }
    }
    public interface IAuthenticationClient
    {
        System.Threading.Tasks.Task<string> RefreshToken();
    }
    public interface IAuthorizationClient
    {
        System.Threading.Tasks.Task<bool> AuthorizeAction(Altinn.App.Core.Models.AppIdentifier appIdentifier, Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, System.Security.Claims.ClaimsPrincipal user, string action, string? taskId = null);
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> AuthorizeActions(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Security.Claims.ClaimsPrincipal user, System.Collections.Generic.List<string> actions);
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetKeyRoleOrganizationParties(int userId, System.Collections.Generic.List<string> orgNumbers);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.Platform.Register.Models.Party>?> GetPartyList(int userId);
        System.Threading.Tasks.Task<bool?> ValidateSelectedParty(int userId, int partyId);
    }
    public interface IAuthorizationService
    {
        System.Threading.Tasks.Task<bool> AuthorizeAction(Altinn.App.Core.Models.AppIdentifier appIdentifier, Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, System.Security.Claims.ClaimsPrincipal user, string action, string? taskId = null);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.UserAction>> AuthorizeActions(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Security.Claims.ClaimsPrincipal user, System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties.AltinnAction> actions);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.Platform.Register.Models.Party>?> GetPartyList(int userId);
        System.Threading.Tasks.Task<bool?> ValidateSelectedParty(int userId, int partyId);
    }
    public interface IUserTokenProvider
    {
        string GetUserToken();
    }
}
namespace Altinn.App.Core.Internal.Data
{
    public static class FormDataWrapperFactory
    {
        public static void Register<T>(System.Func<object, Altinn.App.Core.Internal.Data.IFormDataWrapper> factory)
            where T :  notnull { }
    }
    public interface IDataClient
    {
        [System.Obsolete("Use method DeleteData with delayed=false instead.", true)]
        System.Threading.Tasks.Task<bool> DeleteBinaryData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataGuid);
        System.Threading.Tasks.Task<bool> DeleteData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataGuid, bool delay, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<System.IO.Stream> GetBinaryData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataId, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.AttachmentList>> GetBinaryDataList(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<byte[]> GetDataBytes(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataId, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<object> GetFormData(System.Guid instanceGuid, System.Type type, string org, string app, int instanceOwnerPartyId, System.Guid dataId, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> InsertBinaryData(string instanceId, string dataType, string contentType, string? filename, System.IO.Stream stream, string? generatedFromTask = null, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> InsertBinaryData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, string dataType, Microsoft.AspNetCore.Http.HttpRequest request, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> InsertFormData<T>(Altinn.Platform.Storage.Interface.Models.Instance instance, string dataTypeString, T dataToSerialize, System.Type type, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default)
            where T :  notnull;
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> InsertFormData<T>(T dataToSerialize, System.Guid instanceGuid, System.Type type, string org, string app, int instanceOwnerPartyId, string dataType, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default)
            where T :  notnull;
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> LockDataElement(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, System.Guid dataGuid, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> UnlockDataElement(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, System.Guid dataGuid, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> Update(Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.Platform.Storage.Interface.Models.DataElement dataElement, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> UpdateBinaryData(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string? contentType, string? filename, System.Guid dataGuid, System.IO.Stream stream, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default);
        [System.Obsolete("Deprecated please use UpdateBinaryData(InstanceIdentifier, string, string, Guid, " +
            "Stream) instead", false)]
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> UpdateBinaryData(string org, string app, int instanceOwnerPartyId, System.Guid instanceGuid, System.Guid dataGuid, Microsoft.AspNetCore.Http.HttpRequest request, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> UpdateData<T>(T dataToSerialize, System.Guid instanceGuid, System.Type type, string org, string app, int instanceOwnerPartyId, System.Guid dataId, Altinn.App.Core.Features.StorageAuthenticationMethod? authenticationMethod = null, System.Threading.CancellationToken cancellationToken = default)
            where T :  notnull;
    }
    public interface IDataService
    {
        System.Threading.Tasks.Task<bool> DeleteById(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, System.Guid dataElementId);
        System.Threading.Tasks.Task<T> GetById<T>(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Guid dataElementId);
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "dataElementId",
                "model"})]
        System.Threading.Tasks.Task<System.ValueTuple<System.Guid, T?>> GetByType<T>(Altinn.Platform.Storage.Interface.Models.Instance instance, string dataTypeId);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> InsertJsonObject(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string dataTypeId, object data);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.DataElement> UpdateJsonObject(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string dataTypeId, System.Guid dataElementId, object data);
    }
    public interface IFormDataWrapper
    {
        System.Type BackingDataType { get; }
        System.ReadOnlySpan<char> AddIndexToPath(System.ReadOnlySpan<char> path, System.ReadOnlySpan<int> rowIndexes, System.Span<char> buffer);
        T BackingData<T>()
            where T :  class;
        Altinn.App.Core.Internal.Data.IFormDataWrapper Copy();
        object? Get(System.ReadOnlySpan<char> path);
        void InitializeAltinnRowIds();
        void RemoveAltinnRowIds();
        void RemoveField(System.ReadOnlySpan<char> path, Altinn.App.Core.Helpers.RowRemovalOption rowRemovalOption);
    }
}
namespace Altinn.App.Core.Internal.Events
{
    public class EventHandlerResolver : Altinn.App.Core.Internal.Events.IEventHandlerResolver
    {
        public EventHandlerResolver(System.IServiceProvider serviceProvider) { }
        public Altinn.App.Core.Features.IEventHandler ResolveEventHandler(string eventType) { }
    }
    public interface IEventHandlerResolver
    {
        Altinn.App.Core.Features.IEventHandler ResolveEventHandler(string eventType);
    }
    public interface IEventSecretCodeProvider
    {
        System.Threading.Tasks.Task<string> GetSecretCode();
    }
    public interface IEventsClient
    {
        System.Threading.Tasks.Task<string> AddEvent(string eventType, Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    public interface IEventsSubscription
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Infrastructure.Clients.Events.Subscription> AddSubscription(string org, string app, string eventType);
    }
    public class KeyVaultEventSecretCodeProvider : Altinn.App.Core.Internal.Events.IEventSecretCodeProvider
    {
        public KeyVaultEventSecretCodeProvider(Altinn.App.Core.Internal.Secrets.ISecretsClient keyVaultClient) { }
        public System.Threading.Tasks.Task<string> GetSecretCode() { }
    }
    public class SubscriptionValidationHandler : Altinn.App.Core.Features.IEventHandler
    {
        public SubscriptionValidationHandler() { }
        public string EventType { get; }
        public System.Threading.Tasks.Task<bool> ProcessEvent(Altinn.App.Core.Models.CloudEvent cloudEvent) { }
    }
    public class UnhandledEventHandler : Altinn.App.Core.Features.IEventHandler
    {
        public UnhandledEventHandler() { }
        public string EventType { get; }
        public System.Threading.Tasks.Task<bool> ProcessEvent(Altinn.App.Core.Models.CloudEvent cloudEvent) { }
    }
}
namespace Altinn.App.Core.Internal.Expressions
{
    public static class ExpressionEvaluator
    {
        public static System.Threading.Tasks.Task<bool> EvaluateBooleanExpression(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Models.Expressions.ComponentContext context, string property, bool defaultReturn) { }
        public static System.Threading.Tasks.Task<object?> EvaluateExpression(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Models.Expressions.Expression expr, Altinn.App.Core.Models.Expressions.ComponentContext context, object?[]? positionalArguments = null) { }
    }
    public class ExpressionEvaluatorTypeErrorException : Altinn.App.Core.Exceptions.AltinnException
    {
        public ExpressionEvaluatorTypeErrorException(string msg) { }
        public ExpressionEvaluatorTypeErrorException(string msg, System.Exception innerException) { }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(Altinn.App.Core.Internal.Expressions.ExpressionTypeUnionConverter?))]
    public readonly struct ExpressionValue : System.IEquatable<Altinn.App.Core.Internal.Expressions.ExpressionValue>
    {
        public ExpressionValue() { }
        public bool Bool { get; }
        public double Number { get; }
        public string String { get; }
        public System.Text.Json.JsonValueKind ValueKind { get; }
        public static Altinn.App.Core.Internal.Expressions.ExpressionValue False { get; }
        public static Altinn.App.Core.Internal.Expressions.ExpressionValue Null { get; }
        public static Altinn.App.Core.Internal.Expressions.ExpressionValue True { get; }
        public static Altinn.App.Core.Internal.Expressions.ExpressionValue Undefined { get; }
        public bool Equals(Altinn.App.Core.Internal.Expressions.ExpressionValue other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public object? ToObject() { }
        public override string ToString() { }
        public string? ToStringForEquals() { }
        public static Altinn.App.Core.Internal.Expressions.ExpressionValue FromObject(object? value) { }
        public static Altinn.App.Core.Internal.Expressions.ExpressionValue op_Implicit(bool? value) { }
        public static Altinn.App.Core.Internal.Expressions.ExpressionValue op_Implicit(double? value) { }
        public static Altinn.App.Core.Internal.Expressions.ExpressionValue op_Implicit(string? value) { }
        public static bool operator !=(Altinn.App.Core.Internal.Expressions.ExpressionValue left, Altinn.App.Core.Internal.Expressions.ExpressionValue right) { }
        public static bool operator ==(Altinn.App.Core.Internal.Expressions.ExpressionValue left, Altinn.App.Core.Internal.Expressions.ExpressionValue right) { }
    }
    public interface ILayoutEvaluatorStateInitializer
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState> Init(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string? taskId, string? gatewayAction = null, string? language = null);
    }
    public static class LayoutEvaluator
    {
        [System.Obsolete("Use the overload with evaluateRemoveWhenHidden parameter")]
        public static System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Layout.DataReference>> GetHiddenFieldsForRemoval(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Layout.DataReference>> GetHiddenFieldsForRemoval(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, bool evaluateRemoveWhenHidden) { }
        [System.Obsolete("Use the async version of this method RemoveHiddenDataAsync")]
        public static void RemoveHiddenData(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Helpers.RowRemovalOption rowRemovalOption) { }
        [System.Obsolete("Use the overload with evaluateRemoveWhenHidden parameter")]
        public static System.Threading.Tasks.Task RemoveHiddenDataAsync(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Helpers.RowRemovalOption rowRemovalOption) { }
        public static System.Threading.Tasks.Task RemoveHiddenDataAsync(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Helpers.RowRemovalOption rowRemovalOption, bool evaluateRemoveWhenHidden) { }
        public static System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssue>> RunLayoutValidationsForRequired(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state) { }
    }
    public class LayoutEvaluatorState
    {
        public LayoutEvaluatorState(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, Altinn.App.Core.Models.Layout.LayoutModel? componentModel, Altinn.App.Core.Internal.Texts.ITranslationService translationService, Altinn.App.Core.Configuration.FrontEndSettings frontEndSettings, string? gatewayAction = null, string? language = null, System.TimeZoneInfo? timeZone = null) { }
        public Altinn.Platform.Storage.Interface.Models.Instance Instance { get; }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.Layout.DataReference> AddInidicies(Altinn.App.Core.Models.Layout.ModelBinding binding, Altinn.App.Core.Models.Expressions.ComponentContext context) { }
        [System.Obsolete("This method is deprecated and will be removed in a future version.")]
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.Layout.DataReference> AddInidicies(Altinn.App.Core.Models.Layout.ModelBinding binding, Altinn.App.Core.Models.DataElementIdentifier dataElementIdentifier, int[]? indexes) { }
        public int CountDataElements(string dataTypeId) { }
        [System.Obsolete("You need to get a context, not a component", true)]
        public void GetComponent(string pageName, string componentId) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.Expressions.ComponentContext?> GetComponentContext(string pageName, string componentId, int[]? rowIndexes = null) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Expressions.ComponentContext>> GetComponentContexts() { }
        public string? GetFrontendSetting(string key) { }
        public string? GetGatewayAction() { }
        public string GetInstanceContext(string key) { }
        public string GetLanguage() { }
        public System.Threading.Tasks.Task<object?> GetModelData(Altinn.App.Core.Models.Layout.ModelBinding key, Altinn.App.Core.Models.DataElementIdentifier defaultDataElementIdentifier, int[]? indexes) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.Layout.DataReference[]> GetResolvedKeys(Altinn.App.Core.Models.Layout.DataReference reference) { }
        public System.TimeZoneInfo? GetTimeZone() { }
        public System.Threading.Tasks.Task RemoveDataField(Altinn.App.Core.Models.Layout.DataReference key, Altinn.App.Core.Helpers.RowRemovalOption rowRemovalOption) { }
        public System.Threading.Tasks.Task<string> TranslateText(string textKey, Altinn.App.Core.Models.Expressions.ComponentContext context) { }
    }
    public class LayoutEvaluatorStateInitializer : Altinn.App.Core.Internal.Expressions.ILayoutEvaluatorStateInitializer
    {
        public LayoutEvaluatorStateInitializer(Altinn.App.Core.Internal.App.IAppResources appResources, Altinn.App.Core.Internal.Texts.ITranslationService translationService, Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.FrontEndSettings> frontEndSettings) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState> Init(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string? taskId, string? gatewayAction = null, string? language = null) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState> Init(Altinn.Platform.Storage.Interface.Models.Instance instance, object data, string? layoutSetId, string? gatewayAction = null) { }
    }
}
namespace Altinn.App.Core.Internal.Instances
{
    public interface IInstanceClient
    {
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> AddCompleteConfirmation(int instanceOwnerPartyId, System.Guid instanceGuid);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> CreateInstance(string org, string app, Altinn.Platform.Storage.Interface.Models.Instance instanceTemplate);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> DeleteInstance(int instanceOwnerPartyId, System.Guid instanceGuid, bool hard);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> GetInstance(Altinn.Platform.Storage.Interface.Models.Instance instance);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> GetInstance(string app, string org, int instanceOwnerPartyId, System.Guid instanceId);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.Instance>> GetInstances(System.Collections.Generic.Dictionary<string, Microsoft.Extensions.Primitives.StringValues> queryParams);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateDataValue(Altinn.Platform.Storage.Interface.Models.Instance instance, string key, string? value);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateDataValues(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.Dictionary<string, string?> dataValues);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateDataValues(int instanceOwnerPartyId, System.Guid instanceGuid, Altinn.Platform.Storage.Interface.Models.DataValues dataValues);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdatePresentationTexts(int instanceOwnerPartyId, System.Guid instanceGuid, Altinn.Platform.Storage.Interface.Models.PresentationTexts presentationTexts);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateProcess(Altinn.Platform.Storage.Interface.Models.Instance instance);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateProcessAndEvents(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.InstanceEvent> events);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateReadStatus(int instanceOwnerPartyId, System.Guid instanceGuid, string readStatus);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> UpdateSubstatus(int instanceOwnerPartyId, System.Guid instanceGuid, Altinn.Platform.Storage.Interface.Models.Substatus substatus);
    }
    public interface IInstanceEventClient
    {
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.InstanceEvent>> GetInstanceEvents(string instanceId, string instanceOwnerPartyId, string org, string app, string[] eventTypes, string from, string to);
        System.Threading.Tasks.Task<string> SaveInstanceEvent(object dataToSerialize, string org, string app);
    }
}
namespace Altinn.App.Core.Internal.Language
{
    public class ApplicationLanguage : Altinn.App.Core.Internal.Language.IApplicationLanguage
    {
        public ApplicationLanguage(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.AppSettings> settings, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.ApplicationLanguage>> GetApplicationLanguages() { }
    }
    public interface IApplicationLanguage
    {
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.ApplicationLanguage>> GetApplicationLanguages();
    }
}
namespace Altinn.App.Core.Internal.Maskinporten
{
    [System.Obsolete("Use Altinn.App.Api.ServiceCollectionExtensions.ConfigureMaskinportenClient instea" +
        "d. This interface will be removed in V9.")]
    public interface IMaskinportenTokenProvider
    {
        System.Threading.Tasks.Task<string> GetAltinnExchangedToken(string scopes);
        System.Threading.Tasks.Task<string> GetToken(string scopes);
    }
    public static class MaskinportenExtensions
    {
        [System.Obsolete("Use Altinn.App.Api.ServiceCollectionExtensions.ConfigureMaskinportenClient instea" +
            "d. This method will be removed in V9.")]
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddMaskinportenJwkTokenProvider(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string secretKeyName) { }
    }
    [System.Obsolete("Use Altinn.App.Api.ServiceCollectionExtensions.ConfigureMaskinportenClient instea" +
        "d. This service will be removed in V9.")]
    public class MaskinportenJwkTokenProvider : Altinn.App.Core.Internal.Maskinporten.IMaskinportenTokenProvider
    {
        public MaskinportenJwkTokenProvider(Altinn.ApiClients.Maskinporten.Interfaces.IMaskinportenService maskinportenService, Microsoft.Extensions.Options.IOptions<Altinn.ApiClients.Maskinporten.Config.MaskinportenSettings> maskinportenSettings, Altinn.App.Core.Internal.Secrets.ISecretsClient secretsClient, string secretKeyName) { }
        public System.Threading.Tasks.Task<string> GetAltinnExchangedToken(string scopes) { }
        public System.Threading.Tasks.Task<string> GetToken(string scopes) { }
    }
}
namespace Altinn.App.Core.Internal.Pdf
{
    public interface IPdfGeneratorClient
    {
        System.Threading.Tasks.Task<System.IO.Stream> GeneratePdf(System.Uri uri, System.Threading.CancellationToken ct);
        System.Threading.Tasks.Task<System.IO.Stream> GeneratePdf(System.Uri uri, string? footerContent, System.Threading.CancellationToken ct);
    }
    public interface IPdfService
    {
        System.Threading.Tasks.Task GenerateAndStorePdf(Altinn.Platform.Storage.Interface.Models.Instance instance, string taskId, System.Threading.CancellationToken ct);
        System.Threading.Tasks.Task<System.IO.Stream> GeneratePdf(Altinn.Platform.Storage.Interface.Models.Instance instance, string taskId, System.Threading.CancellationToken ct);
        System.Threading.Tasks.Task<System.IO.Stream> GeneratePdf(Altinn.Platform.Storage.Interface.Models.Instance instance, string taskId, bool isPreview, System.Threading.CancellationToken ct);
    }
    public class PdfGenerationException : Altinn.App.Core.Exceptions.AltinnException
    {
        public PdfGenerationException() { }
        public PdfGenerationException(string? message) { }
        public PdfGenerationException(string? message, System.Exception? innerException) { }
    }
    public class PdfGeneratorSettings
    {
        public PdfGeneratorSettings() { }
        public string AppPdfPagePathTemplate { get; set; }
        public bool DisplayFooter { get; set; }
        public string WaitForSelector { get; set; }
        public int WaitForTime { get; set; }
    }
    public class PdfService : Altinn.App.Core.Internal.Pdf.IPdfService
    {
        public PdfService(Altinn.App.Core.Internal.App.IAppResources appResources, Altinn.App.Core.Internal.Data.IDataClient dataClient, Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor, Altinn.App.Core.Internal.Pdf.IPdfGeneratorClient pdfGeneratorClient, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Internal.Pdf.PdfGeneratorSettings> pdfGeneratorSettings, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.GeneralSettings> generalSettings, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Internal.Pdf.PdfService> logger, Altinn.App.Core.Features.Auth.IAuthenticationContext authenticationContext, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task GenerateAndStorePdf(Altinn.Platform.Storage.Interface.Models.Instance instance, string taskId, System.Threading.CancellationToken ct) { }
        public System.Threading.Tasks.Task<System.IO.Stream> GeneratePdf(Altinn.Platform.Storage.Interface.Models.Instance instance, string taskId, System.Threading.CancellationToken ct) { }
        public System.Threading.Tasks.Task<System.IO.Stream> GeneratePdf(Altinn.Platform.Storage.Interface.Models.Instance instance, string taskId, bool isPreview, System.Threading.CancellationToken ct) { }
    }
}
namespace Altinn.App.Core.Internal.Prefill
{
    public interface IPrefill
    {
        void PrefillDataModel(object dataModel, System.Collections.Generic.Dictionary<string, string> externalPrefill, bool continueOnError = false);
        System.Threading.Tasks.Task PrefillDataModel(string partyId, string dataModelName, object dataModel, System.Collections.Generic.Dictionary<string, string>? externalPrefill = null);
    }
}
namespace Altinn.App.Core.Internal.Process.Authorization
{
    public interface IUserActionAuthorizerProvider
    {
        string? Action { get; }
        Altinn.App.Core.Features.IUserActionAuthorizer Authorizer { get; }
        string? TaskId { get; }
    }
    public class UserActionAuthorizerProvider : Altinn.App.Core.Internal.Process.Authorization.IUserActionAuthorizerProvider
    {
        public UserActionAuthorizerProvider(string? taskId, string? action, System.Func<Altinn.App.Core.Features.IUserActionAuthorizer> factory) { }
        public string? Action { get; set; }
        public Altinn.App.Core.Features.IUserActionAuthorizer Authorizer { get; }
        public string? TaskId { get; set; }
    }
    public static class UserActionAuthorizerServiceCollectionExtension
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransientUserActionAuthorizerForActionInAllTasks<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string action)
            where T :  class, Altinn.App.Core.Features.IUserActionAuthorizer { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransientUserActionAuthorizerForActionInTask<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string taskId, string action)
            where T :  class, Altinn.App.Core.Features.IUserActionAuthorizer { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransientUserActionAuthorizerForAllActionsInAllTasks<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services)
            where T :  class, Altinn.App.Core.Features.IUserActionAuthorizer { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddTransientUserActionAuthorizerForAllActionsInTask<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string taskId)
            where T :  class, Altinn.App.Core.Features.IUserActionAuthorizer { }
    }
}
namespace Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties
{
    public enum ActionType
    {
        [System.Xml.Serialization.XmlEnum("processAction")]
        ProcessAction = 0,
        [System.Xml.Serialization.XmlEnum("serverAction")]
        ServerAction = 1,
    }
    public class AltinnAction
    {
        public AltinnAction() { }
        public AltinnAction(string id) { }
        public AltinnAction(string id, Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties.ActionType actionType) { }
        [System.Xml.Serialization.XmlAttribute("type", Namespace="http://altinn.no/process")]
        public Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties.ActionType ActionType { get; set; }
        [System.Xml.Serialization.XmlText]
        public string Value { get; set; }
    }
    public sealed class AltinnEnvironmentConfig
    {
        public AltinnEnvironmentConfig() { }
        [System.Xml.Serialization.XmlAttribute("env")]
        public string? Environment { get; set; }
        [System.Xml.Serialization.XmlText]
        public required string Value { get; set; }
    }
    public class AltinnGatewayExtension
    {
        public AltinnGatewayExtension() { }
        [System.Xml.Serialization.XmlElement("connectedDataTypeId", IsNullable=true, Namespace="http://altinn.no/process")]
        public string? ConnectedDataTypeId { get; set; }
    }
    public class AltinnPaymentConfiguration
    {
        public AltinnPaymentConfiguration() { }
        [System.Xml.Serialization.XmlElement("paymentDataType", Namespace="http://altinn.no/process")]
        public string? PaymentDataType { get; set; }
        [System.Xml.Serialization.XmlElement("paymentReceiptPdfDataType", Namespace="http://altinn.no/process")]
        public string? PaymentReceiptPdfDataType { get; set; }
    }
    public class AltinnSignatureConfiguration
    {
        public AltinnSignatureConfiguration() { }
        [System.Xml.Serialization.XmlElement(ElementName="correspondenceResource", Namespace="http://altinn.no/process")]
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties.AltinnEnvironmentConfig> CorrespondenceResources { get; set; }
        [System.Xml.Serialization.XmlArray(ElementName="dataTypesToSign", IsNullable=true, Namespace="http://altinn.no/process")]
        [System.Xml.Serialization.XmlArrayItem(ElementName="dataType", Namespace="http://altinn.no/process")]
        public System.Collections.Generic.List<string> DataTypesToSign { get; set; }
        [System.Xml.Serialization.XmlElement("runDefaultValidator", Namespace="http://altinn.no/process")]
        public bool RunDefaultValidator { get; set; }
        [System.Xml.Serialization.XmlElement("signatureDataType", Namespace="http://altinn.no/process")]
        public string SignatureDataType { get; set; }
        [System.Xml.Serialization.XmlElement("signeeProviderId", Namespace="http://altinn.no/process")]
        public string? SigneeProviderId { get; set; }
        [System.Xml.Serialization.XmlElement("signeeStatesDataTypeId", Namespace="http://altinn.no/process")]
        public string? SigneeStatesDataTypeId { get; set; }
        [System.Xml.Serialization.XmlElement("signingPdfDataType", Namespace="http://altinn.no/process")]
        public string? SigningPdfDataType { get; set; }
        [System.Xml.Serialization.XmlArray(ElementName="uniqueFromSignaturesInDataTypes", IsNullable=true, Namespace="http://altinn.no/process")]
        [System.Xml.Serialization.XmlArrayItem(ElementName="dataType", Namespace="http://altinn.no/process")]
        public System.Collections.Generic.List<string> UniqueFromSignaturesInDataTypes { get; set; }
    }
    public class AltinnTaskExtension
    {
        public AltinnTaskExtension() { }
        [System.Xml.Serialization.XmlArray(ElementName="actions", IsNullable=true, Namespace="http://altinn.no/process")]
        [System.Xml.Serialization.XmlArrayItem(ElementName="action", Namespace="http://altinn.no/process")]
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties.AltinnAction>? AltinnActions { get; set; }
        [System.Xml.Serialization.XmlElement("paymentConfig", Namespace="http://altinn.no/process")]
        public Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties.AltinnPaymentConfiguration? PaymentConfiguration { get; set; }
        [System.Xml.Serialization.XmlElement("signatureConfig", Namespace="http://altinn.no/process")]
        public Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties.AltinnSignatureConfiguration? SignatureConfiguration { get; set; }
        [System.Xml.Serialization.XmlElement("taskType", Namespace="http://altinn.no/process")]
        public string? TaskType { get; set; }
    }
}
namespace Altinn.App.Core.Internal.Process.Elements
{
    public class AppProcessElementInfo : Altinn.Platform.Storage.Interface.Models.ProcessElementInfo
    {
        public AppProcessElementInfo() { }
        public AppProcessElementInfo(Altinn.Platform.Storage.Interface.Models.ProcessElementInfo processElementInfo) { }
        [System.Text.Json.Serialization.JsonPropertyName("actions")]
        public System.Collections.Generic.Dictionary<string, bool>? Actions { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("read")]
        public bool HasReadAccess { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("write")]
        public bool HasWriteAccess { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("userActions")]
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.UserAction> UserActions { get; set; }
    }
    public class AppProcessState : Altinn.Platform.Storage.Interface.Models.ProcessState
    {
        public AppProcessState() { }
        public AppProcessState(Altinn.Platform.Storage.Interface.Models.ProcessState? processState) { }
        public new Altinn.App.Core.Internal.Process.Elements.AppProcessElementInfo? CurrentTask { get; set; }
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.AppProcessTaskTypeInfo>? ProcessTasks { get; set; }
    }
    public class AppProcessTaskTypeInfo
    {
        public AppProcessTaskTypeInfo() { }
        [System.Xml.Serialization.XmlElement("altinnTaskType", Namespace="http://altinn.no/process")]
        public string? AltinnTaskType { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("elementId")]
        public string? ElementId { get; set; }
    }
    [System.Xml.Serialization.XmlRoot("definitions", Namespace="http://www.omg.org/spec/BPMN/20100524/MODEL")]
    [System.Xml.Serialization.XmlType(Namespace="http://www.omg.org/spec/BPMN/20100524/MODEL")]
    public class Definitions
    {
        public Definitions() { }
        [System.Xml.Serialization.XmlAttribute("id")]
        public string Id { get; set; }
        [System.Xml.Serialization.XmlElement("process")]
        public Altinn.App.Core.Internal.Process.Elements.Process Process { get; set; }
        [System.Xml.Serialization.XmlAttribute("targetNamespace")]
        public string TargetNamespace { get; set; }
    }
    public class EndEvent : Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement
    {
        public EndEvent() { }
        public override string ElementType() { }
    }
    public class ExclusiveGateway : Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement
    {
        public ExclusiveGateway() { }
        [System.Xml.Serialization.XmlAttribute("default")]
        public string? Default { get; set; }
        [System.Xml.Serialization.XmlElement("extensionElements")]
        public Altinn.App.Core.Internal.Process.Elements.ExtensionElements? ExtensionElements { get; set; }
        public override string ElementType() { }
    }
    public class ExtensionElements
    {
        public ExtensionElements() { }
        [System.Xml.Serialization.XmlElement("gatewayExtension", Namespace="http://altinn.no/process")]
        public Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties.AltinnGatewayExtension? GatewayExtension { get; set; }
        [System.Xml.Serialization.XmlElement("taskExtension", Namespace="http://altinn.no/process")]
        public Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties.AltinnTaskExtension? TaskExtension { get; set; }
    }
    public class Process
    {
        public Process() { }
        [System.Xml.Serialization.XmlElement("endEvent")]
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.EndEvent> EndEvents { get; set; }
        [System.Xml.Serialization.XmlElement("exclusiveGateway")]
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.ExclusiveGateway> ExclusiveGateway { get; set; }
        [System.Xml.Serialization.XmlAttribute("id")]
        public string Id { get; set; }
        [System.Xml.Serialization.XmlAttribute("isExecutable")]
        public bool IsExecutable { get; set; }
        [System.Xml.Serialization.XmlElement("sequenceFlow")]
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.SequenceFlow> SequenceFlow { get; set; }
        [System.Xml.Serialization.XmlElement("startEvent")]
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.StartEvent> StartEvents { get; set; }
        [System.Xml.Serialization.XmlElement("task")]
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.ProcessTask> Tasks { get; set; }
    }
    public class ProcessTask : Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement
    {
        public ProcessTask() { }
        [System.Xml.Serialization.XmlElement("extensionElements")]
        public Altinn.App.Core.Internal.Process.Elements.ExtensionElements? ExtensionElements { get; set; }
        public override string ElementType() { }
    }
    public class SequenceFlow
    {
        public SequenceFlow() { }
        [System.Xml.Serialization.XmlElement("conditionExpression")]
        public string? ConditionExpression { get; set; }
        [System.Xml.Serialization.XmlAttribute("flowtype", Namespace="http://altinn.no")]
        public string FlowType { get; set; }
        [System.Xml.Serialization.XmlAttribute("id")]
        public string Id { get; set; }
        [System.Xml.Serialization.XmlAttribute("sourceRef")]
        public string SourceRef { get; set; }
        [System.Xml.Serialization.XmlAttribute("targetRef")]
        public string TargetRef { get; set; }
    }
    public class StartEvent : Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement
    {
        public StartEvent() { }
        public override string ElementType() { }
    }
    public class UserAction
    {
        public UserAction() { }
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties.ActionType ActionType { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("authorized")]
        public bool Authorized { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public required string Id { get; set; }
    }
}
namespace Altinn.App.Core.Internal.Process.Elements.Base
{
    public abstract class ProcessElement
    {
        protected ProcessElement() { }
        [System.Xml.Serialization.XmlAttribute("id")]
        public string Id { get; set; }
        [System.Xml.Serialization.XmlElement("incoming")]
        public System.Collections.Generic.List<string> Incoming { get; set; }
        [System.Xml.Serialization.XmlAttribute("name")]
        public string Name { get; set; }
        [System.Xml.Serialization.XmlElement("outgoing")]
        public System.Collections.Generic.List<string> Outgoing { get; set; }
        public abstract string ElementType();
    }
}
namespace Altinn.App.Core.Internal.Process.EventHandlers
{
    public class EndEventEventHandler : Altinn.App.Core.Internal.Process.EventHandlers.IEndEventEventHandler
    {
        public EndEventEventHandler(Altinn.App.Core.Internal.App.IAppEvents appEvents, Altinn.App.Core.Internal.Instances.IInstanceClient instanceClient, Altinn.App.Core.Internal.App.IAppMetadata appMetadata) { }
        public System.Threading.Tasks.Task Execute(Altinn.Platform.Storage.Interface.Models.InstanceEvent instanceEvent, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public interface IEndEventEventHandler
    {
        System.Threading.Tasks.Task Execute(Altinn.Platform.Storage.Interface.Models.InstanceEvent instanceEvent, Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
}
namespace Altinn.App.Core.Internal.Process.EventHandlers.ProcessTask
{
    public class AbandonTaskEventHandler : Altinn.App.Core.Internal.Process.EventHandlers.ProcessTask.IAbandonTaskEventHandler
    {
        public AbandonTaskEventHandler(System.IServiceProvider serviceProvider) { }
        public System.Threading.Tasks.Task Execute(Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTask processTask, string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public class EndTaskEventHandler : Altinn.App.Core.Internal.Process.EventHandlers.ProcessTask.IEndTaskEventHandler
    {
        public EndTaskEventHandler(Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTaskDataLocker processTaskDataLocker, Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTaskFinalizer processTaskFinisher, System.IServiceProvider serviceProvider, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Internal.Process.EventHandlers.ProcessTask.EndTaskEventHandler> logger) { }
        public System.Threading.Tasks.Task Execute(Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTask processTask, string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public interface IAbandonTaskEventHandler
    {
        System.Threading.Tasks.Task Execute(Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTask processTask, string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    public interface IEndTaskEventHandler
    {
        System.Threading.Tasks.Task Execute(Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTask processTask, string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    public interface IStartTaskEventHandler
    {
        System.Threading.Tasks.Task Execute(Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTask processTask, string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.Dictionary<string, string>? prefill);
    }
    public class StartTaskEventHandler : Altinn.App.Core.Internal.Process.EventHandlers.ProcessTask.IStartTaskEventHandler
    {
        public StartTaskEventHandler(Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTaskDataLocker processTaskDataLocker, Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTaskInitializer processTaskInitializer, System.IServiceProvider serviceProvider) { }
        public System.Threading.Tasks.Task Execute(Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTask processTask, string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.Dictionary<string, string>? prefill) { }
    }
}
namespace Altinn.App.Core.Internal.Process
{
    public class ExclusiveGatewayFactory
    {
        public const string DefaultImplName = "altinn_default_gateway";
        public ExclusiveGatewayFactory(System.IServiceProvider serviceProvider) { }
        public Altinn.App.Core.Features.IProcessExclusiveGateway? GetProcessExclusiveGateway(string gatewayId) { }
    }
    public class ExpressionsExclusiveGateway : Altinn.App.Core.Features.IProcessExclusiveGateway
    {
        public ExpressionsExclusiveGateway(Altinn.App.Core.Internal.Expressions.ILayoutEvaluatorStateInitializer layoutEvaluatorStateInitializer, Altinn.App.Core.Internal.App.IAppResources resources) { }
        public string GatewayId { get; }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.SequenceFlow>> FilterAsync(System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.SequenceFlow> outgoingFlows, Altinn.Platform.Storage.Interface.Models.Instance instance, Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, Altinn.App.Core.Models.Process.ProcessGatewayInformation processGatewayInformation) { }
    }
    public interface IProcessClient
    {
        System.IO.Stream GetProcessDefinition();
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.ProcessHistoryList> GetProcessHistory(string instanceGuid, string instanceOwnerPartyId);
    }
    public interface IProcessEngine
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Models.Process.ProcessChangeResult> GenerateProcessStartEvents(Altinn.App.Core.Models.Process.ProcessStartRequest processStartRequest);
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> HandleEventsAndUpdateStorage(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.Dictionary<string, string>? prefill, System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.InstanceEvent>? events);
        System.Threading.Tasks.Task<Altinn.App.Core.Models.UserAction.UserActionResult> HandleUserAction(Altinn.App.Core.Models.Process.ProcessNextRequest request, System.Threading.CancellationToken ct);
        System.Threading.Tasks.Task<Altinn.App.Core.Models.Process.ProcessChangeResult> Next(Altinn.App.Core.Models.Process.ProcessNextRequest request);
    }
    public interface IProcessEngineAuthorizer
    {
        System.Threading.Tasks.Task<bool> AuthorizeProcessNext(Altinn.Platform.Storage.Interface.Models.Instance instance, string? action = null);
    }
    public interface IProcessEventDispatcher
    {
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> DispatchToStorage(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.InstanceEvent>? events);
        System.Threading.Tasks.Task RegisterEventWithEventsComponent(Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    public interface IProcessEventHandlerDelegator
    {
        System.Threading.Tasks.Task HandleEvents(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.Dictionary<string, string>? prefill, System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.InstanceEvent>? events);
    }
    public interface IProcessNavigator
    {
        System.Threading.Tasks.Task<Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement?> GetNextTask(Altinn.Platform.Storage.Interface.Models.Instance instance, string currentElement, string? action);
    }
    public interface IProcessReader
    {
        System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement> GetAllFlowElements();
        Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties.AltinnTaskExtension? GetAltinnTaskExtension(string elementId);
        System.Collections.Generic.List<string> GetEndEventIds();
        System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.EndEvent> GetEndEvents();
        System.Collections.Generic.List<string> GetExclusiveGatewayIds();
        System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.ExclusiveGateway> GetExclusiveGateways();
        Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement? GetFlowElement(string? elementId);
        System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement> GetNextElements(string? currentElementId);
        System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.SequenceFlow> GetOutgoingSequenceFlows(Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement? flowElement);
        System.Collections.Generic.List<string> GetProcessTaskIds();
        System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.ProcessTask> GetProcessTasks();
        System.Collections.Generic.List<string> GetSequenceFlowIds();
        System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.SequenceFlow> GetSequenceFlows();
        System.Collections.Generic.List<string> GetStartEventIds();
        System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.StartEvent> GetStartEvents();
        bool IsEndEvent(string? elementId);
        bool IsProcessTask(string? elementId);
        bool IsStartEvent(string? elementId);
    }
    public class ProcessEngine : Altinn.App.Core.Internal.Process.IProcessEngine
    {
        public ProcessEngine(Altinn.App.Core.Internal.Process.IProcessReader processReader, Altinn.App.Core.Internal.Process.IProcessNavigator processNavigator, Altinn.App.Core.Internal.Process.IProcessEventHandlerDelegator processEventsDelegator, Altinn.App.Core.Internal.Process.IProcessEventDispatcher processEventDispatcher, Altinn.App.Core.Features.Action.UserActionService userActionService, Altinn.App.Core.Features.Auth.IAuthenticationContext authenticationContext, System.IServiceProvider serviceProvider, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.Process.ProcessChangeResult> GenerateProcessStartEvents(Altinn.App.Core.Models.Process.ProcessStartRequest processStartRequest) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> HandleEventsAndUpdateStorage(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.Dictionary<string, string>? prefill, System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.InstanceEvent>? events) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.UserAction.UserActionResult> HandleUserAction(Altinn.App.Core.Models.Process.ProcessNextRequest request, System.Threading.CancellationToken ct) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Models.Process.ProcessChangeResult> Next(Altinn.App.Core.Models.Process.ProcessNextRequest request) { }
    }
    public class ProcessEventDispatcher : Altinn.App.Core.Internal.Process.IProcessEventDispatcher
    {
        public ProcessEventDispatcher(Altinn.App.Core.Internal.Instances.IInstanceClient instanceClient, Altinn.App.Core.Internal.Events.IEventsClient eventsClient, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.AppSettings> appSettings, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Internal.Process.ProcessEventDispatcher> logger) { }
        public System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.Instance> DispatchToStorage(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.InstanceEvent>? events) { }
        public System.Threading.Tasks.Task RegisterEventWithEventsComponent(Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public class ProcessEventHandlingDelegator : Altinn.App.Core.Internal.Process.IProcessEventHandlerDelegator
    {
        public ProcessEventHandlingDelegator(Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Internal.Process.ProcessEventHandlingDelegator> logger, Altinn.App.Core.Internal.Process.EventHandlers.ProcessTask.IStartTaskEventHandler startTaskEventHandler, Altinn.App.Core.Internal.Process.EventHandlers.ProcessTask.IEndTaskEventHandler endTaskEventHandler, Altinn.App.Core.Internal.Process.EventHandlers.ProcessTask.IAbandonTaskEventHandler abandonTaskEventHandler, Altinn.App.Core.Internal.Process.EventHandlers.IEndEventEventHandler endEventHandler, System.IServiceProvider serviceProvider) { }
        public System.Threading.Tasks.Task HandleEvents(Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.Dictionary<string, string>? prefill, System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.InstanceEvent>? events) { }
    }
    public class ProcessException : Altinn.App.Core.Exceptions.AltinnException
    {
        public ProcessException(string message) { }
    }
    public class ProcessNavigator : Altinn.App.Core.Internal.Process.IProcessNavigator
    {
        public ProcessNavigator(Altinn.App.Core.Internal.Process.IProcessReader processReader, Altinn.App.Core.Internal.Process.ExclusiveGatewayFactory gatewayFactory, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Internal.Process.ProcessNavigator> logger, System.IServiceProvider serviceProvider) { }
        public System.Threading.Tasks.Task<Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement?> GetNextTask(Altinn.Platform.Storage.Interface.Models.Instance instance, string currentElement, string? action) { }
    }
    public class ProcessReader : Altinn.App.Core.Internal.Process.IProcessReader
    {
        public ProcessReader(Altinn.App.Core.Internal.Process.IProcessClient processClient, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement> GetAllFlowElements() { }
        public Altinn.App.Core.Internal.Process.Elements.AltinnExtensionProperties.AltinnTaskExtension? GetAltinnTaskExtension(string elementId) { }
        public System.Collections.Generic.List<string> GetEndEventIds() { }
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.EndEvent> GetEndEvents() { }
        public System.Collections.Generic.List<string> GetExclusiveGatewayIds() { }
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.ExclusiveGateway> GetExclusiveGateways() { }
        public Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement? GetFlowElement(string? elementId) { }
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement> GetNextElements(string? currentElementId) { }
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.SequenceFlow> GetOutgoingSequenceFlows(Altinn.App.Core.Internal.Process.Elements.Base.ProcessElement? flowElement) { }
        public System.Collections.Generic.List<string> GetProcessTaskIds() { }
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.ProcessTask> GetProcessTasks() { }
        public System.Collections.Generic.List<string> GetSequenceFlowIds() { }
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.SequenceFlow> GetSequenceFlows() { }
        public System.Collections.Generic.List<string> GetStartEventIds() { }
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Process.Elements.StartEvent> GetStartEvents() { }
        public bool IsEndEvent([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? elementId) { }
        public bool IsProcessTask([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? elementId) { }
        public bool IsStartEvent([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? elementId) { }
    }
    public enum ProcessSequenceFlowType
    {
        CompleteCurrentMoveToNext = 0,
        [System.Obsolete("Never used in our process engine code.")]
        AbandonCurrentReturnToNext = 1,
        AbandonCurrentMoveToNext = 2,
    }
}
namespace Altinn.App.Core.Internal.Process.ProcessTasks
{
    public class ConfirmationProcessTask : Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTask
    {
        public ConfirmationProcessTask() { }
        public string Type { get; }
        public System.Threading.Tasks.Task Abandon(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public System.Threading.Tasks.Task End(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public System.Threading.Tasks.Task Start(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public class DataProcessTask : Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTask
    {
        public DataProcessTask() { }
        public string Type { get; }
        public System.Threading.Tasks.Task Abandon(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public System.Threading.Tasks.Task End(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public System.Threading.Tasks.Task Start(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public class FeedbackProcessTask : Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTask
    {
        public FeedbackProcessTask() { }
        public string Type { get; }
        public System.Threading.Tasks.Task Abandon(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public System.Threading.Tasks.Task End(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public System.Threading.Tasks.Task Start(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public interface IProcessTask
    {
        string Type { get; }
        System.Threading.Tasks.Task Abandon(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance);
        System.Threading.Tasks.Task End(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance);
        System.Threading.Tasks.Task Start(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    public interface IProcessTaskCleaner
    {
        System.Threading.Tasks.Task RemoveAllDataElementsGeneratedFromTask(Altinn.Platform.Storage.Interface.Models.Instance instance, string taskId);
    }
    public interface IProcessTaskDataLocker
    {
        System.Threading.Tasks.Task Lock(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance);
        System.Threading.Tasks.Task Unlock(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    public interface IProcessTaskFinalizer
    {
        System.Threading.Tasks.Task Finalize(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    public interface IProcessTaskInitializer
    {
        System.Threading.Tasks.Task Initialize(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.Dictionary<string, string>? prefill);
    }
    public class NullTypeProcessTask : Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTask
    {
        public NullTypeProcessTask() { }
        public string Type { get; }
        public System.Threading.Tasks.Task Abandon(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public System.Threading.Tasks.Task End(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public System.Threading.Tasks.Task Start(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public class ProcessTaskDataLocker : Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTaskDataLocker
    {
        public ProcessTaskDataLocker(Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Altinn.App.Core.Internal.Data.IDataClient dataClient) { }
        public System.Threading.Tasks.Task Lock(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public System.Threading.Tasks.Task Unlock(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public class ProcessTaskFinalizer : Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTaskFinalizer
    {
        public ProcessTaskFinalizer(Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Altinn.App.Core.Internal.AppModel.IAppModel appModel, Altinn.App.Core.Internal.Expressions.ILayoutEvaluatorStateInitializer layoutEvaluatorStateInitializer, System.IServiceProvider serviceProvider, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.AppSettings> appSettings) { }
        public System.Threading.Tasks.Task Finalize(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public class ProcessTaskInitializer : Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTaskInitializer
    {
        public ProcessTaskInitializer(Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Internal.Process.ProcessTasks.ProcessTaskInitializer> logger, Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Altinn.App.Core.Internal.Data.IDataClient dataClient, Altinn.App.Core.Internal.Prefill.IPrefill prefillService, Altinn.App.Core.Internal.AppModel.IAppModel appModel, System.IServiceProvider serviceProvider, Altinn.App.Core.Internal.Instances.IInstanceClient instanceClient, Altinn.App.Core.Internal.Process.ProcessTasks.IProcessTaskCleaner processTaskCleaner) { }
        public System.Threading.Tasks.Task Initialize(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance, System.Collections.Generic.Dictionary<string, string>? prefill) { }
    }
}
namespace Altinn.App.Core.Internal.Process.ServiceTasks
{
    public class EformidlingServiceTask : Altinn.App.Core.Internal.Process.ServiceTasks.IServiceTask
    {
        public EformidlingServiceTask(Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Internal.Process.ServiceTasks.EformidlingServiceTask> logger, Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Altinn.App.Core.Internal.Instances.IInstanceClient instanceClient, Altinn.App.Core.EFormidling.Interface.IEFormidlingService? eFormidlingService = null, Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.AppSettings>? appSettings = null) { }
        public System.Threading.Tasks.Task Execute(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
    public interface IServiceTask
    {
        System.Threading.Tasks.Task Execute(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance);
    }
    public class PdfServiceTask : Altinn.App.Core.Internal.Process.ServiceTasks.IServiceTask
    {
        public PdfServiceTask(Altinn.App.Core.Internal.App.IAppMetadata appMetadata, Altinn.App.Core.Internal.Pdf.IPdfService pdfService) { }
        public System.Threading.Tasks.Task Execute(string taskId, Altinn.Platform.Storage.Interface.Models.Instance instance) { }
    }
}
namespace Altinn.App.Core.Internal.Profile
{
    public interface IProfileClient
    {
        System.Threading.Tasks.Task<Altinn.Platform.Profile.Models.UserProfile?> GetUserProfile(int userId);
        System.Threading.Tasks.Task<Altinn.Platform.Profile.Models.UserProfile?> GetUserProfile(string ssn);
    }
}
namespace Altinn.App.Core.Internal.Registers
{
    public interface IAltinnPartyClient
    {
        System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Party?> GetParty(int partyId);
        System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Party> LookupParty(Altinn.Platform.Register.Models.PartyLookup partyLookup);
    }
    public interface IOrganizationClient
    {
        System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Organization?> GetOrganization(string OrgNr);
    }
    public interface IPersonClient
    {
        System.Threading.Tasks.Task<Altinn.Platform.Register.Models.Person?> GetPerson(string nationalIdentityNumber, string lastName, System.Threading.CancellationToken ct);
    }
}
namespace Altinn.App.Core.Internal.Secrets
{
    public interface ISecretsClient
    {
        System.Threading.Tasks.Task<byte[]> GetCertificateAsync(string certificateName);
        System.Threading.Tasks.Task<Microsoft.Azure.KeyVault.WebKey.JsonWebKey> GetKeyAsync(string keyName);
        Microsoft.Azure.KeyVault.KeyVaultClient GetKeyVaultClient();
        System.Threading.Tasks.Task<string> GetSecretAsync(string secretName);
    }
}
namespace Altinn.App.Core.Internal.Sign
{
    public class DataElementSignature
    {
        public DataElementSignature(string dataElementId) { }
        public DataElementSignature(string dataElementId, bool signed) { }
        public string DataElementId { get; }
        public bool Signed { get; }
    }
    public interface ISignClient
    {
        System.Threading.Tasks.Task SignDataElements(Altinn.App.Core.Internal.Sign.SignatureContext signatureContext);
    }
    public class SignatureContext
    {
        public SignatureContext(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string generatedFromTask, string signeeStatesDataTypeId, Altinn.App.Core.Internal.Sign.Signee signee, params Altinn.App.Core.Internal.Sign.DataElementSignature[] dataElementSignature) { }
        public SignatureContext(Altinn.App.Core.Models.InstanceIdentifier instanceIdentifier, string generatedFromTask, string signeeStatesDataTypeId, Altinn.App.Core.Internal.Sign.Signee signee, System.Collections.Generic.List<Altinn.App.Core.Internal.Sign.DataElementSignature> dataElementSignatures) { }
        public System.Collections.Generic.List<Altinn.App.Core.Internal.Sign.DataElementSignature> DataElementSignatures { get; }
        public string GeneratedFromTask { get; }
        public Altinn.App.Core.Models.InstanceIdentifier InstanceIdentifier { get; }
        public Altinn.App.Core.Internal.Sign.Signee Signee { get; }
        public string SigneeStatesDataTypeId { get; }
    }
    public class Signee
    {
        public Signee() { }
        public string? OrganisationNumber { get; set; }
        public string? PersonNumber { get; set; }
        public System.Guid? SystemUserId { get; set; }
        public string UserId { get; set; }
    }
}
namespace Altinn.App.Core.Internal.Texts
{
    [System.Obsolete("Use IAppResources.GetTexts() instead")]
    public interface IText
    {
        System.Threading.Tasks.Task<Altinn.Platform.Storage.Interface.Models.TextResource?> GetText(string org, string app, string language);
    }
    public interface ITranslationService
    {
        System.Threading.Tasks.Task<string?> TranslateFirstMatchingTextKey(string? language, params string[] keys);
        System.Threading.Tasks.Task<string?> TranslateTextKey(string key, string? language, System.Collections.Generic.Dictionary<string, string>? customTextParameters = null);
        System.Threading.Tasks.Task<string?> TranslateTextKey(string key, Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Models.Expressions.ComponentContext context, System.Collections.Generic.Dictionary<string, string>? customTextParameters = null);
        System.Threading.Tasks.Task<string?> TranslateTextKeyLenient(string? key, string? language);
    }
}
namespace Altinn.App.Core.Internal.Validation
{
    public class FileValidationService : Altinn.App.Core.Internal.Validation.IFileValidationService
    {
        public FileValidationService(Altinn.App.Core.Internal.Validation.IFileValidatorFactory fileValidatorFactory, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Success",
                "Errors"})]
        public System.Threading.Tasks.Task<System.ValueTuple<bool, System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssueWithSource>>> Validate(Altinn.Platform.Storage.Interface.Models.DataType dataType, System.Collections.Generic.List<Altinn.App.Core.Features.FileAnalysis.FileAnalysisResult> fileAnalysisResults) { }
    }
    public class FileValidatorFactory : Altinn.App.Core.Internal.Validation.IFileValidatorFactory
    {
        public FileValidatorFactory(System.IServiceProvider serviceProvider) { }
        public System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.Validation.IFileValidator> GetFileValidators(System.Collections.Generic.IEnumerable<string> validatorIds) { }
    }
    public interface IFileValidationService
    {
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Success",
                "Errors"})]
        System.Threading.Tasks.Task<System.ValueTuple<bool, System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssueWithSource>>> Validate(Altinn.Platform.Storage.Interface.Models.DataType dataType, System.Collections.Generic.List<Altinn.App.Core.Features.FileAnalysis.FileAnalysisResult> fileAnalysisResults);
    }
    public interface IFileValidatorFactory
    {
        System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.Validation.IFileValidator> GetFileValidators(System.Collections.Generic.IEnumerable<string> validatorIds);
    }
    public interface IValidationService
    {
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationSourcePair>> ValidateIncrementalFormData(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, Altinn.App.Core.Models.DataElementChanges changes, System.Collections.Generic.List<string>? ignoredValidators, string? language);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssueWithSource>> ValidateInstanceAtTask(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, System.Collections.Generic.List<string>? ignoredValidators, bool? onlyIncrementalValidators, string? language);
    }
    public interface IValidatorFactory
    {
        System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.IValidator> GetValidators(string taskId);
    }
    public class ValidationService : Altinn.App.Core.Internal.Validation.IValidationService
    {
        public ValidationService(Altinn.App.Core.Internal.Validation.IValidatorFactory validatorFactory, Altinn.App.Core.Internal.Texts.ITranslationService translationService, Microsoft.Extensions.Logging.ILogger<Altinn.App.Core.Internal.Validation.ValidationService> logger, Altinn.App.Core.Features.Telemetry? telemetry = null) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationSourcePair>> ValidateIncrementalFormData(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, Altinn.App.Core.Models.DataElementChanges changes, System.Collections.Generic.List<string>? ignoredValidators, string? language) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssueWithSource>> ValidateInstanceAtTask(Altinn.App.Core.Features.IInstanceDataAccessor dataAccessor, string taskId, System.Collections.Generic.List<string>? ignoredValidators, bool? onlyIncrementalValidators, string? language) { }
    }
    public class ValidatorFactory : Altinn.App.Core.Internal.Validation.IValidatorFactory
    {
        public ValidatorFactory(Microsoft.Extensions.Options.IOptions<Altinn.App.Core.Configuration.GeneralSettings> generalSettings, Altinn.App.Core.Internal.App.IAppMetadata appMetadata, System.IServiceProvider serviceProvider, Microsoft.Extensions.Hosting.IHostEnvironment hostEnvironment) { }
        public System.Collections.Generic.IEnumerable<Altinn.App.Core.Features.IValidator> GetValidators(string taskId) { }
    }
}
namespace Altinn.App.Core.Models
{
    public sealed class AppIdentifier : System.IEquatable<Altinn.App.Core.Models.AppIdentifier>
    {
        public AppIdentifier(Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public AppIdentifier(string id) { }
        public AppIdentifier(string org, string app) { }
        public string App { get; }
        public string Org { get; }
        public bool Equals(Altinn.App.Core.Models.AppIdentifier? other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static Altinn.App.Core.Models.AppIdentifier CreateFromUrl(string url) { }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(Altinn.App.Core.Models.AppOptionConverter?))]
    public class AppOption
    {
        public AppOption() { }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("helpText")]
        public string? HelpText { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public required string Label { get; set; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.Never)]
        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public required string? Value { get; set; }
        [System.Text.Json.Serialization.JsonIgnore]
        public Altinn.App.Core.Models.AppOptionValueType ValueType { get; set; }
    }
    public enum AppOptionValueType
    {
        String = 0,
        Number = 1,
        Boolean = 2,
        Null = 3,
    }
    public class AppOptions
    {
        public AppOptions() { }
        public bool IsCacheable { get; set; }
        public System.Collections.Generic.List<Altinn.App.Core.Models.AppOption>? Options { get; set; }
        public System.Collections.Generic.Dictionary<string, string?> Parameters { get; set; }
    }
    public class ApplicationLanguage
    {
        public ApplicationLanguage() { }
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public string Language { get; set; }
    }
    public class ApplicationMetadata : Altinn.Platform.Storage.Interface.Models.Application
    {
        public ApplicationMetadata(string id) { }
        [Newtonsoft.Json.JsonProperty(PropertyName="altinnNugetVersion")]
        public string AltinnNugetVersion { get; set; }
        [Newtonsoft.Json.JsonIgnore]
        [System.Text.Json.Serialization.JsonIgnore]
        public Altinn.App.Core.Models.AppIdentifier AppIdentifier { get; }
        [Newtonsoft.Json.JsonProperty(PropertyName="externalApiIds")]
        public string[]? ExternalApiIds { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="features")]
        public System.Collections.Generic.Dictionary<string, bool>? Features { get; set; }
        public new string Id { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="logo")]
        public Altinn.App.Core.Models.Logo? Logo { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="onEntry")]
        public new Altinn.App.Core.Models.OnEntry? OnEntry { get; set; }
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.Dictionary<string, object>? UnmappedProperties { get; set; }
    }
    public class Attachment
    {
        public Attachment() { }
        public string Id { get; set; }
        public string Name { get; set; }
        public long Size { get; set; }
    }
    public class AttachmentList
    {
        public AttachmentList() { }
        public System.Collections.Generic.List<Altinn.App.Core.Models.Attachment> Attachments { get; set; }
        public string Type { get; set; }
    }
    public sealed class BinaryDataChange : Altinn.App.Core.Models.DataElementChange
    {
        public System.ReadOnlyMemory<byte> CurrentBinaryData { get; }
        public string? FileName { get; }
    }
    public class CalculationResult : Altinn.Platform.Storage.Interface.Models.DataElement
    {
        public CalculationResult() { }
        public CalculationResult(Altinn.Platform.Storage.Interface.Models.DataElement dataElement) { }
        public CalculationResult(Altinn.Platform.Storage.Interface.Models.DataElement dataElement, System.Collections.Generic.Dictionary<string, object?> changedFields) { }
        public System.Collections.Generic.Dictionary<string, object?>? ChangedFields { get; set; }
    }
    public enum ChangeType
    {
        Created = 0,
        Updated = 1,
        Deleted = 2,
    }
    public class CloudEvent
    {
        public CloudEvent() { }
        [System.Text.Json.Serialization.JsonPropertyName("alternativesubject")]
        public string AlternativeSubject { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public object Data { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("contenttype")]
        public System.Net.Mime.ContentType DataContentType { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("dataschema")]
        public System.Uri DataSchema { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public System.Uri Source { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("specversion")]
        public string SpecVersion { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("subject")]
        public string Subject { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("time")]
        public System.DateTime Time { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }
    }
    public class Components
    {
        public Components() { }
        public System.Collections.Generic.List<string>? ExcludeFromPdf { get; set; }
    }
    public abstract class DataElementChange
    {
        public string ContentType { get; }
        public Altinn.Platform.Storage.Interface.Models.DataElement? DataElement { get; }
        public Altinn.App.Core.Models.DataElementIdentifier DataElementIdentifier { get; }
        public Altinn.Platform.Storage.Interface.Models.DataType DataType { get; }
        public Altinn.App.Core.Models.ChangeType Type { get; }
    }
    public sealed class DataElementChanges
    {
        public System.Collections.Generic.IReadOnlyList<Altinn.App.Core.Models.DataElementChange> AllChanges { get; }
        public System.Collections.Generic.IEnumerable<Altinn.App.Core.Models.BinaryDataChange> BinaryDataChanges { get; }
        public System.Collections.Generic.IEnumerable<Altinn.App.Core.Models.FormDataChange> FormDataChanges { get; }
    }
    public readonly struct DataElementIdentifier : System.IEquatable<Altinn.App.Core.Models.DataElementIdentifier>
    {
        public DataElementIdentifier(Altinn.Platform.Storage.Interface.Models.DataElement dataElement) { }
        public DataElementIdentifier(System.Guid guid) { }
        public DataElementIdentifier(string id) { }
        public string? DataTypeId { get; }
        public System.Guid Guid { get; }
        public string Id { get; }
        public bool Equals(Altinn.App.Core.Models.DataElementIdentifier other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static Altinn.App.Core.Models.DataElementIdentifier op_Implicit(Altinn.Platform.Storage.Interface.Models.DataElement dataElement) { }
        public static Altinn.App.Core.Models.DataElementIdentifier? op_Implicit(Altinn.Platform.Storage.Interface.Models.DataElement? dataElement) { }
        public static bool operator !=(Altinn.App.Core.Models.DataElementIdentifier left, Altinn.App.Core.Models.DataElementIdentifier right) { }
        public static bool operator ==(Altinn.App.Core.Models.DataElementIdentifier left, Altinn.App.Core.Models.DataElementIdentifier right) { }
    }
    public class DataList
    {
        public DataList() { }
        public System.Collections.Generic.List<object> ListItems { get; set; }
        public Altinn.App.Core.Models.DataListMetadata _metaData { get; set; }
    }
    public class DataListMetadata
    {
        public DataListMetadata() { }
        public System.Collections.Generic.List<string> Links { get; set; }
        public int Page { get; set; }
        public int PageCount { get; set; }
        public int PageSize { get; set; }
        public int TotaltItemsCount { get; set; }
    }
    public sealed class FormDataChange : Altinn.App.Core.Models.DataElementChange
    {
        public System.ReadOnlyMemory<byte>? CurrentBinaryData { get; }
        public object CurrentFormData { get; }
        public Altinn.App.Core.Internal.Data.IFormDataWrapper CurrentFormDataWrapper { get; }
        public System.ReadOnlyMemory<byte> PreviousBinaryData { get; }
        public object PreviousFormData { get; }
    }
    public interface ILanguageCodeStandard
    {
        Altinn.App.Core.Models.LanguageCodeValidationResult Validate(string code);
    }
    public class InstanceIdentifier
    {
        public static readonly Altinn.App.Core.Models.InstanceIdentifier NoInstance;
        public InstanceIdentifier(Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public InstanceIdentifier(string instanceId) { }
        public InstanceIdentifier(int instanceOwnerPartyId, System.Guid instanceGuid) { }
        public System.Guid InstanceGuid { get; }
        public int InstanceOwnerPartyId { get; }
        public bool IsNoInstance { get; }
        public string GetInstanceId() { }
        public override string ToString() { }
        public static Altinn.App.Core.Models.InstanceIdentifier CreateFromUrl(string url) { }
    }
    public class InstanceSelection
    {
        public InstanceSelection() { }
        [Newtonsoft.Json.JsonProperty(PropertyName="defaultRowsPerPage")]
        public int? DefaultRowsPerPage { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="defaultSelectedOption")]
        public int? DefaultSelectedOption { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="rowsPerPageOptions")]
        public System.Collections.Generic.List<int>? RowsPerPageOptions { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="sortDirection")]
        public string? SortDirection { get; set; }
    }
    public readonly struct Iso6391 : Altinn.App.Core.Models.ILanguageCodeStandard
    {
        public static Altinn.App.Core.Models.LanguageCodeValidationResult Validate(string code) { }
    }
    [System.ComponentModel.ImmutableObject(true)]
    public readonly struct JwtToken : System.IEquatable<Altinn.App.Core.Models.JwtToken>
    {
        public System.DateTimeOffset ExpiresAt { get; }
        public string Issuer { get; }
        public string? Scope { get; }
        public string Value { get; }
        public bool Equals(Altinn.App.Core.Models.JwtToken other) { }
        public override bool Equals(object? obj) { }
        public bool Equals(string? other) { }
        public override int GetHashCode() { }
        public bool IsExpired(System.TimeProvider? timeProvider = null) { }
        public override string ToString() { }
        public string ToStringUnmasked() { }
        public static Altinn.App.Core.Models.JwtToken Parse(string value) { }
        public static bool TryParse(string value, out Altinn.App.Core.Models.JwtToken jwtToken) { }
        public static string op_Implicit(Altinn.App.Core.Models.JwtToken accessToken) { }
        public static bool operator !=(Altinn.App.Core.Models.JwtToken left, Altinn.App.Core.Models.JwtToken right) { }
        public static bool operator !=(Altinn.App.Core.Models.JwtToken left, string right) { }
        public static bool operator !=(string left, Altinn.App.Core.Models.JwtToken right) { }
        public static bool operator ==(Altinn.App.Core.Models.JwtToken left, Altinn.App.Core.Models.JwtToken right) { }
        public static bool operator ==(Altinn.App.Core.Models.JwtToken left, string right) { }
        public static bool operator ==(string left, Altinn.App.Core.Models.JwtToken right) { }
    }
    public sealed class LanguageCodeValidationResult : System.IEquatable<Altinn.App.Core.Models.LanguageCodeValidationResult>
    {
        public LanguageCodeValidationResult(bool IsValid, string? ErrorMessage) { }
        public string? ErrorMessage { get; init; }
        public bool IsValid { get; init; }
    }
    public readonly struct LanguageCode<TLangCodeStandard> : System.IEquatable<Altinn.App.Core.Models.LanguageCode<TLangCodeStandard>>
        where TLangCodeStandard :  struct, Altinn.App.Core.Models.ILanguageCodeStandard
    {
        public string Value { get; }
        public bool Equals(Altinn.App.Core.Models.LanguageCode<TLangCodeStandard> other) { }
        public override bool Equals(object? obj) { }
        public bool Equals(string? other) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static Altinn.App.Core.Models.LanguageCode<TLangCodeStandard> Parse(string code) { }
        public static Altinn.App.Core.Models.LanguageCodeValidationResult TryParse(string code, out Altinn.App.Core.Models.LanguageCode<TLangCodeStandard> result) { }
        public static string op_Implicit(Altinn.App.Core.Models.LanguageCode<TLangCodeStandard> languageCode) { }
        public static bool operator !=(Altinn.App.Core.Models.LanguageCode<TLangCodeStandard> left, Altinn.App.Core.Models.LanguageCode<TLangCodeStandard> right) { }
        public static bool operator !=(Altinn.App.Core.Models.LanguageCode<TLangCodeStandard> left, string right) { }
        public static bool operator !=(string left, Altinn.App.Core.Models.LanguageCode<TLangCodeStandard> right) { }
        public static bool operator ==(Altinn.App.Core.Models.LanguageCode<TLangCodeStandard> left, Altinn.App.Core.Models.LanguageCode<TLangCodeStandard> right) { }
        public static bool operator ==(Altinn.App.Core.Models.LanguageCode<TLangCodeStandard> left, string right) { }
        public static bool operator ==(string left, Altinn.App.Core.Models.LanguageCode<TLangCodeStandard> right) { }
    }
    public class LayoutSet
    {
        public LayoutSet() { }
        public required string DataType { get; set; }
        public required string Id { get; set; }
        public System.Collections.Generic.List<string>? Tasks { get; set; }
        public string? Type { get; set; }
    }
    public class LayoutSets
    {
        public LayoutSets() { }
        public required System.Collections.Generic.List<Altinn.App.Core.Models.LayoutSet> Sets { get; set; }
    }
    public class LayoutSettings
    {
        public LayoutSettings() { }
        public Altinn.App.Core.Models.Components? Components { get; set; }
        public Altinn.App.Core.Models.Pages? Pages { get; set; }
    }
    public class Logo
    {
        public Logo() { }
        [Newtonsoft.Json.JsonProperty(PropertyName="displayAppOwnerNameInHeader")]
        public bool DisplayAppOwnerNameInHeader { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="size")]
        public string Size { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="source")]
        public string? Source { get; set; }
    }
    public class MimeType
    {
        public MimeType(string type, params string[] aliases) { }
        public System.Collections.Generic.IEnumerable<string> Aliases { get; }
        public string Type { get; }
        public bool Equals(object? obj, System.StringComparison comparisonType = 3, System.Collections.Generic.IEqualityComparer<string>? comparer = null) { }
        public bool IsMatch(string mimeType, System.StringComparison comparisonType = 3, System.Collections.Generic.IEqualityComparer<string>? comparer = null) { }
        public override string ToString() { }
    }
    public readonly struct NationalIdentityNumber : System.IEquatable<Altinn.App.Core.Models.NationalIdentityNumber>
    {
        public string Value { get; }
        public bool Equals(Altinn.App.Core.Models.NationalIdentityNumber other) { }
        public override bool Equals(object? obj) { }
        public bool Equals(string? other) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static Altinn.App.Core.Models.NationalIdentityNumber Parse(string value) { }
        public static bool TryParse(string value, out Altinn.App.Core.Models.NationalIdentityNumber nationalIdentityNumber) { }
        public static string op_Implicit(Altinn.App.Core.Models.NationalIdentityNumber nationalIdentityNumber) { }
        public static bool operator !=(Altinn.App.Core.Models.NationalIdentityNumber left, Altinn.App.Core.Models.NationalIdentityNumber right) { }
        public static bool operator !=(Altinn.App.Core.Models.NationalIdentityNumber left, string right) { }
        public static bool operator !=(string left, Altinn.App.Core.Models.NationalIdentityNumber right) { }
        public static bool operator ==(Altinn.App.Core.Models.NationalIdentityNumber left, Altinn.App.Core.Models.NationalIdentityNumber right) { }
        public static bool operator ==(Altinn.App.Core.Models.NationalIdentityNumber left, string right) { }
        public static bool operator ==(string left, Altinn.App.Core.Models.NationalIdentityNumber right) { }
    }
    public class OnEntry : Altinn.Platform.Storage.Interface.Models.OnEntryConfig
    {
        public OnEntry() { }
        [Newtonsoft.Json.JsonProperty(PropertyName="instanceSelection")]
        public Altinn.App.Core.Models.InstanceSelection? InstanceSelection { get; set; }
    }
    public readonly struct OrganisationNumber : System.IEquatable<Altinn.App.Core.Models.OrganisationNumber>
    {
        public bool Equals(Altinn.App.Core.Models.OrganisationNumber other) { }
        public override bool Equals(object? obj) { }
        public bool Equals(string? other) { }
        public string Get(Altinn.App.Core.Models.OrganisationNumberFormat format) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static Altinn.App.Core.Models.OrganisationNumber Parse(string value) { }
        public static bool TryParse(string? value, out Altinn.App.Core.Models.OrganisationNumber organisationNumber) { }
        public static string op_Implicit(Altinn.App.Core.Models.OrganisationNumber organisationNumber) { }
        public static bool operator !=(Altinn.App.Core.Models.OrganisationNumber left, Altinn.App.Core.Models.OrganisationNumber right) { }
        public static bool operator !=(Altinn.App.Core.Models.OrganisationNumber left, string right) { }
        public static bool operator !=(string left, Altinn.App.Core.Models.OrganisationNumber right) { }
        public static bool operator ==(Altinn.App.Core.Models.OrganisationNumber left, Altinn.App.Core.Models.OrganisationNumber right) { }
        public static bool operator ==(Altinn.App.Core.Models.OrganisationNumber left, string right) { }
        public static bool operator ==(string left, Altinn.App.Core.Models.OrganisationNumber right) { }
    }
    public enum OrganisationNumberFormat
    {
        Local = 0,
        International = 1,
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(Altinn.App.Core.Models.OrganisationOrPersonIdentifierJsonConverter))]
    public abstract class OrganisationOrPersonIdentifier : System.IEquatable<Altinn.App.Core.Models.OrganisationOrPersonIdentifier>
    {
        protected OrganisationOrPersonIdentifier() { }
        public abstract string ToUrnFormattedString();
        public static Altinn.App.Core.Models.OrganisationOrPersonIdentifier.Person Create(Altinn.App.Core.Models.NationalIdentityNumber value) { }
        public static Altinn.App.Core.Models.OrganisationOrPersonIdentifier.Organisation Create(Altinn.App.Core.Models.OrganisationNumber value) { }
        public static Altinn.App.Core.Models.OrganisationOrPersonIdentifier Parse(Altinn.Platform.Register.Models.Party party) { }
        public static Altinn.App.Core.Models.OrganisationOrPersonIdentifier Parse(string value) { }
        public static Altinn.App.Core.Models.OrganisationOrPersonIdentifier op_Implicit(Altinn.App.Core.Models.NationalIdentityNumber person) { }
        public static Altinn.App.Core.Models.OrganisationOrPersonIdentifier op_Implicit(Altinn.App.Core.Models.OrganisationNumber org) { }
        public static bool operator !=(Altinn.App.Core.Models.NationalIdentityNumber left, Altinn.App.Core.Models.OrganisationOrPersonIdentifier right) { }
        public static bool operator !=(Altinn.App.Core.Models.OrganisationNumber left, Altinn.App.Core.Models.OrganisationOrPersonIdentifier right) { }
        public static bool operator !=(Altinn.App.Core.Models.OrganisationOrPersonIdentifier left, Altinn.App.Core.Models.NationalIdentityNumber right) { }
        public static bool operator !=(Altinn.App.Core.Models.OrganisationOrPersonIdentifier left, Altinn.App.Core.Models.OrganisationNumber right) { }
        public static bool operator ==(Altinn.App.Core.Models.NationalIdentityNumber left, Altinn.App.Core.Models.OrganisationOrPersonIdentifier right) { }
        public static bool operator ==(Altinn.App.Core.Models.OrganisationNumber left, Altinn.App.Core.Models.OrganisationOrPersonIdentifier right) { }
        public static bool operator ==(Altinn.App.Core.Models.OrganisationOrPersonIdentifier left, Altinn.App.Core.Models.NationalIdentityNumber right) { }
        public static bool operator ==(Altinn.App.Core.Models.OrganisationOrPersonIdentifier left, Altinn.App.Core.Models.OrganisationNumber right) { }
        public sealed class Organisation : Altinn.App.Core.Models.OrganisationOrPersonIdentifier, System.IEquatable<Altinn.App.Core.Models.OrganisationOrPersonIdentifier.Organisation>
        {
            public Organisation(Altinn.App.Core.Models.OrganisationNumber Value) { }
            public Altinn.App.Core.Models.OrganisationNumber Value { get; init; }
            public Altinn.App.Core.Models.OrganisationNumber ToOrganisationNumber() { }
            public override string ToString() { }
            public override string ToUrnFormattedString() { }
            public static Altinn.App.Core.Models.OrganisationNumber op_Implicit(Altinn.App.Core.Models.OrganisationOrPersonIdentifier.Organisation org) { }
        }
        public sealed class Person : Altinn.App.Core.Models.OrganisationOrPersonIdentifier, System.IEquatable<Altinn.App.Core.Models.OrganisationOrPersonIdentifier.Person>
        {
            public Person(Altinn.App.Core.Models.NationalIdentityNumber Value) { }
            public Altinn.App.Core.Models.NationalIdentityNumber Value { get; init; }
            public Altinn.App.Core.Models.NationalIdentityNumber ToNationalIdentityNumber() { }
            public override string ToString() { }
            public override string ToUrnFormattedString() { }
            public static Altinn.App.Core.Models.NationalIdentityNumber op_Implicit(Altinn.App.Core.Models.OrganisationOrPersonIdentifier.Person person) { }
        }
    }
    public class PageGroup
    {
        public PageGroup() { }
        public string? Name { get; set; }
        public required System.Collections.Generic.List<string> Order { get; set; }
    }
    public class Pages
    {
        public Pages() { }
        public System.Collections.Generic.List<string>? ExcludeFromPdf { get; set; }
        public System.Collections.Generic.List<Altinn.App.Core.Models.PageGroup>? Groups { get; set; }
        public System.Collections.Generic.List<string>? Order { get; set; }
    }
    public class QueryResponse<T>
    {
        public QueryResponse() { }
        [Newtonsoft.Json.JsonProperty(PropertyName="count")]
        public long Count { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="instances")]
        public System.Collections.Generic.List<T> Instances { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="next")]
        public string Next { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="self")]
        public string Self { get; set; }
    }
    public class StylesConfig
    {
        public StylesConfig() { }
        public System.Collections.Generic.List<string> ExternalStyles { get; set; }
        public System.Collections.Generic.List<string> InternalStyles { get; set; }
    }
    public class UserContext
    {
        public UserContext() { }
        public int AuthenticationLevel { get; set; }
        public Altinn.Platform.Register.Models.Party Party { get; set; }
        public int PartyId { get; set; }
        public string SocialSecurityNumber { get; set; }
        public System.Security.Claims.ClaimsPrincipal User { get; set; }
        public int UserId { get; set; }
        public string UserName { get; set; }
        public Altinn.Platform.Register.Models.Party UserParty { get; set; }
    }
}
namespace Altinn.App.Core.Models.Expressions
{
    [System.Diagnostics.DebuggerDisplay("{_debuggerDisplay}", Name="{_debuggerName}")]
    [System.Diagnostics.DebuggerTypeProxy(typeof(Altinn.App.Core.Models.Expressions.ComponentContext.DebuggerProxy))]
    public sealed class ComponentContext
    {
        public ComponentContext(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Models.Layout.Components.Base.BaseComponent? component, int[]? rowIndices, Altinn.App.Core.Models.DataElementIdentifier dataElementIdentifier, System.Collections.Generic.List<Altinn.App.Core.Models.Expressions.ComponentContext>? childContexts = null) { }
        public System.Collections.Generic.List<Altinn.App.Core.Models.Expressions.ComponentContext> ChildContexts { get; }
        public Altinn.App.Core.Models.Layout.Components.Base.BaseComponent? Component { get; }
        public Altinn.App.Core.Models.DataElementIdentifier DataElementIdentifier { get; }
        public System.Collections.Generic.IEnumerable<Altinn.App.Core.Models.Expressions.ComponentContext> Descendants { get; }
        public bool HasChildContexts { get; }
        public Altinn.App.Core.Models.Expressions.ComponentContext? Parent { get; }
        public int[]? RowIndices { get; }
        public Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState State { get; }
        public System.Threading.Tasks.Task<bool> IsHidden(bool evaluateRemoveWhenHidden) { }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(Altinn.App.Core.Models.Expressions.ExpressionConverter?))]
    public readonly struct Expression : System.IEquatable<Altinn.App.Core.Models.Expressions.Expression>
    {
        public Expression(Altinn.App.Core.Internal.Expressions.ExpressionValue value) { }
        [System.Obsolete("Use the constructor with ExpressionValue instead")]
        public Expression(object? value) { }
        public Expression(Altinn.App.Core.Models.Expressions.ExpressionFunction function, Altinn.App.Core.Models.Expressions.Expression arg1) { }
        public Expression(Altinn.App.Core.Models.Expressions.ExpressionFunction function, System.Collections.Generic.List<Altinn.App.Core.Models.Expressions.Expression>? args) { }
        public Expression(Altinn.App.Core.Models.Expressions.ExpressionFunction function, Altinn.App.Core.Models.Expressions.Expression arg1, Altinn.App.Core.Models.Expressions.Expression arg2) { }
        public System.Collections.Generic.List<Altinn.App.Core.Models.Expressions.Expression>? Args { get; }
        public Altinn.App.Core.Models.Expressions.ExpressionFunction Function { get; }
        [System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, "Value")]
        [System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, "ValueUnion")]
        [System.Diagnostics.CodeAnalysis.MemberNotNullWhen(true, new string?[]?[] {
                "Function",
                "Args"})]
        [get: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, "Value")]
        [get: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, "ValueUnion")]
        [get: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(true, new string?[]?[] {
                "Function",
                "Args"})]
        public bool IsFunctionExpression { get; }
        [System.Obsolete("Use ValueUnion instead")]
        public object? Value { get; }
        public Altinn.App.Core.Internal.Expressions.ExpressionValue ValueUnion { get; }
        public static Altinn.App.Core.Models.Expressions.Expression False { get; }
        public static Altinn.App.Core.Models.Expressions.Expression Null { get; }
        public static Altinn.App.Core.Models.Expressions.Expression True { get; }
        public bool Equals(Altinn.App.Core.Models.Expressions.Expression other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(Altinn.App.Core.Models.Expressions.Expression left, Altinn.App.Core.Models.Expressions.Expression right) { }
        public static bool operator ==(Altinn.App.Core.Models.Expressions.Expression left, Altinn.App.Core.Models.Expressions.Expression right) { }
    }
    public class ExpressionConverter : System.Text.Json.Serialization.JsonConverter<Altinn.App.Core.Models.Expressions.Expression>
    {
        public ExpressionConverter() { }
        public override Altinn.App.Core.Models.Expressions.Expression Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) { }
        public override void Write(System.Text.Json.Utf8JsonWriter writer, Altinn.App.Core.Models.Expressions.Expression value, System.Text.Json.JsonSerializerOptions options) { }
        public static Altinn.App.Core.Models.Expressions.Expression ReadStatic(System.Text.Json.JsonElement element) { }
        public static Altinn.App.Core.Models.Expressions.Expression ReadStatic(ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options) { }
    }
    [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
    public enum ExpressionFunction
    {
        INVALID = 0,
        dataModel = 1,
        component = 2,
        countDataElements = 3,
        instanceContext = 4,
        formatDate = 5,
        @if = 6,
        frontendSettings = 7,
        concat = 8,
        upperCase = 9,
        lowerCase = 10,
        upperCaseFirst = 11,
        lowerCaseFirst = 12,
        compare = 13,
        contains = 14,
        notContains = 15,
        commaContains = 16,
        endsWith = 17,
        startsWith = 18,
        equals = 19,
        notEquals = 20,
        greaterThanEq = 21,
        lessThan = 22,
        lessThanEq = 23,
        greaterThan = 24,
        stringLength = 25,
        stringIndexOf = 26,
        stringReplace = 27,
        stringSlice = 28,
        round = 29,
        and = 30,
        or = 31,
        not = 32,
        argv = 33,
        gatewayAction = 34,
        language = 35,
        text = 36,
    }
}
namespace Altinn.App.Core.Models.Layout.Components.Base
{
    public abstract class BaseComponent
    {
        protected BaseComponent() { }
        public required System.Collections.Generic.IReadOnlyDictionary<string, Altinn.App.Core.Models.Layout.ModelBinding> DataModelBindings { get; init; }
        public required Altinn.App.Core.Models.Expressions.Expression Hidden { get; init; }
        public required string Id { get; init; }
        public required string LayoutId { get; init; }
        public required string PageId { get; init; }
        public required Altinn.App.Core.Models.Expressions.Expression ReadOnly { get; init; }
        public required Altinn.App.Core.Models.Expressions.Expression RemoveWhenHidden { get; init; }
        public required Altinn.App.Core.Models.Expressions.Expression Required { get; init; }
        public required System.Collections.Generic.IReadOnlyDictionary<string, Altinn.App.Core.Models.Expressions.Expression> TextResourceBindings { get; init; }
        public required string Type { get; init; }
        public abstract void ClaimChildren(System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.Components.Base.BaseComponent> unclaimedComponents, System.Collections.Generic.Dictionary<string, string> claimedComponents);
        public abstract System.Threading.Tasks.Task<Altinn.App.Core.Models.Expressions.ComponentContext> GetContext(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Models.DataElementIdentifier defaultDataElementIdentifier, int[]? rowIndexes, System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.LayoutSetComponent> layoutsLookup);
        protected static System.Collections.Generic.List<string> ParseChildReferences(System.Text.Json.JsonElement componentElement, string layoutId, string pageId) { }
        protected static System.Collections.Generic.IReadOnlyDictionary<string, Altinn.App.Core.Models.Layout.ModelBinding> ParseDataModelBindings(System.Text.Json.JsonElement element) { }
        protected static Altinn.App.Core.Models.Expressions.Expression ParseExpression(System.Text.Json.JsonElement componentElement, string property) { }
        protected static Altinn.App.Core.Models.Expressions.Expression ParseHiddenExpression(System.Text.Json.JsonElement componentElement) { }
        protected static string ParseId(System.Text.Json.JsonElement componentElement) { }
        protected static Altinn.App.Core.Models.Expressions.Expression ParseReadOnlyExpression(System.Text.Json.JsonElement componentElement) { }
        protected static Altinn.App.Core.Models.Expressions.Expression ParseRemoveWhenHiddenExpression(System.Text.Json.JsonElement componentElement) { }
        protected static Altinn.App.Core.Models.Expressions.Expression ParseRequiredExpression(System.Text.Json.JsonElement componentElement) { }
        protected static System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Expressions.Expression> ParseTextResourceBindings(System.Text.Json.JsonElement element) { }
        protected static string ParseType(System.Text.Json.JsonElement componentElement) { }
    }
    public abstract class NoReferenceComponent : Altinn.App.Core.Models.Layout.Components.Base.BaseComponent
    {
        protected NoReferenceComponent() { }
        public override void ClaimChildren(System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.Components.Base.BaseComponent> unclaimedComponents, System.Collections.Generic.Dictionary<string, string> claimedComponents) { }
        public override System.Threading.Tasks.Task<Altinn.App.Core.Models.Expressions.ComponentContext> GetContext(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Models.DataElementIdentifier defaultDataElementIdentifier, int[]? rowIndexes, System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.LayoutSetComponent> layoutsLookup) { }
    }
    public class RepeatingGroupRowComponent : Altinn.App.Core.Models.Layout.Components.Base.BaseComponent
    {
        public RepeatingGroupRowComponent() { }
        public override void ClaimChildren(System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.Components.Base.BaseComponent> unclaimedComponents, System.Collections.Generic.Dictionary<string, string> claimedComponents) { }
        public override System.Threading.Tasks.Task<Altinn.App.Core.Models.Expressions.ComponentContext> GetContext(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Models.DataElementIdentifier defaultDataElementIdentifier, int[]? rowIndexes, System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.LayoutSetComponent> layoutsLookup) { }
    }
    public abstract class RepeatingReferenceComponent : Altinn.App.Core.Models.Layout.Components.Base.BaseComponent
    {
        protected RepeatingReferenceComponent() { }
        public required System.Collections.Generic.IReadOnlyList<string> AfterChildReferences { get; init; }
        public required System.Collections.Generic.IReadOnlyList<string> BeforeChildReferences { get; init; }
        public required Altinn.App.Core.Models.Layout.ModelBinding GroupModelBinding { get; init; }
        public required Altinn.App.Core.Models.Expressions.Expression HiddenRow { get; init; }
        public required System.Collections.Generic.IReadOnlyList<string> RepeatingChildReferences { get; init; }
        public override void ClaimChildren(System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.Components.Base.BaseComponent> unclaimedComponents, System.Collections.Generic.Dictionary<string, string> claimedComponents) { }
        public override System.Threading.Tasks.Task<Altinn.App.Core.Models.Expressions.ComponentContext> GetContext(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Models.DataElementIdentifier defaultDataElementIdentifier, int[]? rowIndexes, System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.LayoutSetComponent> layoutsLookup) { }
    }
    public abstract class SimpleReferenceComponent : Altinn.App.Core.Models.Layout.Components.Base.BaseComponent
    {
        protected SimpleReferenceComponent() { }
        public required System.Collections.Generic.IReadOnlyCollection<string> ChildReferences { get; init; }
        public System.Collections.Generic.IReadOnlyDictionary<string, Altinn.App.Core.Models.Layout.Components.Base.BaseComponent> ClaimedChildrenLookup { get; }
        public override void ClaimChildren(System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.Components.Base.BaseComponent> unclaimedComponents, System.Collections.Generic.Dictionary<string, string> claimedComponents) { }
        public override System.Threading.Tasks.Task<Altinn.App.Core.Models.Expressions.ComponentContext> GetContext(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Models.DataElementIdentifier defaultDataElementIdentifier, int[]? rowIndexes, System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.LayoutSetComponent> layoutsLookup) { }
    }
}
namespace Altinn.App.Core.Models.Layout.Components
{
    public sealed class CardsComponent : Altinn.App.Core.Models.Layout.Components.Base.SimpleReferenceComponent
    {
        public CardsComponent() { }
        public required System.Collections.Generic.IReadOnlyCollection<Altinn.App.Core.Models.Layout.Components.CardsConfig> Cards { get; init; }
        public static Altinn.App.Core.Models.Layout.Components.CardsComponent Parse(System.Text.Json.JsonElement componentElement, string pageId, string layoutId) { }
    }
    public sealed class CardsConfig
    {
        public CardsConfig() { }
        [System.Text.Json.Serialization.JsonPropertyName("children")]
        public System.Collections.Generic.List<string>? Children { get; init; }
    }
    public sealed class GridComponent : Altinn.App.Core.Models.Layout.Components.Base.SimpleReferenceComponent
    {
        public GridComponent() { }
        public required System.Collections.Generic.List<Altinn.App.Core.Models.Layout.Components.GridComponent.GridRowConfig> Rows { get; init; }
        public static Altinn.App.Core.Models.Layout.Components.GridComponent Parse(System.Text.Json.JsonElement componentElement, string pageId, string layoutId) { }
        public class GridCellConfig
        {
            public GridCellConfig() { }
            [System.Text.Json.Serialization.JsonPropertyName("component")]
            public string? ComponentId { get; set; }
        }
        public class GridRowConfig
        {
            public GridRowConfig() { }
            [System.Text.Json.Serialization.JsonPropertyName("cells")]
            public required System.Collections.Generic.List<Altinn.App.Core.Models.Layout.Components.GridComponent.GridCellConfig?> Cells { get; set; }
        }
    }
    public sealed class NonRepeatingGroupComponent : Altinn.App.Core.Models.Layout.Components.Base.SimpleReferenceComponent
    {
        public NonRepeatingGroupComponent() { }
        public static Altinn.App.Core.Models.Layout.Components.NonRepeatingGroupComponent Parse(System.Text.Json.JsonElement componentElement, string pageId, string layoutId) { }
    }
    public sealed class OptionsComponent : Altinn.App.Core.Models.Layout.Components.Base.NoReferenceComponent
    {
        public OptionsComponent() { }
        public required System.Collections.Generic.List<Altinn.App.Core.Models.AppOption>? Options { get; init; }
        public required string? OptionsId { get; init; }
        public required Altinn.App.Core.Models.Layout.Components.OptionsSource? OptionsSource { get; init; }
        public required bool Secure { get; init; }
        public static Altinn.App.Core.Models.Layout.Components.OptionsComponent Parse(System.Text.Json.JsonElement componentElement, string pageId, string layoutId) { }
    }
    public class OptionsSource : System.IEquatable<Altinn.App.Core.Models.Layout.Components.OptionsSource>
    {
        public OptionsSource(string group, string value) { }
        public string Group { get; }
        public string Value { get; }
    }
    public sealed class PageComponent : Altinn.App.Core.Models.Layout.Components.Base.BaseComponent
    {
        public PageComponent() { }
        public required System.Collections.Generic.IReadOnlyList<Altinn.App.Core.Models.Layout.Components.Base.BaseComponent> Components { get; init; }
        public override void ClaimChildren(System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.Components.Base.BaseComponent> unclaimedComponents, System.Collections.Generic.Dictionary<string, string> claimedComponents) { }
        public override System.Threading.Tasks.Task<Altinn.App.Core.Models.Expressions.ComponentContext> GetContext(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Models.DataElementIdentifier defaultDataElementIdentifier, int[]? rowIndexes, System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.LayoutSetComponent> layoutsLookup) { }
        public static Altinn.App.Core.Models.Layout.Components.PageComponent Parse(System.Text.Json.JsonElement outerElement, string pageId, string layoutId) { }
    }
    public sealed class RepeatingGroupComponent : Altinn.App.Core.Models.Layout.Components.Base.RepeatingReferenceComponent
    {
        public RepeatingGroupComponent() { }
        public required int MaxCount { get; init; }
        public required System.Collections.Generic.IReadOnlyList<Altinn.App.Core.Models.Layout.Components.GridComponent.GridRowConfig> RowsAfter { get; init; }
        public required System.Collections.Generic.IReadOnlyList<Altinn.App.Core.Models.Layout.Components.GridComponent.GridRowConfig> RowsBefore { get; init; }
        public static Altinn.App.Core.Models.Layout.Components.RepeatingGroupComponent Parse(System.Text.Json.JsonElement componentElement, string pageId, string layoutId, int maxCount) { }
    }
    public sealed class SubFormComponent : Altinn.App.Core.Models.Layout.Components.Base.BaseComponent
    {
        public SubFormComponent() { }
        public required string LayoutSetId { get; init; }
        public override void ClaimChildren(System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.Components.Base.BaseComponent> unclaimedComponents, System.Collections.Generic.Dictionary<string, string> claimedComponents) { }
        public override System.Threading.Tasks.Task<Altinn.App.Core.Models.Expressions.ComponentContext> GetContext(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state, Altinn.App.Core.Models.DataElementIdentifier defaultDataElementIdentifier, int[]? rowIndexes, System.Collections.Generic.Dictionary<string, Altinn.App.Core.Models.Layout.LayoutSetComponent> layoutsLookup) { }
        public static Altinn.App.Core.Models.Layout.Components.SubFormComponent Parse(System.Text.Json.JsonElement componentElement, string pageId, string layoutId) { }
    }
    public sealed class TabsComponent : Altinn.App.Core.Models.Layout.Components.Base.SimpleReferenceComponent
    {
        public TabsComponent() { }
        public required System.Collections.Generic.IReadOnlyCollection<Altinn.App.Core.Models.Layout.Components.TabsConfig> Tabs { get; init; }
        public static Altinn.App.Core.Models.Layout.Components.TabsComponent Parse(System.Text.Json.JsonElement componentElement, string pageId, string layoutId) { }
    }
    public sealed class TabsConfig
    {
        public TabsConfig() { }
        [System.Text.Json.Serialization.JsonPropertyName("children")]
        public System.Collections.Generic.List<string>? Children { get; init; }
    }
}
namespace Altinn.App.Core.Models.Layout
{
    public struct DataReference : System.IEquatable<Altinn.App.Core.Models.Layout.DataReference>
    {
        public required Altinn.App.Core.Models.DataElementIdentifier DataElementIdentifier { get; init; }
        public required string Field { get; init; }
        public bool StartsWith(Altinn.App.Core.Models.Layout.DataReference prefix) { }
    }
    public sealed class LayoutModel
    {
        public LayoutModel(System.Collections.Generic.List<Altinn.App.Core.Models.Layout.LayoutSetComponent> layouts, Altinn.App.Core.Models.LayoutSet? defaultLayout) { }
        public Altinn.Platform.Storage.Interface.Models.DataType DefaultDataType { get; }
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Altinn.App.Core.Models.Expressions.ComponentContext>> GenerateComponentContexts(Altinn.App.Core.Internal.Expressions.LayoutEvaluatorState state) { }
    }
    public sealed class LayoutSetComponent
    {
        public LayoutSetComponent(System.Collections.Generic.List<Altinn.App.Core.Models.Layout.Components.PageComponent> pages, string id, Altinn.Platform.Storage.Interface.Models.DataType defaultDataType) { }
        public Altinn.Platform.Storage.Interface.Models.DataType DefaultDataType { get; }
        public string Id { get; }
        public System.Collections.Generic.IEnumerable<Altinn.App.Core.Models.Layout.Components.PageComponent> Pages { get; }
        public Altinn.App.Core.Models.DataElementIdentifier? GetDefaultDataElementId(Altinn.Platform.Storage.Interface.Models.Instance instance) { }
        public Altinn.App.Core.Models.Layout.Components.PageComponent GetPage(string pageName) { }
    }
    public readonly struct ModelBinding : System.IEquatable<Altinn.App.Core.Models.Layout.ModelBinding>
    {
        [System.Text.Json.Serialization.JsonPropertyName("dataType")]
        public string? DataType { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("field")]
        public required string Field { get; init; }
    }
}
namespace Altinn.App.Core.Models.Notifications.Email
{
    public sealed class EmailNotification : System.IEquatable<Altinn.App.Core.Models.Notifications.Email.EmailNotification>
    {
        public EmailNotification() { }
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public required string Body { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("contentType")]
        public string ContentType { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("recipients")]
        public required System.Collections.Generic.IReadOnlyList<Altinn.App.Core.Models.Notifications.Email.EmailRecipient> Recipients { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("requestedSendTime")]
        public System.DateTime? RequestedSendTime { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("sendersReference")]
        public required string SendersReference { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("subject")]
        public required string Subject { get; init; }
    }
    public sealed class EmailNotificationException : Altinn.App.Core.Exceptions.AltinnException { }
    public sealed class EmailOrderResponse : System.IEquatable<Altinn.App.Core.Models.Notifications.Email.EmailOrderResponse>
    {
        public EmailOrderResponse(string OrderId) { }
        [System.Text.Json.Serialization.JsonPropertyName("orderId")]
        public string OrderId { get; init; }
    }
    public sealed class EmailRecipient : System.IEquatable<Altinn.App.Core.Models.Notifications.Email.EmailRecipient>
    {
        public EmailRecipient(string EmailAddress) { }
        [System.Text.Json.Serialization.JsonPropertyName("emailAddress")]
        public string EmailAddress { get; init; }
    }
}
namespace Altinn.App.Core.Models.Notifications.Sms
{
    public sealed class SmsNotification : System.IEquatable<Altinn.App.Core.Models.Notifications.Sms.SmsNotification>
    {
        public SmsNotification() { }
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public required string Body { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("recipients")]
        public required System.Collections.Generic.IReadOnlyList<Altinn.App.Core.Models.Notifications.Sms.SmsRecipient> Recipients { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("requestedSendTime")]
        public System.DateTime? RequestedSendTime { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("senderNumber")]
        public required string SenderNumber { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("sendersReference")]
        public required string SendersReference { get; init; }
    }
    public sealed class SmsNotificationException : Altinn.App.Core.Exceptions.AltinnException { }
    public sealed class SmsOrderResponse : System.IEquatable<Altinn.App.Core.Models.Notifications.Sms.SmsOrderResponse>
    {
        public SmsOrderResponse(string OrderId) { }
        [System.Text.Json.Serialization.JsonPropertyName("orderId")]
        public string OrderId { get; init; }
    }
    public sealed class SmsRecipient : System.IEquatable<Altinn.App.Core.Models.Notifications.Sms.SmsRecipient>
    {
        public SmsRecipient(string MobileNumber, string? OrganisationNumber = null, string? NationalIdentityNumber = null) { }
        [System.Text.Json.Serialization.JsonPropertyName("mobileNumber")]
        public string MobileNumber { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("nationalIdentityNumber")]
        public string? NationalIdentityNumber { get; init; }
        [System.Text.Json.Serialization.JsonPropertyName("organisationNumber")]
        public string? OrganisationNumber { get; init; }
    }
}
namespace Altinn.App.Core.Models.Process
{
    public class ProcessChangeResult
    {
        public ProcessChangeResult() { }
        public string? ErrorMessage { get; init; }
        public Altinn.App.Core.Models.Process.ProcessErrorType? ErrorType { get; init; }
        public Altinn.App.Core.Models.Process.ProcessStateChange? ProcessStateChange { get; init; }
        [System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, new string?[]?[] {
                "ErrorMessage",
                "ErrorType"})]
        [System.Diagnostics.CodeAnalysis.MemberNotNullWhen(true, "ProcessStateChange")]
        [get: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, new string?[]?[] {
                "ErrorMessage",
                "ErrorType"})]
        [get: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(true, "ProcessStateChange")]
        [set: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, new string?[]?[] {
                "ErrorMessage",
                "ErrorType"})]
        [set: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(true, "ProcessStateChange")]
        public bool Success { get; init; }
    }
    public enum ProcessErrorType
    {
        Conflict = 0,
        Internal = 1,
        Unauthorized = 2,
        BadRequest = 3,
    }
    public class ProcessGatewayInformation
    {
        public ProcessGatewayInformation() { }
        public string? Action { get; set; }
        public string? DataTypeId { get; set; }
    }
    public class ProcessNextRequest
    {
        public ProcessNextRequest() { }
        public required string? Action { get; init; }
        public string? ActionOnBehalfOf { get; set; }
        public required Altinn.Platform.Storage.Interface.Models.Instance Instance { get; init; }
        public required string? Language { get; init; }
        public required System.Security.Claims.ClaimsPrincipal User { get; init; }
    }
    public class ProcessStartRequest
    {
        public ProcessStartRequest() { }
        public Altinn.Platform.Storage.Interface.Models.Instance Instance { get; set; }
        public System.Collections.Generic.Dictionary<string, string>? Prefill { get; set; }
        public string? StartEventId { get; set; }
        public System.Security.Claims.ClaimsPrincipal User { get; set; }
    }
    public class ProcessStateChange
    {
        public ProcessStateChange() { }
        public System.Collections.Generic.List<Altinn.Platform.Storage.Interface.Models.InstanceEvent>? Events { get; set; }
        public Altinn.Platform.Storage.Interface.Models.ProcessState? NewProcessState { get; set; }
        public Altinn.Platform.Storage.Interface.Models.ProcessState? OldProcessState { get; set; }
    }
}
namespace Altinn.App.Core.Models.Result
{
    public class ServiceResult<T, TU>
    {
        public TU Error { get; }
        public T Ok { get; }
        [System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, "Error")]
        [System.Diagnostics.CodeAnalysis.MemberNotNullWhen(true, "Ok")]
        [get: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(false, "Error")]
        [get: System.Diagnostics.CodeAnalysis.MemberNotNullWhen(true, "Ok")]
        public bool Success { get; }
        public static Altinn.App.Core.Models.Result.ServiceResult<T, TU> op_Implicit(T okData) { }
        public static Altinn.App.Core.Models.Result.ServiceResult<T, TU> op_Implicit(TU error) { }
    }
}
namespace Altinn.App.Core.Models.UserAction
{
    public class ActionError
    {
        public ActionError() { }
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public System.Collections.Generic.Dictionary<string, string>? Metadata { get; set; }
    }
    public class ClientAction
    {
        public ClientAction() { }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public System.Collections.Generic.Dictionary<string, object>? Metadata { get; set; }
        public static Altinn.App.Core.Models.UserAction.ClientAction NavigateToPage(string page) { }
        public static Altinn.App.Core.Models.UserAction.ClientAction NextPage() { }
        public static Altinn.App.Core.Models.UserAction.ClientAction PreviousPage() { }
    }
    public enum ResultType
    {
        Success = 0,
        Failure = 1,
        Redirect = 2,
    }
    public class UserActionContext
    {
        [System.Obsolete("Use the constructor with IInstanceDataAccessor instead")]
        public UserActionContext(Altinn.Platform.Storage.Interface.Models.Instance instance, int? userId, string? buttonId = null, System.Collections.Generic.Dictionary<string, string>? actionMetadata = null, string? language = null, Altinn.App.Core.Features.Auth.Authenticated? authentication = null) { }
        public UserActionContext(Altinn.App.Core.Features.IInstanceDataMutator dataMutator, int? userId, string? buttonId = null, System.Collections.Generic.Dictionary<string, string>? actionMetadata = null, string? language = null, Altinn.App.Core.Features.Auth.Authenticated? authentication = null, string? onBehalfOf = null, System.Threading.CancellationToken? cancellationToken = default) { }
        public System.Collections.Generic.Dictionary<string, string> ActionMetadata { get; }
        public Altinn.App.Core.Features.Auth.Authenticated? Authentication { get; }
        public string? ButtonId { get; }
        public System.Threading.CancellationToken CancellationToken { get; }
        public Altinn.App.Core.Features.IInstanceDataMutator DataMutator { get; }
        public Altinn.Platform.Storage.Interface.Models.Instance Instance { get; }
        public string? Language { get; }
        public string? OnBehalfOf { get; }
        public int? UserId { get; }
    }
    public sealed class UserActionResult
    {
        public UserActionResult() { }
        public System.Collections.Generic.List<Altinn.App.Core.Models.UserAction.ClientAction>? ClientActions { get; set; }
        public Altinn.App.Core.Models.UserAction.ActionError? Error { get; set; }
        public Altinn.App.Core.Models.Process.ProcessErrorType? ErrorType { get; set; }
        public System.Uri? RedirectUrl { get; set; }
        public Altinn.App.Core.Models.UserAction.ResultType ResultType { get; set; }
        public bool Success { get; set; }
        [System.Obsolete("Updates done to data from UserActionContext.DataMutator is tracked and don\'t need" +
            " to be returned in the response")]
        public System.Collections.Generic.Dictionary<string, object>? UpdatedDataModels { get; set; }
        [System.Obsolete("Updates done to data from UserActionContext.DataMutator is tracked and don\'t need" +
            " to be returned in the response")]
        public void AddUpdatedDataModel(string dataModelId, object dataModel) { }
        public static Altinn.App.Core.Models.UserAction.UserActionResult FailureResult(Altinn.App.Core.Models.UserAction.ActionError error, System.Collections.Generic.List<Altinn.App.Core.Models.UserAction.ClientAction>? clientActions = null, Altinn.App.Core.Models.Process.ProcessErrorType errorType = 1) { }
        public static Altinn.App.Core.Models.UserAction.UserActionResult RedirectResult(System.Uri redirectUrl) { }
        public static Altinn.App.Core.Models.UserAction.UserActionResult SuccessResult(System.Collections.Generic.List<Altinn.App.Core.Models.UserAction.ClientAction>? clientActions = null) { }
    }
}
namespace Altinn.App.Core.Models.Validation
{
    public class ExpressionValidation
    {
        public ExpressionValidation() { }
        public Altinn.App.Core.Models.Expressions.Expression Condition { get; set; }
        public Altinn.App.Core.Models.Expressions.Expression Message { get; set; }
        public Altinn.App.Core.Models.Validation.ValidationIssueSeverity? Severity { get; set; }
    }
    public class FrontendSeverityConverter : System.Text.Json.Serialization.JsonConverter<Altinn.App.Core.Models.Validation.ValidationIssueSeverity>
    {
        public FrontendSeverityConverter() { }
        public override Altinn.App.Core.Models.Validation.ValidationIssueSeverity Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) { }
        public override void Write(System.Text.Json.Utf8JsonWriter writer, Altinn.App.Core.Models.Validation.ValidationIssueSeverity value, System.Text.Json.JsonSerializerOptions options) { }
    }
    public class InstantiationValidationResult
    {
        public InstantiationValidationResult() { }
        public string? CustomTextKey { get; set; }
        public System.Collections.Generic.Dictionary<string, string>? CustomTextParameters { get; set; }
        public string Message { get; set; }
        public bool Valid { get; set; }
        public System.Collections.Generic.List<Altinn.Platform.Register.Models.Party> ValidParties { get; set; }
    }
    public class RawExpressionValidation
    {
        public RawExpressionValidation() { }
        public Altinn.App.Core.Models.Expressions.Expression? Condition { get; set; }
        public Altinn.App.Core.Models.Expressions.Expression? Message { get; set; }
        public string? Ref { get; set; }
        [System.Text.Json.Serialization.JsonConverter(typeof(Altinn.App.Core.Models.Validation.FrontendSeverityConverter?))]
        public Altinn.App.Core.Models.Validation.ValidationIssueSeverity? Severity { get; set; }
    }
    public class ValidationException : Altinn.App.Core.Exceptions.AltinnException
    {
        public ValidationException() { }
        public ValidationException(string message) { }
        public ValidationException(string message, System.Exception inner) { }
    }
    public class ValidationIssue
    {
        public ValidationIssue() { }
        [Newtonsoft.Json.JsonProperty(PropertyName="code")]
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="customTextKey")]
        [System.Text.Json.Serialization.JsonPropertyName("customTextKey")]
        public string? CustomTextKey { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="customTextParameters")]
        [System.Text.Json.Serialization.JsonPropertyName("customTextParameters")]
        public System.Collections.Generic.Dictionary<string, string>? CustomTextParameters { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="customTextParams")]
        [System.Obsolete("Use customTextParameters instead")]
        [System.Text.Json.Serialization.JsonPropertyName("customTextParams")]
        public System.Collections.Generic.List<string>? CustomTextParams { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="dataElementId")]
        [System.Text.Json.Serialization.JsonPropertyName("dataElementId")]
        public string? DataElementId { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="description")]
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="field")]
        [System.Text.Json.Serialization.JsonPropertyName("field")]
        public string? Field { get; set; }
        [Newtonsoft.Json.JsonIgnore]
        [System.Obsolete("Not in use", true)]
        [System.Text.Json.Serialization.JsonIgnore]
        public string? InstanceId { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="severity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonNumberEnumConverter<Altinn.App.Core.Models.Validation.ValidationIssueSeverity>?))]
        [System.Text.Json.Serialization.JsonPropertyName("severity")]
        public required Altinn.App.Core.Models.Validation.ValidationIssueSeverity Severity { get; set; }
        [Newtonsoft.Json.JsonProperty(PropertyName="source")]
        [System.Obsolete("Source is set automatically by the validation service. Setting it explicitly will" +
            " be an error in v9")]
        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string? Source { get; set; }
    }
    public static class ValidationIssueCodes
    {
        public static class DataElementCodes
        {
            public static string ContentTypeNotAllowed { get; }
            public static string DataElementFileInfected { get; }
            public static string DataElementFileScanPending { get; }
            public static string DataElementTooLarge { get; }
            public static string DataElementValidatedAtWrongTask { get; }
            public static string InvalidFileNameFormat { get; }
            public static string MissingContentType { get; }
            public static string MissingFileName { get; }
            public static string MissingSignatures { get; }
        }
        public static class InstanceCodes
        {
            public static string TooFewDataElementsOfType { get; }
            public static string TooManyDataElementsOfType { get; }
        }
    }
    public enum ValidationIssueSeverity
    {
        Unspecified = 0,
        Error = 1,
        Warning = 2,
        Informational = 3,
        [System.Obsolete("We run all validations from frontend version 4, so we don\'t need info about fixed" +
            " issues")]
        Fixed = 4,
        Success = 5,
    }
    public static class ValidationIssueSources
    {
        public static readonly string Custom;
        public static readonly string DataAnnotations;
        public static readonly string Expression;
        public static readonly string File;
        public static readonly string ModelState;
        public static readonly string Required;
    }
    public class ValidationIssueWithSource
    {
        public ValidationIssueWithSource() { }
        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public required string? Code { get; set; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("customTextKey")]
        public string? CustomTextKey { get; set; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("customTextParameters")]
        public System.Collections.Generic.Dictionary<string, string>? CustomTextParameters { get; set; }
        [System.Obsolete("Use customTextParameters instead")]
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]
        [System.Text.Json.Serialization.JsonPropertyName("customTextParams")]
        public System.Collections.Generic.List<string>? CustomTextParams { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("dataElementId")]
        public string? DataElementId { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public required string? Description { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("field")]
        public string? Field { get; set; }
        [System.Text.Json.Serialization.JsonIgnore(Condition=System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]
        [System.Text.Json.Serialization.JsonPropertyName("noIncrementalUpdates")]
        public bool NoIncrementalUpdates { get; set; }
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonNumberEnumConverter<Altinn.App.Core.Models.Validation.ValidationIssueSeverity>?))]
        [System.Text.Json.Serialization.JsonPropertyName("severity")]
        public required Altinn.App.Core.Models.Validation.ValidationIssueSeverity Severity { get; set; }
        [System.ComponentModel.DataAnnotations.Required]
        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public required string Source { get; set; }
        public static Altinn.App.Core.Models.Validation.ValidationIssueWithSource FromIssue(Altinn.App.Core.Models.Validation.ValidationIssue issue, string source, bool noIncrementalUpdates) { }
    }
    public class ValidationSourcePair : System.IEquatable<Altinn.App.Core.Models.Validation.ValidationSourcePair>
    {
        public ValidationSourcePair(string Source, System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssueWithSource> Issues) { }
        [System.ComponentModel.DataAnnotations.Required]
        [System.Text.Json.Serialization.JsonPropertyName("issues")]
        public System.Collections.Generic.List<Altinn.App.Core.Models.Validation.ValidationIssueWithSource> Issues { get; init; }
        [System.ComponentModel.DataAnnotations.Required]
        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; init; }
    }
}